=Grammar:

_blankspace: /[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment: '//' /.*/
access_mode: 'read' | 'write' | 'read_write'
additive_expression: multiplicative_expression | additive_expression plus multiplicative_expression | additive_expression minus multiplicative_expression
address_space: 'function' | 'private' | 'workgroup' | 'uniform' | 'storage'
and: '&'
and_and: '&&'
and_equal: '&='
argument_expression_list: paren_left argument_expression_list/0.1 paren_right
argument_expression_list/0.1: argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 | ε
argument_expression_list/0.1/0.0: argument_expression_list/0.1/0.0/0 | ε
argument_expression_list/0.1/0.0/0: argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 | ε
argument_expression_list/0.1/0.0/0/0.0: expression comma
argument_expression_list/0.1/0.2: comma | ε
array: 'array'
array_type_decl: 'array' less_than type_decl array_type_decl/0.3 greater_than
array_type_decl/0.3: comma element_count_expression | ε
arrow: '->'
assignment_statement: lhs_expression assignment_statement/0.1 expression
assignment_statement/0.1: equal | compound_assignment_operator
atomic: 'atomic'
attr: '@'
attribute: attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right
attribute/0.3: attribute/0.3/0 | ε
attribute/0.3/0: attribute/0.3/0/0.0 attribute/0.3/0 | ε
attribute/0.3/0/0.0: literal_or_ident comma
attribute/0.5: comma | ε
bang: '!'
binary_and_expression: unary_expression | binary_and_expression and unary_expression
binary_or_expression: unary_expression | binary_or_expression or unary_expression
binary_xor_expression: unary_expression | binary_xor_expression xor unary_expression
bitcast: 'bitcast'
bitwise_expression: binary_and_expression and unary_expression | binary_or_expression or unary_expression | binary_xor_expression xor unary_expression
bool: 'bool'
bool_literal: 'true' | 'false'
brace_left: '{'
brace_right: '}'
bracket_left: '['
bracket_right: ']'
break: 'break'
break_if_statement: 'break' 'if' expression semicolon
break_statement: 'break'
callable: ident | type_decl_without_ident | vec_prefix | mat_prefix
case: 'case'
case_compound_statement: brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right
case_compound_statement/0.1: case_compound_statement/0.1/0 | ε
case_compound_statement/0.1/0: statement case_compound_statement/0.1/0 | ε
case_compound_statement/0.2: fallthrough_statement | ε
case_selectors: expression case_selectors/0.1 case_selectors/0.2
case_selectors/0.1: case_selectors/0.1/0 | ε
case_selectors/0.1/0: case_selectors/0.1/0/0.0 case_selectors/0.1/0 | ε
case_selectors/0.1/0/0.0: comma expression
case_selectors/0.2: comma | ε
colon: ':'
comma: ','
compound_assignment_operator: plus_equal | minus_equal | times_equal | division_equal | modulo_equal | and_equal | or_equal | xor_equal | shift_right_equal | shift_left_equal
compound_statement: brace_left compound_statement/0.1 brace_right
compound_statement/0.1: compound_statement/0.1/0 | ε
compound_statement/0.1/0: statement compound_statement/0.1/0 | ε
const: 'const'
const_literal: int_literal | float_literal | bool_literal
continue: 'continue'
continue_statement: 'continue'
continuing: 'continuing'
continuing_compound_statement: brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right
continuing_compound_statement/0.1: continuing_compound_statement/0.1/0 | ε
continuing_compound_statement/0.1/0: statement continuing_compound_statement/0.1/0 | ε
continuing_compound_statement/0.2: break_if_statement | ε
continuing_statement: 'continuing' continuing_compound_statement
core_lhs_expression: ident | paren_left lhs_expression paren_right
decimal_float_literal: /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ | /[0-9]+[eE][+-]?[0-9]+[fh]?/ | /0[fh]/ | /[1-9][0-9]*[fh]/
decrement_statement: lhs_expression minus_minus
default: 'default'
depth_texture_type: 'texture_depth_2d' | 'texture_depth_2d_array' | 'texture_depth_cube' | 'texture_depth_cube_array' | 'texture_depth_multisampled_2d'
discard: 'discard'
division_equal: '/='
element_count_expression: additive_expression | bitwise_expression
else: 'else'
else_statement: compound_statement | if_statement
enable: 'enable'
enable_directive: 'enable' ident semicolon
equal: '='
equal_equal: '=='
expression: relational_expression | short_circuit_or_expression or_or relational_expression | short_circuit_and_expression and_and relational_expression | bitwise_expression
fallthrough: 'fallthrough'
fallthrough_statement: 'fallthrough' semicolon
false: 'false'
float16: 'f16'
float32: 'f32'
float_literal: decimal_float_literal | hex_float_literal
fn: 'fn'
for: 'for'
for_header: for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4
for_header/0.0: for_init | ε
for_header/0.2: expression | ε
for_header/0.4: for_update | ε
for_init: variable_statement | increment_statement | decrement_statement | assignment_statement | func_call_statement
for_statement: 'for' paren_left for_header paren_right compound_statement
for_update: increment_statement | decrement_statement | assignment_statement | func_call_statement
forward_slash: '/'
func_call_statement: ident argument_expression_list
function: 'function'
function_decl: function_decl/0.0 function_header compound_statement
function_decl/0.0: function_decl/0.0/0 | ε
function_decl/0.0/0: attribute function_decl/0.0/0 | ε
function_header: 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5
function_header/0.3: param_list | ε
function_header/0.5: arrow function_header/0.5/0.1 type_decl | ε
function_header/0.5/0.1: function_header/0.5/0.1/0 | ε
function_header/0.5/0.1/0: attribute function_header/0.5/0.1/0 | ε
global_constant_decl: 'const' global_constant_decl/0.1 equal expression | global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3
global_constant_decl/0.1: ident | variable_ident_decl
global_constant_decl/1.0: global_constant_decl/1.0/0 | ε
global_constant_decl/1.0/0: attribute global_constant_decl/1.0/0 | ε
global_constant_decl/1.2: ident | variable_ident_decl
global_constant_decl/1.3: equal expression | ε
global_decl: semicolon | global_variable_decl semicolon | global_constant_decl semicolon | type_alias_decl semicolon | struct_decl | function_decl | static_assert_statement semicolon
global_directive: enable_directive
global_variable_decl: global_variable_decl/0.0 variable_decl global_variable_decl/0.2
global_variable_decl/0.0: global_variable_decl/0.0/0 | ε
global_variable_decl/0.0/0: attribute global_variable_decl/0.0/0 | ε
global_variable_decl/0.2: equal expression | ε
greater_than: '>'
greater_than_equal: '>='
hex_float_literal: /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
ident: /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if: 'if'
if_statement: 'if' expression compound_statement if_statement/0.3
if_statement/0.3: 'else' else_statement | ε
increment_statement: lhs_expression plus_plus
int32: 'i32'
int_literal: /0[xX][0-9a-fA-F]+[iu]?/ | /0[iu]?/ | /[1-9][0-9]*[iu]?/
language: translation_unit EndOfText
less_than: '<'
less_than_equal: '<='
let: 'let'
lhs_expression: lhs_expression/0.0 core_lhs_expression lhs_expression/0.2
lhs_expression/0.0: lhs_expression/0.0/0 | ε
lhs_expression/0.0/0: lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 | ε
lhs_expression/0.0/0/0.0: star | and
lhs_expression/0.2: postfix_expression | ε
literal_or_ident: float_literal | int_literal | ident
loop: 'loop'
loop_statement: 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right
loop_statement/0.2: loop_statement/0.2/0 | ε
loop_statement/0.2/0: statement loop_statement/0.2/0 | ε
loop_statement/0.3: continuing_statement | ε
mat2x2: 'mat2x2'
mat2x3: 'mat2x3'
mat2x4: 'mat2x4'
mat3x2: 'mat3x2'
mat3x3: 'mat3x3'
mat3x4: 'mat3x4'
mat4x2: 'mat4x2'
mat4x3: 'mat4x3'
mat4x4: 'mat4x4'
mat_prefix: 'mat2x2' | 'mat2x3' | 'mat2x4' | 'mat3x2' | 'mat3x3' | 'mat3x4' | 'mat4x2' | 'mat4x3' | 'mat4x4'
minus: '-'
minus_equal: '-='
minus_minus: '--'
modulo: '%'
modulo_equal: '%='
multiplicative_expression: unary_expression | multiplicative_expression star unary_expression | multiplicative_expression forward_slash unary_expression | multiplicative_expression modulo unary_expression
multisampled_texture_type: 'texture_multisampled_2d'
not_equal: '!='
or: '|'
or_equal: '|='
or_or: '||'
override: 'override'
param: param/0.0 variable_ident_decl
param/0.0: param/0.0/0 | ε
param/0.0/0: attribute param/0.0/0 | ε
param_list: param_list/0.0 param param_list/0.2
param_list/0.0: param_list/0.0/0 | ε
param_list/0.0/0: param_list/0.0/0/0.0 param_list/0.0/0 | ε
param_list/0.0/0/0.0: param comma
param_list/0.2: comma | ε
paren_expression: paren_left expression paren_right
paren_left: '('
paren_right: ')'
period: '.'
plus: '+'
plus_equal: '+='
plus_plus: '++'
pointer: 'ptr'
postfix_expression: bracket_left expression bracket_right postfix_expression/0.3 | period ident postfix_expression/1.2
postfix_expression/0.3: postfix_expression | ε
postfix_expression/1.2: postfix_expression | ε
primary_expression: ident | callable argument_expression_list | const_literal | paren_expression | 'bitcast' less_than type_decl greater_than paren_expression
private: 'private'
relational_expression: shift_expression | shift_expression less_than shift_expression | shift_expression greater_than shift_expression | shift_expression less_than_equal shift_expression | shift_expression greater_than_equal shift_expression | shift_expression equal_equal shift_expression | shift_expression not_equal shift_expression
return: 'return'
return_statement: 'return' return_statement/0.1
return_statement/0.1: expression | ε
sampled_texture_type: 'texture_1d' | 'texture_2d' | 'texture_2d_array' | 'texture_3d' | 'texture_cube' | 'texture_cube_array'
sampler: 'sampler'
sampler_comparison: 'sampler_comparison'
sampler_type: 'sampler' | 'sampler_comparison'
semicolon: ';'
shift_expression: additive_expression | unary_expression shift_left unary_expression | unary_expression shift_right unary_expression
shift_left: '<<'
shift_left_equal: '<<='
shift_right: '>>'
shift_right_equal: '>>='
short_circuit_and_expression: relational_expression | short_circuit_and_expression and_and relational_expression
short_circuit_or_expression: relational_expression | short_circuit_or_expression or_or relational_expression
singular_expression: primary_expression singular_expression/0.1
singular_expression/0.1: postfix_expression | ε
star: '*'
statement: semicolon | return_statement semicolon | if_statement | switch_statement | loop_statement | for_statement | while_statement | func_call_statement semicolon | variable_statement semicolon | break_statement semicolon | continue_statement semicolon | 'discard' semicolon | assignment_statement semicolon | compound_statement | increment_statement semicolon | decrement_statement semicolon | static_assert_statement semicolon
staticAssert: 'staticAssert'
static_assert_statement: 'staticAssert' expression
storage: 'storage'
storage_texture_type: 'texture_storage_1d' | 'texture_storage_2d' | 'texture_storage_2d_array' | 'texture_storage_3d'
struct: 'struct'
struct_body_decl: brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right
struct_body_decl/0.1: struct_body_decl/0.1/0 | ε
struct_body_decl/0.1/0: struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 | ε
struct_body_decl/0.1/0/0.0: struct_member comma
struct_body_decl/0.3: comma | ε
struct_decl: 'struct' ident struct_body_decl
struct_member: struct_member/0.0 variable_ident_decl
struct_member/0.0: struct_member/0.0/0 | ε
struct_member/0.0/0: attribute struct_member/0.0/0 | ε
switch: 'switch'
switch_body: 'case' case_selectors switch_body/0.2 case_compound_statement | 'default' switch_body/1.1 case_compound_statement
switch_body/0.2: colon | ε
switch_body/1.1: colon | ε
switch_statement: 'switch' expression brace_left switch_statement/0.3 brace_right
switch_statement/0.3: switch_statement/0.3/0
switch_statement/0.3/0: switch_body switch_statement/0.3/0 | ε
texel_format: 'rgba8unorm' | 'rgba8snorm' | 'rgba8uint' | 'rgba8sint' | 'rgba16uint' | 'rgba16sint' | 'rgba16float' | 'r32uint' | 'r32sint' | 'r32float' | 'rg32uint' | 'rg32sint' | 'rg32float' | 'rgba32uint' | 'rgba32sint' | 'rgba32float'
texture_1d: 'texture_1d'
texture_2d: 'texture_2d'
texture_2d_array: 'texture_2d_array'
texture_3d: 'texture_3d'
texture_cube: 'texture_cube'
texture_cube_array: 'texture_cube_array'
texture_depth_2d: 'texture_depth_2d'
texture_depth_2d_array: 'texture_depth_2d_array'
texture_depth_cube: 'texture_depth_cube'
texture_depth_cube_array: 'texture_depth_cube_array'
texture_depth_multisampled_2d: 'texture_depth_multisampled_2d'
texture_multisampled_2d: 'texture_multisampled_2d'
texture_sampler_types: sampler_type | depth_texture_type | sampled_texture_type less_than type_decl greater_than | multisampled_texture_type less_than type_decl greater_than | storage_texture_type less_than texel_format comma access_mode greater_than
texture_storage_1d: 'texture_storage_1d'
texture_storage_2d: 'texture_storage_2d'
texture_storage_2d_array: 'texture_storage_2d_array'
texture_storage_3d: 'texture_storage_3d'
tilde: '~'
times_equal: '*='
translation_unit: translation_unit/0.0 translation_unit/0.1
translation_unit/0.0: translation_unit/0.0/0 | ε
translation_unit/0.0/0: global_directive translation_unit/0.0/0 | ε
translation_unit/0.1: translation_unit/0.1/0 | ε
translation_unit/0.1/0: global_decl translation_unit/0.1/0 | ε
true: 'true'
type: 'type'
type_alias_decl: 'type' ident equal type_decl
type_decl: ident | type_decl_without_ident
type_decl_without_ident: 'bool' | float32 | float16 | int32 | uint32 | pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than | array_type_decl | texture_sampler_types
type_decl_without_ident/7.5: comma access_mode | ε
uint32: 'u32'
unary_expression: singular_expression | minus unary_expression | bang unary_expression | tilde unary_expression | star unary_expression | and unary_expression
underscore: '_'
uniform: 'uniform'
var: 'var'
variable_decl: 'var' variable_decl/0.1 variable_decl/0.2
variable_decl/0.1: variable_qualifier | ε
variable_decl/0.2: ident | variable_ident_decl
variable_ident_decl: ident colon type_decl
variable_qualifier: less_than address_space variable_qualifier/0.2 greater_than
variable_qualifier/0.2: comma access_mode | ε
variable_statement: variable_decl | 'let' variable_statement/2.1 equal expression | 'const' variable_statement/3.1 equal expression
variable_statement/2.1: ident | variable_ident_decl
variable_statement/3.1: ident | variable_ident_decl
vec2: 'vec2'
vec3: 'vec3'
vec4: 'vec4'
vec_prefix: 'vec2' | 'vec3' | 'vec4'
while: 'while'
while_statement: 'while' expression compound_statement
workgroup: 'workgroup'
xor: '^'
xor_equal: '^='

=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' ident semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' global_constant_decl/0.1 equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'staticAssert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_decl : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_directive -> · 'enable' ident semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#5
global_directive -> 'enable' · ident semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}

#6
global_directive -> 'enable' ident · semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#7
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}

#8
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#9
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#10
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#11
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' global_constant_decl/0.1 equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'staticAssert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_decl : {';'}

#12
global_decl -> semicolon · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#13
global_decl -> global_variable_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#14
global_decl -> global_constant_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#15
global_decl -> type_alias_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#16
global_decl -> struct_decl · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#17
global_decl -> function_decl · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#18
global_decl -> static_assert_statement · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#19
semicolon -> ';' · : {'!' '&' '(' ')' '*' '-' ';' '@' 'array' 'bitcast' 'bool' 'break' 'const' 'continue' 'continuing' 'discard' 'enable' 'f16' 'f32' 'fallthrough' 'false' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'staticAssert' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'type' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#20
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}

#21
global_constant_decl -> 'const' · global_constant_decl/0.1 equal expression : {';'}
global_constant_decl/0.1 -> · ident : {'='}
global_constant_decl/0.1 -> · variable_ident_decl : {'='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}

#22
global_constant_decl -> global_constant_decl/1.0 · 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}

#23
type_alias_decl -> 'type' · ident equal type_decl : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}

#24
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#25
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
function_header -> · 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}

#26
static_assert_statement -> 'staticAssert' · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#27
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#28
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {'override'}

#29
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#30
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#31
attribute -> attr · ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#32
attr -> '@' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#33
attribute -> attr ident · paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#34
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#35
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {'override'}

#36
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#37
static_assert_statement -> 'staticAssert' expression · : {';'}

#38
expression -> relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> relational_expression · : {'&&'}
short_circuit_or_expression -> relational_expression · : {'||'}

#39
expression -> short_circuit_or_expression · or_or relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression · or_or relational_expression : {'||'}
or_or -> · '||' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#40
expression -> short_circuit_and_expression · and_and relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression · and_and relational_expression : {'&&'}
and_and -> · '&&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#41
expression -> bitwise_expression · : {')' ',' ':' ';' ']' '{'}

#42
relational_expression -> shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
equal_equal -> · '==' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
greater_than -> · '>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
greater_than_equal -> · '>=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
less_than -> · '<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
less_than_equal -> · '<=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
not_equal -> · '!=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#43
binary_and_expression -> binary_and_expression · and unary_expression : {'&'}
bitwise_expression -> binary_and_expression · and unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#44
binary_or_expression -> binary_or_expression · or unary_expression : {'|'}
bitwise_expression -> binary_or_expression · or unary_expression : {')' ',' ':' ';' '>' ']' '{'}
or -> · '|' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#45
binary_xor_expression -> binary_xor_expression · xor unary_expression : {'^'}
bitwise_expression -> binary_xor_expression · xor unary_expression : {')' ',' ':' ';' '>' ']' '{'}
xor -> · '^' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#46
additive_expression -> additive_expression · minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> additive_expression · plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> additive_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#47
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#48
additive_expression -> multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#49
unary_expression -> singular_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#50
unary_expression -> minus · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#51
unary_expression -> bang · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#52
unary_expression -> tilde · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#53
unary_expression -> star · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#54
unary_expression -> and · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#55
singular_expression -> primary_expression · singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
period -> · '.' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
postfix_expression -> · period ident postfix_expression/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
singular_expression/0.1 -> · postfix_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#56
minus -> '-' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#57
bang -> '!' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#58
tilde -> '~' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#59
star -> '*' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#60
and -> '&' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#61
callable -> ident · : {'('}
primary_expression -> ident · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#62
primary_expression -> callable · argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#63
primary_expression -> const_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#64
primary_expression -> paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#65
primary_expression -> 'bitcast' · less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#66
callable -> type_decl_without_ident · : {'('}

#67
callable -> vec_prefix · : {'('}

#68
callable -> mat_prefix · : {'('}

#69
const_literal -> int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#70
const_literal -> float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#71
const_literal -> bool_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#72
paren_expression -> paren_left · expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')'}
bitwise_expression -> · binary_or_expression or unary_expression : {')'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')'}
expression -> · relational_expression : {')'}
expression -> · short_circuit_and_expression and_and relational_expression : {')'}
expression -> · short_circuit_or_expression or_or relational_expression : {')'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#73
type_decl_without_ident -> 'bool' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#74
type_decl_without_ident -> float32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#75
type_decl_without_ident -> float16 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#76
type_decl_without_ident -> int32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#77
type_decl_without_ident -> uint32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#78
type_decl_without_ident -> pointer · less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'function' 'private' 'storage' 'uniform' 'workgroup'}

#79
type_decl_without_ident -> array_type_decl · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#80
type_decl_without_ident -> texture_sampler_types · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#81
vec_prefix -> 'vec2' · : {'('}

#82
vec_prefix -> 'vec3' · : {'('}

#83
vec_prefix -> 'vec4' · : {'('}

#84
mat_prefix -> 'mat2x2' · : {'('}

#85
mat_prefix -> 'mat2x3' · : {'('}

#86
mat_prefix -> 'mat2x4' · : {'('}

#87
mat_prefix -> 'mat3x2' · : {'('}

#88
mat_prefix -> 'mat3x3' · : {'('}

#89
mat_prefix -> 'mat3x4' · : {'('}

#90
mat_prefix -> 'mat4x2' · : {'('}

#91
mat_prefix -> 'mat4x3' · : {'('}

#92
mat_prefix -> 'mat4x4' · : {'('}

#93
int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#94
int_literal -> /0[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#95
int_literal -> /[1-9][0-9]*[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#96
float_literal -> decimal_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#97
float_literal -> hex_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#98
bool_literal -> 'true' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#99
bool_literal -> 'false' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#100
paren_left -> '(' · : {'!' '&' '(' ')' '*' '-' ';' '@' 'array' 'bitcast' 'bool' 'const' 'f16' 'f32' 'false' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'var' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#101
float32 -> 'f32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#102
float16 -> 'f16' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#103
int32 -> 'i32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#104
uint32 -> 'u32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#105
pointer -> 'ptr' · : {'<'}

#106
array_type_decl -> 'array' · less_than type_decl array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#107
texture_sampler_types -> sampler_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#108
texture_sampler_types -> depth_texture_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#109
texture_sampler_types -> sampled_texture_type · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#110
texture_sampler_types -> multisampled_texture_type · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#111
texture_sampler_types -> storage_texture_type · less_than texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {}

#112
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#113
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#114
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#115
decimal_float_literal -> /0[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#116
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#117
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#118
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#119
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#120
sampler_type -> 'sampler' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#121
sampler_type -> 'sampler_comparison' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#122
depth_texture_type -> 'texture_depth_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#123
depth_texture_type -> 'texture_depth_2d_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#124
depth_texture_type -> 'texture_depth_cube' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#125
depth_texture_type -> 'texture_depth_cube_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#126
depth_texture_type -> 'texture_depth_multisampled_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#127
sampled_texture_type -> 'texture_1d' · : {'<'}

#128
sampled_texture_type -> 'texture_2d' · : {'<'}

#129
sampled_texture_type -> 'texture_2d_array' · : {'<'}

#130
sampled_texture_type -> 'texture_3d' · : {'<'}

#131
sampled_texture_type -> 'texture_cube' · : {'<'}

#132
sampled_texture_type -> 'texture_cube_array' · : {'<'}

#133
multisampled_texture_type -> 'texture_multisampled_2d' · : {'<'}

#134
storage_texture_type -> 'texture_storage_1d' · : {'<'}

#135
storage_texture_type -> 'texture_storage_2d' · : {'<'}

#136
storage_texture_type -> 'texture_storage_2d_array' · : {'<'}

#137
storage_texture_type -> 'texture_storage_3d' · : {'<'}

#138
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#139
function_header -> 'fn' · ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#140
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl -> · brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#141
type_alias_decl -> 'type' ident · equal type_decl : {';'}
equal -> · '=' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#142
global_constant_decl -> global_constant_decl/1.0 'override' · global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.2 -> · ident : {';' '='}
global_constant_decl/1.2 -> · variable_ident_decl : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
variable_ident_decl -> · ident colon type_decl : {';' '='}

#143
global_constant_decl -> 'const' global_constant_decl/0.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#144
global_constant_decl/0.1 -> ident · : {'='}
variable_ident_decl -> ident · colon type_decl : {'='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#145
global_constant_decl/0.1 -> variable_ident_decl · : {'='}

#146
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
global_variable_decl/0.2 -> · equal expression : {';'}

#147
variable_decl -> 'var' · variable_decl/0.1 variable_decl/0.2 : {';' '='}
less_than -> · '<' : {'function' 'private' 'storage' 'uniform' 'workgroup'}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · less_than address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#148
global_decl -> static_assert_statement semicolon · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#149
global_decl -> type_alias_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#150
global_decl -> global_constant_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#151
global_decl -> global_variable_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#152
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#153
global_directive -> 'enable' ident semicolon · : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#154
variable_decl -> 'var' variable_decl/0.1 · variable_decl/0.2 : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
variable_decl/0.2 -> · ident : {';' '='}
variable_decl/0.2 -> · variable_ident_decl : {';' '='}
variable_ident_decl -> · ident colon type_decl : {';' '='}

#155
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#156
variable_qualifier -> less_than · address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {',' '>'}
address_space -> · 'private' : {',' '>'}
address_space -> · 'storage' : {',' '>'}
address_space -> · 'uniform' : {',' '>'}
address_space -> · 'workgroup' : {',' '>'}

#157
less_than -> '<' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'function' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'private' 'ptr' 'sampler' 'sampler_comparison' 'storage' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'uniform' 'vec2' 'vec3' 'vec4' 'workgroup' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#158
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {';'}

#159
global_variable_decl/0.2 -> equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#160
equal -> '=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#161
variable_ident_decl -> ident colon · type_decl : {')' ',' ';' '=' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {')' ',' ';' '=' '}'}
depth_texture_type -> · 'texture_depth_2d' : {')' ',' ';' '=' '}'}
depth_texture_type -> · 'texture_depth_2d_array' : {')' ',' ';' '=' '}'}
depth_texture_type -> · 'texture_depth_cube' : {')' ',' ';' '=' '}'}
depth_texture_type -> · 'texture_depth_cube_array' : {')' ',' ';' '=' '}'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {')' ',' ';' '=' '}'}
float16 -> · 'f16' : {')' ',' ';' '=' '}'}
float32 -> · 'f32' : {')' ',' ';' '=' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ',' ';' '=' '}'}
int32 -> · 'i32' : {')' ',' ';' '=' '}'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {')' ',' ';' '=' '}'}
sampler_type -> · 'sampler_comparison' : {')' ',' ';' '=' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {')' ',' ';' '=' '}'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {')' ',' ';' '=' '}'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {')' ',' ';' '=' '}'}
texture_sampler_types -> · sampler_type : {')' ',' ';' '=' '}'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {')' ',' ';' '=' '}'}
type_decl -> · ident : {')' ',' ';' '=' '}'}
type_decl -> · type_decl_without_ident : {')' ',' ';' '=' '}'}
type_decl_without_ident -> · 'bool' : {')' ',' ';' '=' '}'}
type_decl_without_ident -> · array_type_decl : {')' ',' ';' '=' '}'}
type_decl_without_ident -> · float16 : {')' ',' ';' '=' '}'}
type_decl_without_ident -> · float32 : {')' ',' ';' '=' '}'}
type_decl_without_ident -> · int32 : {')' ',' ';' '=' '}'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {')' ',' ';' '=' '}'}
type_decl_without_ident -> · texture_sampler_types : {')' ',' ';' '=' '}'}
type_decl_without_ident -> · uint32 : {')' ',' ';' '=' '}'}
uint32 -> · 'u32' : {')' ',' ';' '=' '}'}

#162
colon -> ':' · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#163
global_constant_decl -> 'const' global_constant_decl/0.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#164
global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 · global_constant_decl/1.3 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
global_constant_decl/1.3 -> · equal expression : {';'}

#165
global_constant_decl/1.2 -> ident · : {';' '='}
variable_ident_decl -> ident · colon type_decl : {';' '='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#166
global_constant_decl/1.2 -> variable_ident_decl · : {';' '='}

#167
type_alias_decl -> 'type' ident equal · type_decl : {';'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {';'}
depth_texture_type -> · 'texture_depth_2d' : {';'}
depth_texture_type -> · 'texture_depth_2d_array' : {';'}
depth_texture_type -> · 'texture_depth_cube' : {';'}
depth_texture_type -> · 'texture_depth_cube_array' : {';'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';'}
float16 -> · 'f16' : {';'}
float32 -> · 'f32' : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}
int32 -> · 'i32' : {';'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';'}
sampler_type -> · 'sampler_comparison' : {';'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {';'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {';'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {';'}
texture_sampler_types -> · sampler_type : {';'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {';'}
type_decl -> · ident : {';'}
type_decl -> · type_decl_without_ident : {';'}
type_decl_without_ident -> · 'bool' : {';'}
type_decl_without_ident -> · array_type_decl : {';'}
type_decl_without_ident -> · float16 : {';'}
type_decl_without_ident -> · float32 : {';'}
type_decl_without_ident -> · int32 : {';'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {';'}
type_decl_without_ident -> · texture_sampler_types : {';'}
type_decl_without_ident -> · uint32 : {';'}
uint32 -> · 'u32' : {';'}

#168
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#169
struct_body_decl -> brace_left · struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1 -> · struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0 -> · struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0/0.0 -> · struct_member comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 variable_ident_decl : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#170
brace_left -> '{' · : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#171
function_header -> 'fn' ident · paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
paren_left -> · '(' : {')' '@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#172
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#173
compound_statement -> brace_left · compound_statement/0.1 brace_right : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'staticAssert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1 -> · compound_statement/0.1/0 : {'}'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#174
texture_sampler_types -> storage_texture_type less_than · texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
texel_format -> · 'r32float' : {','}
texel_format -> · 'r32sint' : {','}
texel_format -> · 'r32uint' : {','}
texel_format -> · 'rg32float' : {','}
texel_format -> · 'rg32sint' : {','}
texel_format -> · 'rg32uint' : {','}
texel_format -> · 'rgba16float' : {','}
texel_format -> · 'rgba16sint' : {','}
texel_format -> · 'rgba16uint' : {','}
texel_format -> · 'rgba32float' : {','}
texel_format -> · 'rgba32sint' : {','}
texel_format -> · 'rgba32uint' : {','}
texel_format -> · 'rgba8sint' : {','}
texel_format -> · 'rgba8snorm' : {','}
texel_format -> · 'rgba8uint' : {','}
texel_format -> · 'rgba8unorm' : {','}

#175
texture_sampler_types -> multisampled_texture_type less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'>'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampler_type : {'>'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#176
texture_sampler_types -> sampled_texture_type less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'>'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampler_type : {'>'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#177
array_type_decl -> 'array' less_than · type_decl array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {',' '>'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_sampler_types -> · sampler_type : {',' '>'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_decl -> · ident : {',' '>'}
type_decl -> · type_decl_without_ident : {',' '>'}
type_decl_without_ident -> · 'bool' : {',' '>'}
type_decl_without_ident -> · array_type_decl : {',' '>'}
type_decl_without_ident -> · float16 : {',' '>'}
type_decl_without_ident -> · float32 : {',' '>'}
type_decl_without_ident -> · int32 : {',' '>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '>'}
type_decl_without_ident -> · texture_sampler_types : {',' '>'}
type_decl_without_ident -> · uint32 : {',' '>'}
uint32 -> · 'u32' : {',' '>'}

#178
type_decl_without_ident -> pointer less_than · address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#179
paren_expression -> paren_left expression · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#180
primary_expression -> 'bitcast' less_than · type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'>'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampler_type : {'>'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#181
primary_expression -> callable argument_expression_list · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#182
argument_expression_list -> paren_left · argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
argument_expression_list/0.1 -> · argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.0 -> · argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
argument_expression_list/0.1/0.0/0 -> · argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
argument_expression_list/0.1/0.0/0/0.0 -> · expression comma : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {','}
bitwise_expression -> · binary_or_expression or unary_expression : {','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression and_and relational_expression : {','}
expression -> · short_circuit_or_expression or_or relational_expression : {','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#183
singular_expression -> primary_expression singular_expression/0.1 · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#184
singular_expression/0.1 -> postfix_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#185
postfix_expression -> bracket_left · expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {']'}
bitwise_expression -> · binary_or_expression or unary_expression : {']'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {']'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {']'}
expression -> · relational_expression : {']'}
expression -> · short_circuit_and_expression and_and relational_expression : {']'}
expression -> · short_circuit_or_expression or_or relational_expression : {']'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ']' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#186
postfix_expression -> period · ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#187
bracket_left -> '[' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#188
period -> '.' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#189
unary_expression -> and unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#190
unary_expression -> star unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#191
unary_expression -> tilde unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#192
unary_expression -> bang unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#193
unary_expression -> minus unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#194
multiplicative_expression -> multiplicative_expression star · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#195
multiplicative_expression -> multiplicative_expression forward_slash · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#196
multiplicative_expression -> multiplicative_expression modulo · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#197
forward_slash -> '/' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#198
modulo -> '%' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#199
shift_expression -> unary_expression shift_left · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#200
shift_expression -> unary_expression shift_right · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#201
shift_left -> '<<' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#202
shift_right -> '>>' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#203
additive_expression -> additive_expression plus · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#204
additive_expression -> additive_expression minus · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#205
plus -> '+' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#206
binary_xor_expression -> binary_xor_expression xor · unary_expression : {'^'}
bitwise_expression -> binary_xor_expression xor · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
const_literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
const_literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · const_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '^' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#207
xor -> '^' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#208
binary_or_expression -> binary_or_expression or · unary_expression : {'|'}
bitwise_expression -> binary_or_expression or · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
const_literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
const_literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · const_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '{' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#209
or -> '|' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#210
binary_and_expression -> binary_and_expression and · unary_expression : {'&'}
bitwise_expression -> binary_and_expression and · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
bool_literal -> · 'true' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
const_literal -> · float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
const_literal -> · int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /0[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'&' '(' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · const_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · ident : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · bang unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · minus unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · singular_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · star unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · tilde unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#211
relational_expression -> shift_expression less_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#212
relational_expression -> shift_expression greater_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#213
relational_expression -> shift_expression less_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#214
relational_expression -> shift_expression greater_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#215
relational_expression -> shift_expression equal_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#216
relational_expression -> shift_expression not_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#217
greater_than -> '>' · : {'!' '&' '(' ')' '*' ',' '-' ';' '=' '>' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#218
less_than_equal -> '<=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#219
greater_than_equal -> '>=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#220
equal_equal -> '==' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#221
not_equal -> '!=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#222
expression -> short_circuit_and_expression and_and · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and · relational_expression : {'&&'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
relational_expression -> · shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#223
and_and -> '&&' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#224
expression -> short_circuit_or_expression or_or · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or · relational_expression : {'||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
bool_literal -> · 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
relational_expression -> · shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#225
or_or -> '||' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#226
attribute -> attr ident paren_left · attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute/0.3 -> · attribute/0.3/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute/0.3/0 -> · attribute/0.3/0/0.0 attribute/0.3/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute/0.3/0/0.0 -> · literal_or_ident comma : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
decimal_float_literal -> · /0[fh]/ : {','}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {','}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {','}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {','}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {','}
float_literal -> · decimal_float_literal : {','}
float_literal -> · hex_float_literal : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {','}
int_literal -> · /0[iu]?/ : {','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {','}
literal_or_ident -> · float_literal : {','}
literal_or_ident -> · ident : {','}
literal_or_ident -> · int_literal : {','}

#227
attribute -> attr ident paren_left attribute/0.3 · literal_or_ident attribute/0.5 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
decimal_float_literal -> · /0[fh]/ : {')' ','}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ','}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ','}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ','}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ','}
float_literal -> · decimal_float_literal : {')' ','}
float_literal -> · hex_float_literal : {')' ','}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}
int_literal -> · /0[iu]?/ : {')' ','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ','}
literal_or_ident -> · float_literal : {')' ','}
literal_or_ident -> · ident : {')' ','}
literal_or_ident -> · int_literal : {')' ','}

#228
attribute/0.3 -> attribute/0.3/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#229
attribute/0.3/0 -> attribute/0.3/0/0.0 · attribute/0.3/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute/0.3/0 -> · attribute/0.3/0/0.0 attribute/0.3/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute/0.3/0/0.0 -> · literal_or_ident comma : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
decimal_float_literal -> · /0[fh]/ : {','}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {','}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {','}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {','}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {','}
float_literal -> · decimal_float_literal : {','}
float_literal -> · hex_float_literal : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {','}
int_literal -> · /0[iu]?/ : {','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {','}
literal_or_ident -> · float_literal : {','}
literal_or_ident -> · ident : {','}
literal_or_ident -> · int_literal : {','}

#230
attribute/0.3/0/0.0 -> literal_or_ident · comma : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#231
literal_or_ident -> float_literal · : {')' ','}

#232
literal_or_ident -> int_literal · : {')' ','}

#233
literal_or_ident -> ident · : {')' ','}

#234
expression -> short_circuit_or_expression or_or relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression · : {'||'}

#235
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#236
expression -> short_circuit_and_expression and_and relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression · : {'&&'}

#237
relational_expression -> shift_expression not_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#238
relational_expression -> shift_expression equal_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#239
relational_expression -> shift_expression greater_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#240
relational_expression -> shift_expression less_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#241
relational_expression -> shift_expression greater_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#242
relational_expression -> shift_expression less_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#243
binary_and_expression -> binary_and_expression and unary_expression · : {'&'}
bitwise_expression -> binary_and_expression and unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#244
binary_or_expression -> binary_or_expression or unary_expression · : {'|'}
bitwise_expression -> binary_or_expression or unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#245
binary_xor_expression -> binary_xor_expression xor unary_expression · : {'^'}
bitwise_expression -> binary_xor_expression xor unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#246
additive_expression -> additive_expression minus multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#247
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#248
additive_expression -> additive_expression plus multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#249
shift_expression -> unary_expression shift_right unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#250
shift_expression -> unary_expression shift_left unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#251
multiplicative_expression -> multiplicative_expression modulo unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#252
multiplicative_expression -> multiplicative_expression forward_slash unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#253
multiplicative_expression -> multiplicative_expression star unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#254
postfix_expression -> period ident · postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
period -> · '.' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/1.2 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#255
postfix_expression -> bracket_left expression · bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_right -> · ']' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#256
argument_expression_list -> paren_left argument_expression_list/0.1 · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#257
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 · expression argument_expression_list/0.1/0.2 : {')'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#258
argument_expression_list/0.1/0.0 -> argument_expression_list/0.1/0.0/0 · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#259
argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 · argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
argument_expression_list/0.1/0.0/0 -> · argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
argument_expression_list/0.1/0.0/0/0.0 -> · expression comma : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {','}
bitwise_expression -> · binary_or_expression or unary_expression : {','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression and_and relational_expression : {','}
expression -> · short_circuit_or_expression or_or relational_expression : {','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#260
argument_expression_list/0.1/0.0/0/0.0 -> expression · comma : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#261
primary_expression -> 'bitcast' less_than type_decl · greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
greater_than -> · '>' : {'('}

#262
type_decl -> ident · : {')' ',' ';' '=' '>' '{' '}'}

#263
type_decl -> type_decl_without_ident · : {')' ',' ';' '=' '>' '{' '}'}

#264
paren_expression -> paren_left expression paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#265
paren_right -> ')' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '->' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' '{' '|' '|=' '||' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#266
type_decl_without_ident -> pointer less_than address_space · comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#267
address_space -> 'function' · : {',' '>'}

#268
address_space -> 'private' · : {',' '>'}

#269
address_space -> 'workgroup' · : {',' '>'}

#270
address_space -> 'uniform' · : {',' '>'}

#271
address_space -> 'storage' · : {',' '>'}

#272
array_type_decl -> 'array' less_than type_decl · array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl/0.3 -> · comma element_count_expression : {'>'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#273
texture_sampler_types -> sampled_texture_type less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#274
texture_sampler_types -> multisampled_texture_type less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#275
texture_sampler_types -> storage_texture_type less_than texel_format · comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}

#276
texel_format -> 'rgba8unorm' · : {','}

#277
texel_format -> 'rgba8snorm' · : {','}

#278
texel_format -> 'rgba8uint' · : {','}

#279
texel_format -> 'rgba8sint' · : {','}

#280
texel_format -> 'rgba16uint' · : {','}

#281
texel_format -> 'rgba16sint' · : {','}

#282
texel_format -> 'rgba16float' · : {','}

#283
texel_format -> 'r32uint' · : {','}

#284
texel_format -> 'r32sint' · : {','}

#285
texel_format -> 'r32float' · : {','}

#286
texel_format -> 'rg32uint' · : {','}

#287
texel_format -> 'rg32sint' · : {','}

#288
texel_format -> 'rg32float' · : {','}

#289
texel_format -> 'rgba32uint' · : {','}

#290
texel_format -> 'rgba32sint' · : {','}

#291
texel_format -> 'rgba32float' · : {','}

#292
compound_statement -> brace_left compound_statement/0.1 · brace_right : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'staticAssert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
brace_right -> · '}' : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'staticAssert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#293
compound_statement/0.1 -> compound_statement/0.1/0 · : {'}'}

#294
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {'}'}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#295
statement -> semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#296
statement -> return_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#297
statement -> if_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#298
statement -> switch_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#299
statement -> loop_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#300
statement -> for_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#301
statement -> while_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#302
statement -> func_call_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#303
statement -> variable_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#304
statement -> break_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#305
statement -> continue_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#306
statement -> 'discard' · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#307
statement -> assignment_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#308
statement -> compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#309
statement -> increment_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#310
statement -> decrement_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#311
statement -> static_assert_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#312
return_statement -> 'return' · return_statement/0.1 : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> · expression : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#313
if_statement -> 'if' · expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#314
switch_statement -> 'switch' · expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#315
loop_statement -> 'loop' · brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#316
for_statement -> 'for' · paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*' ';' 'const' 'let' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#317
while_statement -> 'while' · expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#318
func_call_statement -> ident · argument_expression_list : {')' ';'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {')' ';'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#319
variable_statement -> variable_decl · : {';'}

#320
variable_statement -> 'let' · variable_statement/2.1 equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}
variable_statement/2.1 -> · ident : {'='}
variable_statement/2.1 -> · variable_ident_decl : {'='}

#321
variable_statement -> 'const' · variable_statement/3.1 equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}
variable_statement/3.1 -> · ident : {'='}
variable_statement/3.1 -> · variable_ident_decl : {'='}

#322
break_statement -> 'break' · : {';'}

#323
continue_statement -> 'continue' · : {';'}

#324
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression · minus_minus : {')' ';'}
increment_statement -> lhs_expression · plus_plus : {')' ';'}
and_equal -> · '&=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement/0.1 -> · equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_assignment_operator -> · and_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_assignment_operator -> · division_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_assignment_operator -> · minus_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_assignment_operator -> · modulo_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_assignment_operator -> · or_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_assignment_operator -> · plus_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_assignment_operator -> · shift_left_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_assignment_operator -> · shift_right_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_assignment_operator -> · times_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_assignment_operator -> · xor_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
division_equal -> · '/=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
minus_equal -> · '-=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
minus_minus -> · '--' : {')' ';'}
modulo_equal -> · '%=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
or_equal -> · '|=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
plus_equal -> · '+=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
plus_plus -> · '++' : {')' ';'}
shift_left_equal -> · '<<=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
shift_right_equal -> · '>>=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
times_equal -> · '*=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
xor_equal -> · '^=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#325
lhs_expression -> lhs_expression/0.0 · core_lhs_expression lhs_expression/0.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#326
lhs_expression/0.0 -> lhs_expression/0.0/0 · : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#327
lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#328
lhs_expression/0.0/0/0.0 -> star · : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#329
lhs_expression/0.0/0/0.0 -> and · : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#330
function_header -> 'fn' ident paren_left · function_header/0.3 paren_right function_header/0.5 : {'{'}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.3 -> · param_list : {')'}
param -> · param/0.0 variable_ident_decl : {','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list -> · param_list/0.0 param param_list/0.2 : {')'}
param_list/0.0 -> · param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0 -> · param_list/0.0/0/0.0 param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0/0.0 -> · param comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#331
struct_body_decl -> brace_left struct_body_decl/0.1 · struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 variable_ident_decl : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#332
struct_body_decl/0.1 -> struct_body_decl/0.1/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#333
struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 · struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0 -> · struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0/0.0 -> · struct_member comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 variable_ident_decl : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#334
struct_body_decl/0.1/0/0.0 -> struct_member · comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#335
struct_member -> struct_member/0.0 · variable_ident_decl : {',' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
variable_ident_decl -> · ident colon type_decl : {',' '}'}

#336
struct_member/0.0 -> struct_member/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#337
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#338
type_alias_decl -> 'type' ident equal type_decl · : {';'}

#339
global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 · : {';'}

#340
global_constant_decl/1.3 -> equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#341
global_constant_decl -> 'const' global_constant_decl/0.1 equal expression · : {';'}

#342
variable_ident_decl -> ident colon type_decl · : {')' ',' ';' '=' '}'}

#343
global_variable_decl/0.2 -> equal expression · : {';'}

#344
variable_qualifier -> less_than address_space · variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {}
variable_qualifier/0.2 -> · comma access_mode : {'>'}

#345
variable_decl -> 'var' variable_decl/0.1 variable_decl/0.2 · : {';' '='}

#346
variable_decl/0.2 -> ident · : {';' '='}
variable_ident_decl -> ident · colon type_decl : {';' '='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#347
variable_decl/0.2 -> variable_ident_decl · : {';' '='}

#348
variable_qualifier -> less_than address_space variable_qualifier/0.2 · greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
greater_than -> · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#349
variable_qualifier/0.2 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#350
comma -> ',' · : {'!' '&' '(' ')' '*' '-' ':' '@' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#351
global_constant_decl/1.3 -> equal expression · : {';'}

#352
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#353
struct_member -> struct_member/0.0 variable_ident_decl · : {',' '}'}

#354
variable_ident_decl -> ident · colon type_decl : {')' ',' '}'}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#355
struct_body_decl/0.1/0/0.0 -> struct_member comma · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#356
struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#357
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member · struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
comma -> · ',' : {'}'}
struct_body_decl/0.3 -> · comma : {'}'}

#358
function_header -> 'fn' ident paren_left function_header/0.3 · paren_right function_header/0.5 : {'{'}
paren_right -> · ')' : {'->' '{'}

#359
function_header/0.3 -> param_list · : {')'}

#360
param_list -> param_list/0.0 · param param_list/0.2 : {')'}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> · param/0.0 variable_ident_decl : {')' ','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#361
param_list/0.0 -> param_list/0.0/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#362
param_list/0.0/0 -> param_list/0.0/0/0.0 · param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> · param/0.0 variable_ident_decl : {','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0 -> · param_list/0.0/0/0.0 param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0/0.0 -> · param comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#363
param_list/0.0/0/0.0 -> param · comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#364
param -> param/0.0 · variable_ident_decl : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
variable_ident_decl -> · ident colon type_decl : {')' ','}

#365
param/0.0 -> param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#366
param/0.0/0 -> attribute · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#367
lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 · : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#368
lhs_expression -> lhs_expression/0.0 core_lhs_expression · lhs_expression/0.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.2 -> · postfix_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
period -> · '.' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
postfix_expression -> · period ident postfix_expression/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#369
core_lhs_expression -> ident · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#370
core_lhs_expression -> paren_left · lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {')'}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#371
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {')' ';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ';'}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#372
increment_statement -> lhs_expression plus_plus · : {')' ';'}

#373
decrement_statement -> lhs_expression minus_minus · : {')' ';'}

#374
assignment_statement/0.1 -> equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#375
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#376
plus_plus -> '++' · : {')' ';'}

#377
minus_minus -> '--' · : {')' ';'}

#378
compound_assignment_operator -> plus_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#379
compound_assignment_operator -> minus_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#380
compound_assignment_operator -> times_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#381
compound_assignment_operator -> division_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#382
compound_assignment_operator -> modulo_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#383
compound_assignment_operator -> and_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#384
compound_assignment_operator -> or_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#385
compound_assignment_operator -> xor_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#386
compound_assignment_operator -> shift_right_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#387
compound_assignment_operator -> shift_left_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#388
plus_equal -> '+=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#389
minus_equal -> '-=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#390
times_equal -> '*=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#391
division_equal -> '/=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#392
modulo_equal -> '%=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#393
and_equal -> '&=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#394
or_equal -> '|=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#395
xor_equal -> '^=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#396
shift_right_equal -> '>>=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#397
shift_left_equal -> '<<=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#398
variable_statement -> 'const' variable_statement/3.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#399
variable_ident_decl -> ident · colon type_decl : {'='}
variable_statement/3.1 -> ident · : {'='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#400
variable_statement/3.1 -> variable_ident_decl · : {'='}

#401
variable_statement -> 'let' variable_statement/2.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#402
variable_ident_decl -> ident · colon type_decl : {'='}
variable_statement/2.1 -> ident · : {'='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#403
variable_statement/2.1 -> variable_ident_decl · : {'='}

#404
func_call_statement -> ident argument_expression_list · : {')' ';'}

#405
while_statement -> 'while' expression · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#406
for_statement -> 'for' paren_left · for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_header -> · for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
for_header/0.0 -> · for_init : {';'}
for_init -> · assignment_statement : {';'}
for_init -> · decrement_statement : {';'}
for_init -> · func_call_statement : {';'}
for_init -> · increment_statement : {';'}
for_init -> · variable_statement : {';'}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}

#407
loop_statement -> 'loop' brace_left · loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'continuing' '}'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#408
switch_statement -> 'switch' expression · brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'case' 'default' '}'}

#409
if_statement -> 'if' expression · compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#410
return_statement -> 'return' return_statement/0.1 · : {';'}

#411
return_statement/0.1 -> expression · : {';'}

#412
statement -> static_assert_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#413
statement -> decrement_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#414
statement -> increment_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#415
statement -> assignment_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#416
statement -> 'discard' semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#417
statement -> continue_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#418
statement -> break_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#419
statement -> variable_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#420
statement -> func_call_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#421
statement -> return_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#422
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {'}'}

#423
compound_statement -> brace_left compound_statement/0.1 brace_right · : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'staticAssert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#424
brace_right -> '}' · : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'staticAssert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#425
texture_sampler_types -> storage_texture_type less_than texel_format comma · access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#426
texture_sampler_types -> multisampled_texture_type less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#427
texture_sampler_types -> sampled_texture_type less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#428
array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#429
array_type_decl/0.3 -> comma · element_count_expression : {'>'}
additive_expression -> · additive_expression minus multiplicative_expression : {'+' '-' '>'}
additive_expression -> · additive_expression plus multiplicative_expression : {'+' '-' '>'}
additive_expression -> · multiplicative_expression : {'+' '-' '>'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'>'}
bitwise_expression -> · binary_or_expression or unary_expression : {'>'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'>'}
bool_literal -> · 'false' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
bool_literal -> · 'true' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
const_literal -> · float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
const_literal -> · int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /0[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
element_count_expression -> · additive_expression : {'>'}
element_count_expression -> · bitwise_expression : {'>'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
float_literal -> · hex_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&' '(' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · callable argument_expression_list : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · const_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · ident : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · bang unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · minus unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · singular_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · star unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · tilde unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#430
type_decl_without_ident -> pointer less_than address_space comma · type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {',' '>'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_sampler_types -> · sampler_type : {',' '>'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_decl -> · ident : {',' '>'}
type_decl -> · type_decl_without_ident : {',' '>'}
type_decl_without_ident -> · 'bool' : {',' '>'}
type_decl_without_ident -> · array_type_decl : {',' '>'}
type_decl_without_ident -> · float16 : {',' '>'}
type_decl_without_ident -> · float32 : {',' '>'}
type_decl_without_ident -> · int32 : {',' '>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '>'}
type_decl_without_ident -> · texture_sampler_types : {',' '>'}
type_decl_without_ident -> · uint32 : {',' '>'}
uint32 -> · 'u32' : {',' '>'}

#431
primary_expression -> 'bitcast' less_than type_decl greater_than · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#432
argument_expression_list/0.1/0.0/0/0.0 -> expression comma · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#433
argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#434
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression · argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.2 -> · comma : {')'}
comma -> · ',' : {')'}

#435
argument_expression_list -> paren_left argument_expression_list/0.1 paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#436
postfix_expression -> bracket_left expression bracket_right · postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
period -> · '.' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/0.3 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#437
bracket_right -> ']' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#438
postfix_expression -> period ident postfix_expression/1.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#439
postfix_expression/1.2 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#440
attribute/0.3/0/0.0 -> literal_or_ident comma · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#441
attribute/0.3/0 -> attribute/0.3/0/0.0 attribute/0.3/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#442
attribute -> attr ident paren_left attribute/0.3 literal_or_ident · attribute/0.5 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute/0.5 -> · comma : {')'}
comma -> · ',' : {')'}

#443
attribute -> attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 · paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#444
attribute/0.5 -> comma · : {')'}

#445
postfix_expression -> bracket_left expression bracket_right postfix_expression/0.3 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#446
postfix_expression/0.3 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#447
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 · : {')'}

#448
argument_expression_list/0.1/0.2 -> comma · : {')'}

#449
primary_expression -> 'bitcast' less_than type_decl greater_than paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#450
type_decl_without_ident -> pointer less_than address_space comma type_decl · type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}
type_decl_without_ident/7.5 -> · comma access_mode : {'>'}

#451
array_type_decl/0.3 -> comma element_count_expression · : {'>'}

#452
additive_expression -> additive_expression · minus multiplicative_expression : {'+' '-' '>'}
additive_expression -> additive_expression · plus multiplicative_expression : {'+' '-' '>'}
element_count_expression -> additive_expression · : {'>'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#453
element_count_expression -> bitwise_expression · : {'>'}

#454
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'%' '*' '+' '-' '/' '>'}

#455
array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#456
texture_sampler_types -> storage_texture_type less_than texel_format comma access_mode · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#457
access_mode -> 'read' · : {'>'}

#458
access_mode -> 'write' · : {'>'}

#459
access_mode -> 'read_write' · : {'>'}

#460
if_statement -> 'if' expression compound_statement · if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.3 -> · 'else' else_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#461
switch_statement -> 'switch' expression brace_left · switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body -> · 'case' case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
switch_body -> · 'default' switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
switch_statement/0.3 -> · switch_statement/0.3/0 : {'}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#462
loop_statement -> 'loop' brace_left loop_statement/0.2 · loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.3 -> · continuing_statement : {'}'}

#463
loop_statement/0.2 -> loop_statement/0.2/0 · : {'continuing' '}'}

#464
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {'continuing' '}'}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#465
for_statement -> 'for' paren_left for_header · paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'{'}

#466
for_header -> for_header/0.0 · semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'!' '&' '(' '*' '-' ';' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#467
for_header/0.0 -> for_init · : {';'}

#468
for_init -> variable_statement · : {';'}

#469
for_init -> increment_statement · : {';'}

#470
for_init -> decrement_statement · : {';'}

#471
for_init -> assignment_statement · : {';'}

#472
for_init -> func_call_statement · : {';'}

#473
while_statement -> 'while' expression compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#474
variable_statement -> 'let' variable_statement/2.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#475
variable_statement -> 'const' variable_statement/3.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#476
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {')' ';'}

#477
core_lhs_expression -> paren_left lhs_expression · paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_right -> · ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#478
lhs_expression -> lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#479
lhs_expression/0.2 -> postfix_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#480
param/0.0/0 -> attribute param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#481
param -> param/0.0 variable_ident_decl · : {')' ','}

#482
param_list/0.0/0/0.0 -> param comma · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#483
param_list/0.0/0 -> param_list/0.0/0/0.0 param_list/0.0/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#484
param_list -> param_list/0.0 param · param_list/0.2 : {')'}
comma -> · ',' : {')'}
param_list/0.2 -> · comma : {')'}

#485
function_header -> 'fn' ident paren_left function_header/0.3 paren_right · function_header/0.5 : {'{'}
arrow -> · '->' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5 -> · arrow function_header/0.5/0.1 type_decl : {'{'}

#486
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 · brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
brace_right -> · '}' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#487
struct_body_decl/0.3 -> comma · : {'}'}

#488
variable_qualifier/0.2 -> comma access_mode · : {'>'}

#489
variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#490
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#491
function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 · : {'{'}

#492
function_header/0.5 -> arrow · function_header/0.5/0.1 type_decl : {'{'}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#493
arrow -> '->' · : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#494
param_list -> param_list/0.0 param param_list/0.2 · : {')'}

#495
param_list/0.2 -> comma · : {')'}

#496
core_lhs_expression -> paren_left lhs_expression paren_right · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#497
variable_statement -> 'const' variable_statement/3.1 equal expression · : {';'}

#498
variable_statement -> 'let' variable_statement/2.1 equal expression · : {';'}

#499
for_header -> for_header/0.0 semicolon · for_header/0.2 semicolon for_header/0.4 : {')'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
for_header/0.2 -> · expression : {';'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#500
for_statement -> 'for' paren_left for_header paren_right · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#501
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {'continuing' '}'}

#502
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 · brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#503
loop_statement/0.3 -> continuing_statement · : {'}'}

#504
continuing_statement -> 'continuing' · continuing_compound_statement : {'}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_compound_statement -> · brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}

#505
switch_statement -> 'switch' expression brace_left switch_statement/0.3 · brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#506
switch_statement/0.3 -> switch_statement/0.3/0 · : {'}'}

#507
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {'}'}
switch_body -> · 'case' case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
switch_body -> · 'default' switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#508
switch_body -> 'case' · case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selectors -> · expression case_selectors/0.1 case_selectors/0.2 : {':' '{'}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#509
switch_body -> 'default' · switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
switch_body/1.1 -> · colon : {'{'}

#510
if_statement -> 'if' expression compound_statement if_statement/0.3 · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#511
if_statement/0.3 -> 'else' · else_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#512
texture_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#513
type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#514
type_decl_without_ident/7.5 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#515
attribute -> attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#516
type_decl_without_ident/7.5 -> comma access_mode · : {'>'}

#517
type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#518
if_statement/0.3 -> 'else' else_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#519
else_statement -> compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#520
else_statement -> if_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#521
switch_body -> 'default' switch_body/1.1 · case_compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_compound_statement -> · brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}

#522
switch_body/1.1 -> colon · : {'{'}

#523
switch_body -> 'case' case_selectors · switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
switch_body/0.2 -> · colon : {'{'}

#524
case_selectors -> expression · case_selectors/0.1 case_selectors/0.2 : {':' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma expression : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#525
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {'}'}

#526
switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#527
continuing_statement -> 'continuing' continuing_compound_statement · : {'}'}

#528
continuing_compound_statement -> brace_left · continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break' '}'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#529
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#530
for_statement -> 'for' paren_left for_header paren_right compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#531
for_header -> for_header/0.0 semicolon for_header/0.2 · semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'&' '(' ')' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#532
for_header/0.2 -> expression · : {';'}

#533
function_header/0.5 -> arrow function_header/0.5/0.1 · type_decl : {'{'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'{'}
depth_texture_type -> · 'texture_depth_2d' : {'{'}
depth_texture_type -> · 'texture_depth_2d_array' : {'{'}
depth_texture_type -> · 'texture_depth_cube' : {'{'}
depth_texture_type -> · 'texture_depth_cube_array' : {'{'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'{'}
float16 -> · 'f16' : {'{'}
float32 -> · 'f32' : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}
int32 -> · 'i32' : {'{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'{'}
sampler_type -> · 'sampler_comparison' : {'{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'{'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'{'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'{'}
texture_sampler_types -> · sampler_type : {'{'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'{'}
type_decl -> · ident : {'{'}
type_decl -> · type_decl_without_ident : {'{'}
type_decl_without_ident -> · 'bool' : {'{'}
type_decl_without_ident -> · array_type_decl : {'{'}
type_decl_without_ident -> · float16 : {'{'}
type_decl_without_ident -> · float32 : {'{'}
type_decl_without_ident -> · int32 : {'{'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'{'}
type_decl_without_ident -> · texture_sampler_types : {'{'}
type_decl_without_ident -> · uint32 : {'{'}
uint32 -> · 'u32' : {'{'}

#534
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#535
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#536
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#537
function_header/0.5 -> arrow function_header/0.5/0.1 type_decl · : {'{'}

#538
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon · for_header/0.4 : {')'}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {')'}
decrement_statement -> · lhs_expression minus_minus : {')'}
for_header/0.4 -> · for_update : {')'}
for_update -> · assignment_statement : {')'}
for_update -> · decrement_statement : {')'}
for_update -> · func_call_statement : {')'}
for_update -> · increment_statement : {')'}
func_call_statement -> · ident argument_expression_list : {')'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
increment_statement -> · lhs_expression plus_plus : {')'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#539
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 · continuing_compound_statement/0.2 brace_right : {'}'}
break_if_statement -> · 'break' 'if' expression semicolon : {'}'}
continuing_compound_statement/0.2 -> · break_if_statement : {'}'}

#540
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break' '}'}

#541
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break' '}'}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#542
case_selectors -> expression case_selectors/0.1 · case_selectors/0.2 : {':' '{'}
case_selectors/0.2 -> · comma : {':' '{'}
comma -> · ',' : {':' '{'}

#543
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '{'}

#544
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma expression : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#545
case_selectors/0.1/0/0.0 -> comma · expression : {',' ':' '{'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#546
switch_body -> 'case' case_selectors switch_body/0.2 · case_compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_compound_statement -> · brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}

#547
switch_body/0.2 -> colon · : {'{'}

#548
switch_body -> 'default' switch_body/1.1 case_compound_statement · : {'case' 'default' '}'}

#549
case_compound_statement -> brace_left · case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
case_compound_statement/0.1 -> · case_compound_statement/0.1/0 : {'fallthrough' '}'}
case_compound_statement/0.1/0 -> · statement case_compound_statement/0.1/0 : {'fallthrough' '}'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#550
case_compound_statement -> brace_left case_compound_statement/0.1 · case_compound_statement/0.2 brace_right : {'case' 'default' '}'}
case_compound_statement/0.2 -> · fallthrough_statement : {'}'}
fallthrough_statement -> · 'fallthrough' semicolon : {'}'}

#551
case_compound_statement/0.1 -> case_compound_statement/0.1/0 · : {'fallthrough' '}'}

#552
case_compound_statement/0.1/0 -> statement · case_compound_statement/0.1/0 : {'fallthrough' '}'}
and -> · '&' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
case_compound_statement/0.1/0 -> · statement case_compound_statement/0.1/0 : {'fallthrough' '}'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'(' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#553
switch_body -> 'case' case_selectors switch_body/0.2 case_compound_statement · : {'case' 'default' '}'}

#554
case_selectors/0.1/0/0.0 -> comma expression · : {',' ':' '{'}

#555
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '{'}

#556
case_selectors -> expression case_selectors/0.1 case_selectors/0.2 · : {':' '{'}

#557
case_selectors/0.2 -> comma · : {':' '{'}

#558
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break' '}'}

#559
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 · brace_right : {'}'}
brace_right -> · '}' : {'}'}

#560
continuing_compound_statement/0.2 -> break_if_statement · : {'}'}

#561
break_if_statement -> 'break' · 'if' expression semicolon : {'}'}

#562
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 · : {')'}

#563
for_header/0.4 -> for_update · : {')'}

#564
for_update -> increment_statement · : {')'}

#565
for_update -> decrement_statement · : {')'}

#566
for_update -> assignment_statement · : {')'}

#567
for_update -> func_call_statement · : {')'}

#568
break_if_statement -> 'break' 'if' · expression semicolon : {'}'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#569
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right · : {'}'}

#570
case_compound_statement/0.1/0 -> statement case_compound_statement/0.1/0 · : {'fallthrough' '}'}

#571
case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 · brace_right : {'case' 'default' '}'}
brace_right -> · '}' : {'case' 'default' '}'}

#572
case_compound_statement/0.2 -> fallthrough_statement · : {'}'}

#573
fallthrough_statement -> 'fallthrough' · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#574
fallthrough_statement -> 'fallthrough' semicolon · : {'}'}

#575
case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right · : {'case' 'default' '}'}

#576
break_if_statement -> 'break' 'if' expression · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#577
break_if_statement -> 'break' 'if' expression semicolon · : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#2 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#3 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#4 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#5 global_decl -> semicolon ·
r#6 global_decl -> struct_decl ·
r#7 global_decl -> function_decl ·
r#8 semicolon -> ';' ·
r#9 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#10 global_constant_decl/1.0 -> global_constant_decl/1.0/0 ·
r#11 function_decl/0.0 -> function_decl/0.0/0 ·
r#12 attr -> '@' ·
r#13 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#14 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 ·
r#15 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#16 static_assert_statement -> 'staticAssert' expression ·
r#17 expression -> relational_expression ·
r#18 short_circuit_or_expression -> relational_expression ·
r#19 short_circuit_and_expression -> relational_expression ·
r#20 expression -> bitwise_expression ·
r#21 relational_expression -> shift_expression ·
r#22 shift_expression -> additive_expression ·
r#23 binary_and_expression -> unary_expression ·
r#24 binary_or_expression -> unary_expression ·
r#25 binary_xor_expression -> unary_expression ·
r#26 multiplicative_expression -> unary_expression ·
r#27 additive_expression -> multiplicative_expression ·
r#28 unary_expression -> singular_expression ·
r#29 minus -> '-' ·
r#30 bang -> '!' ·
r#31 tilde -> '~' ·
r#32 star -> '*' ·
r#33 and -> '&' ·
r#34 primary_expression -> ident ·
r#35 callable -> ident ·
r#36 primary_expression -> const_literal ·
r#37 primary_expression -> paren_expression ·
r#38 callable -> type_decl_without_ident ·
r#39 callable -> vec_prefix ·
r#40 callable -> mat_prefix ·
r#41 const_literal -> int_literal ·
r#42 const_literal -> float_literal ·
r#43 const_literal -> bool_literal ·
r#44 type_decl_without_ident -> 'bool' ·
r#45 type_decl_without_ident -> float32 ·
r#46 type_decl_without_ident -> float16 ·
r#47 type_decl_without_ident -> int32 ·
r#48 type_decl_without_ident -> uint32 ·
r#49 type_decl_without_ident -> array_type_decl ·
r#50 type_decl_without_ident -> texture_sampler_types ·
r#51 vec_prefix -> 'vec2' ·
r#52 vec_prefix -> 'vec3' ·
r#53 vec_prefix -> 'vec4' ·
r#54 mat_prefix -> 'mat2x2' ·
r#55 mat_prefix -> 'mat2x3' ·
r#56 mat_prefix -> 'mat2x4' ·
r#57 mat_prefix -> 'mat3x2' ·
r#58 mat_prefix -> 'mat3x3' ·
r#59 mat_prefix -> 'mat3x4' ·
r#60 mat_prefix -> 'mat4x2' ·
r#61 mat_prefix -> 'mat4x3' ·
r#62 mat_prefix -> 'mat4x4' ·
r#63 int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#64 int_literal -> /0[iu]?/ ·
r#65 int_literal -> /[1-9][0-9]*[iu]?/ ·
r#66 float_literal -> decimal_float_literal ·
r#67 float_literal -> hex_float_literal ·
r#68 bool_literal -> 'true' ·
r#69 bool_literal -> 'false' ·
r#70 paren_left -> '(' ·
r#71 float32 -> 'f32' ·
r#72 float16 -> 'f16' ·
r#73 int32 -> 'i32' ·
r#74 uint32 -> 'u32' ·
r#75 pointer -> 'ptr' ·
r#76 texture_sampler_types -> sampler_type ·
r#77 texture_sampler_types -> depth_texture_type ·
r#78 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#79 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#80 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#81 decimal_float_literal -> /0[fh]/ ·
r#82 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#83 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#84 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#85 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#86 sampler_type -> 'sampler' ·
r#87 sampler_type -> 'sampler_comparison' ·
r#88 depth_texture_type -> 'texture_depth_2d' ·
r#89 depth_texture_type -> 'texture_depth_2d_array' ·
r#90 depth_texture_type -> 'texture_depth_cube' ·
r#91 depth_texture_type -> 'texture_depth_cube_array' ·
r#92 depth_texture_type -> 'texture_depth_multisampled_2d' ·
r#93 sampled_texture_type -> 'texture_1d' ·
r#94 sampled_texture_type -> 'texture_2d' ·
r#95 sampled_texture_type -> 'texture_2d_array' ·
r#96 sampled_texture_type -> 'texture_3d' ·
r#97 sampled_texture_type -> 'texture_cube' ·
r#98 sampled_texture_type -> 'texture_cube_array' ·
r#99 multisampled_texture_type -> 'texture_multisampled_2d' ·
r#100 storage_texture_type -> 'texture_storage_1d' ·
r#101 storage_texture_type -> 'texture_storage_2d' ·
r#102 storage_texture_type -> 'texture_storage_2d_array' ·
r#103 storage_texture_type -> 'texture_storage_3d' ·
r#104 global_constant_decl/0.1 -> ident ·
r#105 global_constant_decl/0.1 -> variable_ident_decl ·
r#106 global_decl -> static_assert_statement semicolon ·
r#107 global_decl -> type_alias_decl semicolon ·
r#108 global_decl -> global_constant_decl semicolon ·
r#109 global_decl -> global_variable_decl semicolon ·
r#110 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#111 global_directive -> 'enable' ident semicolon ·
r#112 variable_decl/0.1 -> variable_qualifier ·
r#113 less_than -> '<' ·
r#114 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ·
r#115 equal -> '=' ·
r#116 colon -> ':' ·
r#117 global_constant_decl/1.2 -> ident ·
r#118 global_constant_decl/1.2 -> variable_ident_decl ·
r#119 struct_decl -> 'struct' ident struct_body_decl ·
r#120 brace_left -> '{' ·
r#121 function_decl -> function_decl/0.0 function_header compound_statement ·
r#122 primary_expression -> callable argument_expression_list ·
r#123 singular_expression -> primary_expression singular_expression/0.1 ·
r#124 singular_expression/0.1 -> postfix_expression ·
r#125 bracket_left -> '[' ·
r#126 period -> '.' ·
r#127 unary_expression -> and unary_expression ·
r#128 unary_expression -> star unary_expression ·
r#129 unary_expression -> tilde unary_expression ·
r#130 unary_expression -> bang unary_expression ·
r#131 unary_expression -> minus unary_expression ·
r#132 forward_slash -> '/' ·
r#133 modulo -> '%' ·
r#134 shift_left -> '<<' ·
r#135 shift_right -> '>>' ·
r#136 plus -> '+' ·
r#137 xor -> '^' ·
r#138 or -> '|' ·
r#139 greater_than -> '>' ·
r#140 less_than_equal -> '<=' ·
r#141 greater_than_equal -> '>=' ·
r#142 equal_equal -> '==' ·
r#143 not_equal -> '!=' ·
r#144 and_and -> '&&' ·
r#145 or_or -> '||' ·
r#146 attribute/0.3 -> attribute/0.3/0 ·
r#147 literal_or_ident -> float_literal ·
r#148 literal_or_ident -> int_literal ·
r#149 literal_or_ident -> ident ·
r#150 expression -> short_circuit_or_expression or_or relational_expression ·
r#151 short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression ·
r#152 expression -> short_circuit_and_expression and_and relational_expression ·
r#153 short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression ·
r#154 relational_expression -> shift_expression not_equal shift_expression ·
r#155 relational_expression -> shift_expression equal_equal shift_expression ·
r#156 relational_expression -> shift_expression greater_than_equal shift_expression ·
r#157 relational_expression -> shift_expression less_than_equal shift_expression ·
r#158 relational_expression -> shift_expression greater_than shift_expression ·
r#159 relational_expression -> shift_expression less_than shift_expression ·
r#160 bitwise_expression -> binary_and_expression and unary_expression ·
r#161 binary_and_expression -> binary_and_expression and unary_expression ·
r#162 bitwise_expression -> binary_or_expression or unary_expression ·
r#163 binary_or_expression -> binary_or_expression or unary_expression ·
r#164 bitwise_expression -> binary_xor_expression xor unary_expression ·
r#165 binary_xor_expression -> binary_xor_expression xor unary_expression ·
r#166 additive_expression -> additive_expression minus multiplicative_expression ·
r#167 additive_expression -> additive_expression plus multiplicative_expression ·
r#168 shift_expression -> unary_expression shift_right unary_expression ·
r#169 shift_expression -> unary_expression shift_left unary_expression ·
r#170 multiplicative_expression -> multiplicative_expression modulo unary_expression ·
r#171 multiplicative_expression -> multiplicative_expression forward_slash unary_expression ·
r#172 multiplicative_expression -> multiplicative_expression star unary_expression ·
r#173 argument_expression_list/0.1/0.0 -> argument_expression_list/0.1/0.0/0 ·
r#174 type_decl -> ident ·
r#175 type_decl -> type_decl_without_ident ·
r#176 paren_expression -> paren_left expression paren_right ·
r#177 paren_right -> ')' ·
r#178 address_space -> 'function' ·
r#179 address_space -> 'private' ·
r#180 address_space -> 'workgroup' ·
r#181 address_space -> 'uniform' ·
r#182 address_space -> 'storage' ·
r#183 texel_format -> 'rgba8unorm' ·
r#184 texel_format -> 'rgba8snorm' ·
r#185 texel_format -> 'rgba8uint' ·
r#186 texel_format -> 'rgba8sint' ·
r#187 texel_format -> 'rgba16uint' ·
r#188 texel_format -> 'rgba16sint' ·
r#189 texel_format -> 'rgba16float' ·
r#190 texel_format -> 'r32uint' ·
r#191 texel_format -> 'r32sint' ·
r#192 texel_format -> 'r32float' ·
r#193 texel_format -> 'rg32uint' ·
r#194 texel_format -> 'rg32sint' ·
r#195 texel_format -> 'rg32float' ·
r#196 texel_format -> 'rgba32uint' ·
r#197 texel_format -> 'rgba32sint' ·
r#198 texel_format -> 'rgba32float' ·
r#199 compound_statement/0.1 -> compound_statement/0.1/0 ·
r#200 statement -> semicolon ·
r#201 statement -> if_statement ·
r#202 statement -> switch_statement ·
r#203 statement -> loop_statement ·
r#204 statement -> for_statement ·
r#205 statement -> while_statement ·
r#206 statement -> compound_statement ·
r#207 variable_statement -> variable_decl ·
r#208 break_statement -> 'break' ·
r#209 continue_statement -> 'continue' ·
r#210 lhs_expression/0.0 -> lhs_expression/0.0/0 ·
r#211 lhs_expression/0.0/0/0.0 -> star ·
r#212 lhs_expression/0.0/0/0.0 -> and ·
r#213 struct_body_decl/0.1 -> struct_body_decl/0.1/0 ·
r#214 struct_member/0.0 -> struct_member/0.0/0 ·
r#215 type_alias_decl -> 'type' ident equal type_decl ·
r#216 global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 ·
r#217 global_constant_decl -> 'const' global_constant_decl/0.1 equal expression ·
r#218 variable_ident_decl -> ident colon type_decl ·
r#219 global_variable_decl/0.2 -> equal expression ·
r#220 variable_decl -> 'var' variable_decl/0.1 variable_decl/0.2 ·
r#221 variable_decl/0.2 -> ident ·
r#222 variable_decl/0.2 -> variable_ident_decl ·
r#223 comma -> ',' ·
r#224 global_constant_decl/1.3 -> equal expression ·
r#225 struct_member/0.0/0 -> attribute struct_member/0.0/0 ·
r#226 struct_member -> struct_member/0.0 variable_ident_decl ·
r#227 struct_body_decl/0.1/0/0.0 -> struct_member comma ·
r#228 struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 ·
r#229 function_header/0.3 -> param_list ·
r#230 param_list/0.0 -> param_list/0.0/0 ·
r#231 param/0.0 -> param/0.0/0 ·
r#232 lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 ·
r#233 core_lhs_expression -> ident ·
r#234 increment_statement -> lhs_expression plus_plus ·
r#235 decrement_statement -> lhs_expression minus_minus ·
r#236 assignment_statement/0.1 -> equal ·
r#237 assignment_statement/0.1 -> compound_assignment_operator ·
r#238 plus_plus -> '++' ·
r#239 minus_minus -> '--' ·
r#240 compound_assignment_operator -> plus_equal ·
r#241 compound_assignment_operator -> minus_equal ·
r#242 compound_assignment_operator -> times_equal ·
r#243 compound_assignment_operator -> division_equal ·
r#244 compound_assignment_operator -> modulo_equal ·
r#245 compound_assignment_operator -> and_equal ·
r#246 compound_assignment_operator -> or_equal ·
r#247 compound_assignment_operator -> xor_equal ·
r#248 compound_assignment_operator -> shift_right_equal ·
r#249 compound_assignment_operator -> shift_left_equal ·
r#250 plus_equal -> '+=' ·
r#251 minus_equal -> '-=' ·
r#252 times_equal -> '*=' ·
r#253 division_equal -> '/=' ·
r#254 modulo_equal -> '%=' ·
r#255 and_equal -> '&=' ·
r#256 or_equal -> '|=' ·
r#257 xor_equal -> '^=' ·
r#258 shift_right_equal -> '>>=' ·
r#259 shift_left_equal -> '<<=' ·
r#260 variable_statement/3.1 -> ident ·
r#261 variable_statement/3.1 -> variable_ident_decl ·
r#262 variable_statement/2.1 -> ident ·
r#263 variable_statement/2.1 -> variable_ident_decl ·
r#264 func_call_statement -> ident argument_expression_list ·
r#265 return_statement -> 'return' return_statement/0.1 ·
r#266 return_statement/0.1 -> expression ·
r#267 statement -> static_assert_statement semicolon ·
r#268 statement -> decrement_statement semicolon ·
r#269 statement -> increment_statement semicolon ·
r#270 statement -> assignment_statement semicolon ·
r#271 statement -> 'discard' semicolon ·
r#272 statement -> continue_statement semicolon ·
r#273 statement -> break_statement semicolon ·
r#274 statement -> variable_statement semicolon ·
r#275 statement -> func_call_statement semicolon ·
r#276 statement -> return_statement semicolon ·
r#277 compound_statement/0.1/0 -> statement compound_statement/0.1/0 ·
r#278 compound_statement -> brace_left compound_statement/0.1 brace_right ·
r#279 brace_right -> '}' ·
r#280 texture_sampler_types -> multisampled_texture_type less_than type_decl greater_than ·
r#281 texture_sampler_types -> sampled_texture_type less_than type_decl greater_than ·
r#282 argument_expression_list/0.1/0.0/0/0.0 -> expression comma ·
r#283 argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 ·
r#284 argument_expression_list -> paren_left argument_expression_list/0.1 paren_right ·
r#285 bracket_right -> ']' ·
r#286 postfix_expression -> period ident postfix_expression/1.2 ·
r#287 postfix_expression/1.2 -> postfix_expression ·
r#288 attribute/0.3/0/0.0 -> literal_or_ident comma ·
r#289 attribute/0.3/0 -> attribute/0.3/0/0.0 attribute/0.3/0 ·
r#290 attribute/0.5 -> comma ·
r#291 postfix_expression -> bracket_left expression bracket_right postfix_expression/0.3 ·
r#292 postfix_expression/0.3 -> postfix_expression ·
r#293 argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 ·
r#294 argument_expression_list/0.1/0.2 -> comma ·
r#295 primary_expression -> 'bitcast' less_than type_decl greater_than paren_expression ·
r#296 array_type_decl/0.3 -> comma element_count_expression ·
r#297 element_count_expression -> additive_expression ·
r#298 element_count_expression -> bitwise_expression ·
r#299 array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 greater_than ·
r#300 access_mode -> 'read' ·
r#301 access_mode -> 'write' ·
r#302 access_mode -> 'read_write' ·
r#303 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#304 for_header/0.0 -> for_init ·
r#305 for_init -> variable_statement ·
r#306 for_init -> increment_statement ·
r#307 for_init -> decrement_statement ·
r#308 for_init -> assignment_statement ·
r#309 for_init -> func_call_statement ·
r#310 while_statement -> 'while' expression compound_statement ·
r#311 assignment_statement -> lhs_expression assignment_statement/0.1 expression ·
r#312 lhs_expression -> lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 ·
r#313 lhs_expression/0.2 -> postfix_expression ·
r#314 param/0.0/0 -> attribute param/0.0/0 ·
r#315 param -> param/0.0 variable_ident_decl ·
r#316 param_list/0.0/0/0.0 -> param comma ·
r#317 param_list/0.0/0 -> param_list/0.0/0/0.0 param_list/0.0/0 ·
r#318 struct_body_decl/0.3 -> comma ·
r#319 variable_qualifier/0.2 -> comma access_mode ·
r#320 variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than ·
r#321 struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right ·
r#322 function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 ·
r#323 arrow -> '->' ·
r#324 param_list -> param_list/0.0 param param_list/0.2 ·
r#325 param_list/0.2 -> comma ·
r#326 core_lhs_expression -> paren_left lhs_expression paren_right ·
r#327 variable_statement -> 'const' variable_statement/3.1 equal expression ·
r#328 variable_statement -> 'let' variable_statement/2.1 equal expression ·
r#329 loop_statement/0.2/0 -> statement loop_statement/0.2/0 ·
r#330 loop_statement/0.3 -> continuing_statement ·
r#331 switch_statement/0.3 -> switch_statement/0.3/0 ·
r#332 if_statement -> 'if' expression compound_statement if_statement/0.3 ·
r#333 texture_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than ·
r#334 attribute -> attr ident paren_left attribute/0.3 literal_or_ident attribute/0.5 paren_right ·
r#335 type_decl_without_ident/7.5 -> comma access_mode ·
r#336 type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than ·
r#337 if_statement/0.3 -> 'else' else_statement ·
r#338 else_statement -> compound_statement ·
r#339 else_statement -> if_statement ·
r#340 switch_body/1.1 -> colon ·
r#341 switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 ·
r#342 switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right ·
r#343 continuing_statement -> 'continuing' continuing_compound_statement ·
r#344 loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right ·
r#345 for_statement -> 'for' paren_left for_header paren_right compound_statement ·
r#346 for_header/0.2 -> expression ·
r#347 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#348 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#349 function_header/0.5 -> arrow function_header/0.5/0.1 type_decl ·
r#350 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#351 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#352 switch_body/0.2 -> colon ·
r#353 switch_body -> 'default' switch_body/1.1 case_compound_statement ·
r#354 case_compound_statement/0.1 -> case_compound_statement/0.1/0 ·
r#355 switch_body -> 'case' case_selectors switch_body/0.2 case_compound_statement ·
r#356 case_selectors/0.1/0/0.0 -> comma expression ·
r#357 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#358 case_selectors -> expression case_selectors/0.1 case_selectors/0.2 ·
r#359 case_selectors/0.2 -> comma ·
r#360 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·
r#361 continuing_compound_statement/0.2 -> break_if_statement ·
r#362 for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 ·
r#363 for_header/0.4 -> for_update ·
r#364 for_update -> increment_statement ·
r#365 for_update -> decrement_statement ·
r#366 for_update -> assignment_statement ·
r#367 for_update -> func_call_statement ·
r#368 continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right ·
r#369 case_compound_statement/0.1/0 -> statement case_compound_statement/0.1/0 ·
r#370 case_compound_statement/0.2 -> fallthrough_statement ·
r#371 fallthrough_statement -> 'fallthrough' semicolon ·
r#372 case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right ·
r#373 break_if_statement -> 'break' 'if' expression semicolon ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#19
[#2 '@']: s#32
[#2 'const']: s#21
[#2 'staticAssert']: s#26
[#2 'struct']: s#24
[#2 'type']: s#23
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'const']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'staticAssert']: r#0
[#3 'struct']: r#0
[#3 'type']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#6 ';']: s#19
[#7 '!=']: r#1
[#7 '%']: r#1
[#7 '%=']: r#1
[#7 '&&']: r#1
[#7 '&']: r#1
[#7 '&=']: r#1
[#7 '(']: r#1
[#7 ')']: r#1
[#7 '*']: r#1
[#7 '*=']: r#1
[#7 '+']: r#1
[#7 '++']: r#1
[#7 '+=']: r#1
[#7 ',']: r#1
[#7 '-']: r#1
[#7 '--']: r#1
[#7 '-=']: r#1
[#7 '.']: r#1
[#7 '/']: r#1
[#7 '/=']: r#1
[#7 ':']: r#1
[#7 ';']: r#1
[#7 '<']: r#1
[#7 '<<']: r#1
[#7 '<<=']: r#1
[#7 '<=']: r#1
[#7 '=']: r#1
[#7 '==']: r#1
[#7 '>']: r#1
[#7 '>=']: r#1
[#7 '>>']: r#1
[#7 '>>=']: r#1
[#7 '[']: r#1
[#7 ']']: r#1
[#7 '^']: r#1
[#7 '^=']: r#1
[#7 '{']: r#1
[#7 '|']: r#1
[#7 '|=']: r#1
[#7 '||']: r#1
[#7 '}']: r#1
[#8 ';']: r#2
[#8 '@']: r#2
[#8 'const']: r#2
[#8 'fn']: r#2
[#8 'override']: r#2
[#8 'staticAssert']: r#2
[#8 'struct']: r#2
[#8 'type']: r#2
[#8 'var']: r#2
[#8 EndOfText]: r#2
[#9 EndOfText]: r#3
[#10 EndOfText]: r#4
[#11 ';']: s#19
[#11 '@']: s#32
[#11 'const']: s#21
[#11 'staticAssert']: s#26
[#11 'struct']: s#24
[#11 'type']: s#23
[#12 ';']: r#5
[#12 '@']: r#5
[#12 'const']: r#5
[#12 'fn']: r#5
[#12 'override']: r#5
[#12 'staticAssert']: r#5
[#12 'struct']: r#5
[#12 'type']: r#5
[#12 'var']: r#5
[#12 EndOfText]: r#5
[#13 ';']: s#19
[#14 ';']: s#19
[#15 ';']: s#19
[#16 ';']: r#6
[#16 '@']: r#6
[#16 'const']: r#6
[#16 'fn']: r#6
[#16 'override']: r#6
[#16 'staticAssert']: r#6
[#16 'struct']: r#6
[#16 'type']: r#6
[#16 'var']: r#6
[#16 EndOfText]: r#6
[#17 ';']: r#7
[#17 '@']: r#7
[#17 'const']: r#7
[#17 'fn']: r#7
[#17 'override']: r#7
[#17 'staticAssert']: r#7
[#17 'struct']: r#7
[#17 'type']: r#7
[#17 'var']: r#7
[#17 EndOfText]: r#7
[#18 ';']: s#19
[#19 '!']: r#8
[#19 '&']: r#8
[#19 '(']: r#8
[#19 ')']: r#8
[#19 '*']: r#8
[#19 '-']: r#8
[#19 ';']: r#8
[#19 '@']: r#8
[#19 'array']: r#8
[#19 'bitcast']: r#8
[#19 'bool']: r#8
[#19 'break']: r#8
[#19 'const']: r#8
[#19 'continue']: r#8
[#19 'continuing']: r#8
[#19 'discard']: r#8
[#19 'enable']: r#8
[#19 'f16']: r#8
[#19 'f32']: r#8
[#19 'fallthrough']: r#8
[#19 'false']: r#8
[#19 'fn']: r#8
[#19 'for']: r#8
[#19 'i32']: r#8
[#19 'if']: r#8
[#19 'let']: r#8
[#19 'loop']: r#8
[#19 'mat2x2']: r#8
[#19 'mat2x3']: r#8
[#19 'mat2x4']: r#8
[#19 'mat3x2']: r#8
[#19 'mat3x3']: r#8
[#19 'mat3x4']: r#8
[#19 'mat4x2']: r#8
[#19 'mat4x3']: r#8
[#19 'mat4x4']: r#8
[#19 'override']: r#8
[#19 'ptr']: r#8
[#19 'return']: r#8
[#19 'sampler']: r#8
[#19 'sampler_comparison']: r#8
[#19 'staticAssert']: r#8
[#19 'struct']: r#8
[#19 'switch']: r#8
[#19 'texture_1d']: r#8
[#19 'texture_2d']: r#8
[#19 'texture_2d_array']: r#8
[#19 'texture_3d']: r#8
[#19 'texture_cube']: r#8
[#19 'texture_cube_array']: r#8
[#19 'texture_depth_2d']: r#8
[#19 'texture_depth_2d_array']: r#8
[#19 'texture_depth_cube']: r#8
[#19 'texture_depth_cube_array']: r#8
[#19 'texture_depth_multisampled_2d']: r#8
[#19 'texture_multisampled_2d']: r#8
[#19 'texture_storage_1d']: r#8
[#19 'texture_storage_2d']: r#8
[#19 'texture_storage_2d_array']: r#8
[#19 'texture_storage_3d']: r#8
[#19 'true']: r#8
[#19 'type']: r#8
[#19 'u32']: r#8
[#19 'var']: r#8
[#19 'vec2']: r#8
[#19 'vec3']: r#8
[#19 'vec4']: r#8
[#19 'while']: r#8
[#19 '{']: r#8
[#19 '}']: r#8
[#19 '~']: r#8
[#19 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#8
[#19 EndOfText]: r#8
[#20 'var']: s#147
[#21 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#22 'override']: s#142
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#24 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#25 'fn']: s#139
[#26 '!']: s#57
[#26 '&']: s#60
[#26 '(']: s#100
[#26 '*']: s#59
[#26 '-']: s#56
[#26 'array']: s#106
[#26 'bitcast']: s#65
[#26 'bool']: s#73
[#26 'f16']: s#102
[#26 'f32']: s#101
[#26 'false']: s#99
[#26 'i32']: s#103
[#26 'mat2x2']: s#84
[#26 'mat2x3']: s#85
[#26 'mat2x4']: s#86
[#26 'mat3x2']: s#87
[#26 'mat3x3']: s#88
[#26 'mat3x4']: s#89
[#26 'mat4x2']: s#90
[#26 'mat4x3']: s#91
[#26 'mat4x4']: s#92
[#26 'ptr']: s#105
[#26 'sampler']: s#120
[#26 'sampler_comparison']: s#121
[#26 'texture_1d']: s#127
[#26 'texture_2d']: s#128
[#26 'texture_2d_array']: s#129
[#26 'texture_3d']: s#130
[#26 'texture_cube']: s#131
[#26 'texture_cube_array']: s#132
[#26 'texture_depth_2d']: s#122
[#26 'texture_depth_2d_array']: s#123
[#26 'texture_depth_cube']: s#124
[#26 'texture_depth_cube_array']: s#125
[#26 'texture_depth_multisampled_2d']: s#126
[#26 'texture_multisampled_2d']: s#133
[#26 'texture_storage_1d']: s#134
[#26 'texture_storage_2d']: s#135
[#26 'texture_storage_2d_array']: s#136
[#26 'texture_storage_3d']: s#137
[#26 'true']: s#98
[#26 'u32']: s#104
[#26 'vec2']: s#81
[#26 'vec3']: s#82
[#26 'vec4']: s#83
[#26 '~']: s#58
[#26 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#26 /0[fh]/]: s#115
[#26 /0[iu]?/]: s#94
[#26 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#26 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#26 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#26 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#26 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#26 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#26 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#26 /[1-9][0-9]*[fh]/]: s#116
[#26 /[1-9][0-9]*[iu]?/]: s#95
[#27 'var']: r#9
[#28 'override']: r#10
[#29 'fn']: r#11
[#30 '@']: s#32
[#31 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#32 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#12
[#33 '(']: s#100
[#34 'var']: r#13
[#35 'override']: r#14
[#36 'fn']: r#15
[#37 ';']: r#16
[#38 '&&']: r#19
[#38 ')']: r#17
[#38 ',']: r#17
[#38 ':']: r#17
[#38 ';']: r#17
[#38 ']']: r#17
[#38 '{']: r#17
[#38 '||']: r#18
[#39 '||']: s#225
[#40 '&&']: s#223
[#41 ')']: r#20
[#41 ',']: r#20
[#41 ':']: r#20
[#41 ';']: r#20
[#41 ']']: r#20
[#41 '{']: r#20
[#42 '!=']: s#221
[#42 '&&']: r#21
[#42 ')']: r#21
[#42 ',']: r#21
[#42 ':']: r#21
[#42 ';']: r#21
[#42 '<']: s#157
[#42 '<=']: s#218
[#42 '==']: s#220
[#42 '>']: s#217
[#42 '>=']: s#219
[#42 ']']: r#21
[#42 '{']: r#21
[#42 '||']: r#21
[#43 '&']: s#60
[#44 '|']: s#209
[#45 '^']: s#207
[#46 '!=']: r#22
[#46 '&&']: r#22
[#46 ')']: r#22
[#46 '+']: s#205
[#46 ',']: r#22
[#46 '-']: s#56
[#46 ':']: r#22
[#46 ';']: r#22
[#46 '<']: r#22
[#46 '<=']: r#22
[#46 '==']: r#22
[#46 '>']: r#22
[#46 '>=']: r#22
[#46 ']']: r#22
[#46 '{']: r#22
[#46 '||']: r#22
[#47 '!=']: r#26
[#47 '%']: r#26
[#47 '&&']: r#26
[#47 '&']: r#23
[#47 ')']: r#26
[#47 '*']: r#26
[#47 '+']: r#26
[#47 ',']: r#26
[#47 '-']: r#26
[#47 '/']: r#26
[#47 ':']: r#26
[#47 ';']: r#26
[#47 '<']: r#26
[#47 '<<']: s#201
[#47 '<=']: r#26
[#47 '==']: r#26
[#47 '>']: r#26
[#47 '>=']: r#26
[#47 '>>']: s#202
[#47 ']']: r#26
[#47 '^']: r#25
[#47 '{']: r#26
[#47 '|']: r#24
[#47 '||']: r#26
[#48 '!=']: r#27
[#48 '%']: s#198
[#48 '&&']: r#27
[#48 ')']: r#27
[#48 '*']: s#59
[#48 '+']: r#27
[#48 ',']: r#27
[#48 '-']: r#27
[#48 '/']: s#197
[#48 ':']: r#27
[#48 ';']: r#27
[#48 '<']: r#27
[#48 '<=']: r#27
[#48 '==']: r#27
[#48 '>']: r#27
[#48 '>=']: r#27
[#48 ']']: r#27
[#48 '{']: r#27
[#48 '||']: r#27
[#49 '!=']: r#28
[#49 '%']: r#28
[#49 '&&']: r#28
[#49 '&']: r#28
[#49 ')']: r#28
[#49 '*']: r#28
[#49 '+']: r#28
[#49 ',']: r#28
[#49 '-']: r#28
[#49 '/']: r#28
[#49 ':']: r#28
[#49 ';']: r#28
[#49 '<']: r#28
[#49 '<<']: r#28
[#49 '<=']: r#28
[#49 '==']: r#28
[#49 '>']: r#28
[#49 '>=']: r#28
[#49 '>>']: r#28
[#49 ']']: r#28
[#49 '^']: r#28
[#49 '{']: r#28
[#49 '|']: r#28
[#49 '||']: r#28
[#50 '!']: s#57
[#50 '&']: s#60
[#50 '(']: s#100
[#50 '*']: s#59
[#50 '-']: s#56
[#50 'array']: s#106
[#50 'bitcast']: s#65
[#50 'bool']: s#73
[#50 'f16']: s#102
[#50 'f32']: s#101
[#50 'false']: s#99
[#50 'i32']: s#103
[#50 'mat2x2']: s#84
[#50 'mat2x3']: s#85
[#50 'mat2x4']: s#86
[#50 'mat3x2']: s#87
[#50 'mat3x3']: s#88
[#50 'mat3x4']: s#89
[#50 'mat4x2']: s#90
[#50 'mat4x3']: s#91
[#50 'mat4x4']: s#92
[#50 'ptr']: s#105
[#50 'sampler']: s#120
[#50 'sampler_comparison']: s#121
[#50 'texture_1d']: s#127
[#50 'texture_2d']: s#128
[#50 'texture_2d_array']: s#129
[#50 'texture_3d']: s#130
[#50 'texture_cube']: s#131
[#50 'texture_cube_array']: s#132
[#50 'texture_depth_2d']: s#122
[#50 'texture_depth_2d_array']: s#123
[#50 'texture_depth_cube']: s#124
[#50 'texture_depth_cube_array']: s#125
[#50 'texture_depth_multisampled_2d']: s#126
[#50 'texture_multisampled_2d']: s#133
[#50 'texture_storage_1d']: s#134
[#50 'texture_storage_2d']: s#135
[#50 'texture_storage_2d_array']: s#136
[#50 'texture_storage_3d']: s#137
[#50 'true']: s#98
[#50 'u32']: s#104
[#50 'vec2']: s#81
[#50 'vec3']: s#82
[#50 'vec4']: s#83
[#50 '~']: s#58
[#50 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#50 /0[fh]/]: s#115
[#50 /0[iu]?/]: s#94
[#50 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#50 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#50 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#50 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#50 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#50 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#50 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#50 /[1-9][0-9]*[fh]/]: s#116
[#50 /[1-9][0-9]*[iu]?/]: s#95
[#51 '!']: s#57
[#51 '&']: s#60
[#51 '(']: s#100
[#51 '*']: s#59
[#51 '-']: s#56
[#51 'array']: s#106
[#51 'bitcast']: s#65
[#51 'bool']: s#73
[#51 'f16']: s#102
[#51 'f32']: s#101
[#51 'false']: s#99
[#51 'i32']: s#103
[#51 'mat2x2']: s#84
[#51 'mat2x3']: s#85
[#51 'mat2x4']: s#86
[#51 'mat3x2']: s#87
[#51 'mat3x3']: s#88
[#51 'mat3x4']: s#89
[#51 'mat4x2']: s#90
[#51 'mat4x3']: s#91
[#51 'mat4x4']: s#92
[#51 'ptr']: s#105
[#51 'sampler']: s#120
[#51 'sampler_comparison']: s#121
[#51 'texture_1d']: s#127
[#51 'texture_2d']: s#128
[#51 'texture_2d_array']: s#129
[#51 'texture_3d']: s#130
[#51 'texture_cube']: s#131
[#51 'texture_cube_array']: s#132
[#51 'texture_depth_2d']: s#122
[#51 'texture_depth_2d_array']: s#123
[#51 'texture_depth_cube']: s#124
[#51 'texture_depth_cube_array']: s#125
[#51 'texture_depth_multisampled_2d']: s#126
[#51 'texture_multisampled_2d']: s#133
[#51 'texture_storage_1d']: s#134
[#51 'texture_storage_2d']: s#135
[#51 'texture_storage_2d_array']: s#136
[#51 'texture_storage_3d']: s#137
[#51 'true']: s#98
[#51 'u32']: s#104
[#51 'vec2']: s#81
[#51 'vec3']: s#82
[#51 'vec4']: s#83
[#51 '~']: s#58
[#51 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#51 /0[fh]/]: s#115
[#51 /0[iu]?/]: s#94
[#51 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#51 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#51 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#51 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#51 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#51 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#51 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#51 /[1-9][0-9]*[fh]/]: s#116
[#51 /[1-9][0-9]*[iu]?/]: s#95
[#52 '!']: s#57
[#52 '&']: s#60
[#52 '(']: s#100
[#52 '*']: s#59
[#52 '-']: s#56
[#52 'array']: s#106
[#52 'bitcast']: s#65
[#52 'bool']: s#73
[#52 'f16']: s#102
[#52 'f32']: s#101
[#52 'false']: s#99
[#52 'i32']: s#103
[#52 'mat2x2']: s#84
[#52 'mat2x3']: s#85
[#52 'mat2x4']: s#86
[#52 'mat3x2']: s#87
[#52 'mat3x3']: s#88
[#52 'mat3x4']: s#89
[#52 'mat4x2']: s#90
[#52 'mat4x3']: s#91
[#52 'mat4x4']: s#92
[#52 'ptr']: s#105
[#52 'sampler']: s#120
[#52 'sampler_comparison']: s#121
[#52 'texture_1d']: s#127
[#52 'texture_2d']: s#128
[#52 'texture_2d_array']: s#129
[#52 'texture_3d']: s#130
[#52 'texture_cube']: s#131
[#52 'texture_cube_array']: s#132
[#52 'texture_depth_2d']: s#122
[#52 'texture_depth_2d_array']: s#123
[#52 'texture_depth_cube']: s#124
[#52 'texture_depth_cube_array']: s#125
[#52 'texture_depth_multisampled_2d']: s#126
[#52 'texture_multisampled_2d']: s#133
[#52 'texture_storage_1d']: s#134
[#52 'texture_storage_2d']: s#135
[#52 'texture_storage_2d_array']: s#136
[#52 'texture_storage_3d']: s#137
[#52 'true']: s#98
[#52 'u32']: s#104
[#52 'vec2']: s#81
[#52 'vec3']: s#82
[#52 'vec4']: s#83
[#52 '~']: s#58
[#52 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#52 /0[fh]/]: s#115
[#52 /0[iu]?/]: s#94
[#52 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#52 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#52 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#52 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#52 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#52 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#52 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#52 /[1-9][0-9]*[fh]/]: s#116
[#52 /[1-9][0-9]*[iu]?/]: s#95
[#53 '!']: s#57
[#53 '&']: s#60
[#53 '(']: s#100
[#53 '*']: s#59
[#53 '-']: s#56
[#53 'array']: s#106
[#53 'bitcast']: s#65
[#53 'bool']: s#73
[#53 'f16']: s#102
[#53 'f32']: s#101
[#53 'false']: s#99
[#53 'i32']: s#103
[#53 'mat2x2']: s#84
[#53 'mat2x3']: s#85
[#53 'mat2x4']: s#86
[#53 'mat3x2']: s#87
[#53 'mat3x3']: s#88
[#53 'mat3x4']: s#89
[#53 'mat4x2']: s#90
[#53 'mat4x3']: s#91
[#53 'mat4x4']: s#92
[#53 'ptr']: s#105
[#53 'sampler']: s#120
[#53 'sampler_comparison']: s#121
[#53 'texture_1d']: s#127
[#53 'texture_2d']: s#128
[#53 'texture_2d_array']: s#129
[#53 'texture_3d']: s#130
[#53 'texture_cube']: s#131
[#53 'texture_cube_array']: s#132
[#53 'texture_depth_2d']: s#122
[#53 'texture_depth_2d_array']: s#123
[#53 'texture_depth_cube']: s#124
[#53 'texture_depth_cube_array']: s#125
[#53 'texture_depth_multisampled_2d']: s#126
[#53 'texture_multisampled_2d']: s#133
[#53 'texture_storage_1d']: s#134
[#53 'texture_storage_2d']: s#135
[#53 'texture_storage_2d_array']: s#136
[#53 'texture_storage_3d']: s#137
[#53 'true']: s#98
[#53 'u32']: s#104
[#53 'vec2']: s#81
[#53 'vec3']: s#82
[#53 'vec4']: s#83
[#53 '~']: s#58
[#53 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#53 /0[fh]/]: s#115
[#53 /0[iu]?/]: s#94
[#53 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#53 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#53 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#53 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#53 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#53 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#53 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#53 /[1-9][0-9]*[fh]/]: s#116
[#53 /[1-9][0-9]*[iu]?/]: s#95
[#54 '!']: s#57
[#54 '&']: s#60
[#54 '(']: s#100
[#54 '*']: s#59
[#54 '-']: s#56
[#54 'array']: s#106
[#54 'bitcast']: s#65
[#54 'bool']: s#73
[#54 'f16']: s#102
[#54 'f32']: s#101
[#54 'false']: s#99
[#54 'i32']: s#103
[#54 'mat2x2']: s#84
[#54 'mat2x3']: s#85
[#54 'mat2x4']: s#86
[#54 'mat3x2']: s#87
[#54 'mat3x3']: s#88
[#54 'mat3x4']: s#89
[#54 'mat4x2']: s#90
[#54 'mat4x3']: s#91
[#54 'mat4x4']: s#92
[#54 'ptr']: s#105
[#54 'sampler']: s#120
[#54 'sampler_comparison']: s#121
[#54 'texture_1d']: s#127
[#54 'texture_2d']: s#128
[#54 'texture_2d_array']: s#129
[#54 'texture_3d']: s#130
[#54 'texture_cube']: s#131
[#54 'texture_cube_array']: s#132
[#54 'texture_depth_2d']: s#122
[#54 'texture_depth_2d_array']: s#123
[#54 'texture_depth_cube']: s#124
[#54 'texture_depth_cube_array']: s#125
[#54 'texture_depth_multisampled_2d']: s#126
[#54 'texture_multisampled_2d']: s#133
[#54 'texture_storage_1d']: s#134
[#54 'texture_storage_2d']: s#135
[#54 'texture_storage_2d_array']: s#136
[#54 'texture_storage_3d']: s#137
[#54 'true']: s#98
[#54 'u32']: s#104
[#54 'vec2']: s#81
[#54 'vec3']: s#82
[#54 'vec4']: s#83
[#54 '~']: s#58
[#54 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#54 /0[fh]/]: s#115
[#54 /0[iu]?/]: s#94
[#54 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#54 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#54 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#54 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#54 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#54 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#54 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#54 /[1-9][0-9]*[fh]/]: s#116
[#54 /[1-9][0-9]*[iu]?/]: s#95
[#55 '.']: s#188
[#55 '[']: s#187
[#56 '!']: r#29
[#56 '&']: r#29
[#56 '(']: r#29
[#56 '*']: r#29
[#56 '-']: r#29
[#56 'array']: r#29
[#56 'bitcast']: r#29
[#56 'bool']: r#29
[#56 'f16']: r#29
[#56 'f32']: r#29
[#56 'false']: r#29
[#56 'i32']: r#29
[#56 'mat2x2']: r#29
[#56 'mat2x3']: r#29
[#56 'mat2x4']: r#29
[#56 'mat3x2']: r#29
[#56 'mat3x3']: r#29
[#56 'mat3x4']: r#29
[#56 'mat4x2']: r#29
[#56 'mat4x3']: r#29
[#56 'mat4x4']: r#29
[#56 'ptr']: r#29
[#56 'sampler']: r#29
[#56 'sampler_comparison']: r#29
[#56 'texture_1d']: r#29
[#56 'texture_2d']: r#29
[#56 'texture_2d_array']: r#29
[#56 'texture_3d']: r#29
[#56 'texture_cube']: r#29
[#56 'texture_cube_array']: r#29
[#56 'texture_depth_2d']: r#29
[#56 'texture_depth_2d_array']: r#29
[#56 'texture_depth_cube']: r#29
[#56 'texture_depth_cube_array']: r#29
[#56 'texture_depth_multisampled_2d']: r#29
[#56 'texture_multisampled_2d']: r#29
[#56 'texture_storage_1d']: r#29
[#56 'texture_storage_2d']: r#29
[#56 'texture_storage_2d_array']: r#29
[#56 'texture_storage_3d']: r#29
[#56 'true']: r#29
[#56 'u32']: r#29
[#56 'vec2']: r#29
[#56 'vec3']: r#29
[#56 'vec4']: r#29
[#56 '~']: r#29
[#56 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#29
[#57 '!']: r#30
[#57 '&']: r#30
[#57 '(']: r#30
[#57 '*']: r#30
[#57 '-']: r#30
[#57 'array']: r#30
[#57 'bitcast']: r#30
[#57 'bool']: r#30
[#57 'f16']: r#30
[#57 'f32']: r#30
[#57 'false']: r#30
[#57 'i32']: r#30
[#57 'mat2x2']: r#30
[#57 'mat2x3']: r#30
[#57 'mat2x4']: r#30
[#57 'mat3x2']: r#30
[#57 'mat3x3']: r#30
[#57 'mat3x4']: r#30
[#57 'mat4x2']: r#30
[#57 'mat4x3']: r#30
[#57 'mat4x4']: r#30
[#57 'ptr']: r#30
[#57 'sampler']: r#30
[#57 'sampler_comparison']: r#30
[#57 'texture_1d']: r#30
[#57 'texture_2d']: r#30
[#57 'texture_2d_array']: r#30
[#57 'texture_3d']: r#30
[#57 'texture_cube']: r#30
[#57 'texture_cube_array']: r#30
[#57 'texture_depth_2d']: r#30
[#57 'texture_depth_2d_array']: r#30
[#57 'texture_depth_cube']: r#30
[#57 'texture_depth_cube_array']: r#30
[#57 'texture_depth_multisampled_2d']: r#30
[#57 'texture_multisampled_2d']: r#30
[#57 'texture_storage_1d']: r#30
[#57 'texture_storage_2d']: r#30
[#57 'texture_storage_2d_array']: r#30
[#57 'texture_storage_3d']: r#30
[#57 'true']: r#30
[#57 'u32']: r#30
[#57 'vec2']: r#30
[#57 'vec3']: r#30
[#57 'vec4']: r#30
[#57 '~']: r#30
[#57 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#30
[#58 '!']: r#31
[#58 '&']: r#31
[#58 '(']: r#31
[#58 '*']: r#31
[#58 '-']: r#31
[#58 'array']: r#31
[#58 'bitcast']: r#31
[#58 'bool']: r#31
[#58 'f16']: r#31
[#58 'f32']: r#31
[#58 'false']: r#31
[#58 'i32']: r#31
[#58 'mat2x2']: r#31
[#58 'mat2x3']: r#31
[#58 'mat2x4']: r#31
[#58 'mat3x2']: r#31
[#58 'mat3x3']: r#31
[#58 'mat3x4']: r#31
[#58 'mat4x2']: r#31
[#58 'mat4x3']: r#31
[#58 'mat4x4']: r#31
[#58 'ptr']: r#31
[#58 'sampler']: r#31
[#58 'sampler_comparison']: r#31
[#58 'texture_1d']: r#31
[#58 'texture_2d']: r#31
[#58 'texture_2d_array']: r#31
[#58 'texture_3d']: r#31
[#58 'texture_cube']: r#31
[#58 'texture_cube_array']: r#31
[#58 'texture_depth_2d']: r#31
[#58 'texture_depth_2d_array']: r#31
[#58 'texture_depth_cube']: r#31
[#58 'texture_depth_cube_array']: r#31
[#58 'texture_depth_multisampled_2d']: r#31
[#58 'texture_multisampled_2d']: r#31
[#58 'texture_storage_1d']: r#31
[#58 'texture_storage_2d']: r#31
[#58 'texture_storage_2d_array']: r#31
[#58 'texture_storage_3d']: r#31
[#58 'true']: r#31
[#58 'u32']: r#31
[#58 'vec2']: r#31
[#58 'vec3']: r#31
[#58 'vec4']: r#31
[#58 '~']: r#31
[#58 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#31
[#59 '!']: r#32
[#59 '&']: r#32
[#59 '(']: r#32
[#59 '*']: r#32
[#59 '-']: r#32
[#59 'array']: r#32
[#59 'bitcast']: r#32
[#59 'bool']: r#32
[#59 'f16']: r#32
[#59 'f32']: r#32
[#59 'false']: r#32
[#59 'i32']: r#32
[#59 'mat2x2']: r#32
[#59 'mat2x3']: r#32
[#59 'mat2x4']: r#32
[#59 'mat3x2']: r#32
[#59 'mat3x3']: r#32
[#59 'mat3x4']: r#32
[#59 'mat4x2']: r#32
[#59 'mat4x3']: r#32
[#59 'mat4x4']: r#32
[#59 'ptr']: r#32
[#59 'sampler']: r#32
[#59 'sampler_comparison']: r#32
[#59 'texture_1d']: r#32
[#59 'texture_2d']: r#32
[#59 'texture_2d_array']: r#32
[#59 'texture_3d']: r#32
[#59 'texture_cube']: r#32
[#59 'texture_cube_array']: r#32
[#59 'texture_depth_2d']: r#32
[#59 'texture_depth_2d_array']: r#32
[#59 'texture_depth_cube']: r#32
[#59 'texture_depth_cube_array']: r#32
[#59 'texture_depth_multisampled_2d']: r#32
[#59 'texture_multisampled_2d']: r#32
[#59 'texture_storage_1d']: r#32
[#59 'texture_storage_2d']: r#32
[#59 'texture_storage_2d_array']: r#32
[#59 'texture_storage_3d']: r#32
[#59 'true']: r#32
[#59 'u32']: r#32
[#59 'vec2']: r#32
[#59 'vec3']: r#32
[#59 'vec4']: r#32
[#59 '~']: r#32
[#59 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#32
[#60 '!']: r#33
[#60 '&']: r#33
[#60 '(']: r#33
[#60 '*']: r#33
[#60 '-']: r#33
[#60 'array']: r#33
[#60 'bitcast']: r#33
[#60 'bool']: r#33
[#60 'f16']: r#33
[#60 'f32']: r#33
[#60 'false']: r#33
[#60 'i32']: r#33
[#60 'mat2x2']: r#33
[#60 'mat2x3']: r#33
[#60 'mat2x4']: r#33
[#60 'mat3x2']: r#33
[#60 'mat3x3']: r#33
[#60 'mat3x4']: r#33
[#60 'mat4x2']: r#33
[#60 'mat4x3']: r#33
[#60 'mat4x4']: r#33
[#60 'ptr']: r#33
[#60 'sampler']: r#33
[#60 'sampler_comparison']: r#33
[#60 'texture_1d']: r#33
[#60 'texture_2d']: r#33
[#60 'texture_2d_array']: r#33
[#60 'texture_3d']: r#33
[#60 'texture_cube']: r#33
[#60 'texture_cube_array']: r#33
[#60 'texture_depth_2d']: r#33
[#60 'texture_depth_2d_array']: r#33
[#60 'texture_depth_cube']: r#33
[#60 'texture_depth_cube_array']: r#33
[#60 'texture_depth_multisampled_2d']: r#33
[#60 'texture_multisampled_2d']: r#33
[#60 'texture_storage_1d']: r#33
[#60 'texture_storage_2d']: r#33
[#60 'texture_storage_2d_array']: r#33
[#60 'texture_storage_3d']: r#33
[#60 'true']: r#33
[#60 'u32']: r#33
[#60 'vec2']: r#33
[#60 'vec3']: r#33
[#60 'vec4']: r#33
[#60 '~']: r#33
[#60 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#33
[#61 '!=']: r#34
[#61 '%']: r#34
[#61 '&&']: r#34
[#61 '&']: r#34
[#61 '(']: r#35
[#61 ')']: r#34
[#61 '*']: r#34
[#61 '+']: r#34
[#61 ',']: r#34
[#61 '-']: r#34
[#61 '.']: r#34
[#61 '/']: r#34
[#61 ':']: r#34
[#61 ';']: r#34
[#61 '<']: r#34
[#61 '<<']: r#34
[#61 '<=']: r#34
[#61 '==']: r#34
[#61 '>']: r#34
[#61 '>=']: r#34
[#61 '>>']: r#34
[#61 '[']: r#34
[#61 ']']: r#34
[#61 '^']: r#34
[#61 '{']: r#34
[#61 '|']: r#34
[#61 '||']: r#34
[#62 '(']: s#100
[#63 '!=']: r#36
[#63 '%']: r#36
[#63 '&&']: r#36
[#63 '&']: r#36
[#63 ')']: r#36
[#63 '*']: r#36
[#63 '+']: r#36
[#63 ',']: r#36
[#63 '-']: r#36
[#63 '.']: r#36
[#63 '/']: r#36
[#63 ':']: r#36
[#63 ';']: r#36
[#63 '<']: r#36
[#63 '<<']: r#36
[#63 '<=']: r#36
[#63 '==']: r#36
[#63 '>']: r#36
[#63 '>=']: r#36
[#63 '>>']: r#36
[#63 '[']: r#36
[#63 ']']: r#36
[#63 '^']: r#36
[#63 '{']: r#36
[#63 '|']: r#36
[#63 '||']: r#36
[#64 '!=']: r#37
[#64 '%']: r#37
[#64 '&&']: r#37
[#64 '&']: r#37
[#64 ')']: r#37
[#64 '*']: r#37
[#64 '+']: r#37
[#64 ',']: r#37
[#64 '-']: r#37
[#64 '.']: r#37
[#64 '/']: r#37
[#64 ':']: r#37
[#64 ';']: r#37
[#64 '<']: r#37
[#64 '<<']: r#37
[#64 '<=']: r#37
[#64 '==']: r#37
[#64 '>']: r#37
[#64 '>=']: r#37
[#64 '>>']: r#37
[#64 '[']: r#37
[#64 ']']: r#37
[#64 '^']: r#37
[#64 '{']: r#37
[#64 '|']: r#37
[#64 '||']: r#37
[#65 '<']: s#157
[#66 '(']: r#38
[#67 '(']: r#39
[#68 '(']: r#40
[#69 '!=']: r#41
[#69 '%']: r#41
[#69 '&&']: r#41
[#69 '&']: r#41
[#69 ')']: r#41
[#69 '*']: r#41
[#69 '+']: r#41
[#69 ',']: r#41
[#69 '-']: r#41
[#69 '.']: r#41
[#69 '/']: r#41
[#69 ':']: r#41
[#69 ';']: r#41
[#69 '<']: r#41
[#69 '<<']: r#41
[#69 '<=']: r#41
[#69 '==']: r#41
[#69 '>']: r#41
[#69 '>=']: r#41
[#69 '>>']: r#41
[#69 '[']: r#41
[#69 ']']: r#41
[#69 '^']: r#41
[#69 '{']: r#41
[#69 '|']: r#41
[#69 '||']: r#41
[#70 '!=']: r#42
[#70 '%']: r#42
[#70 '&&']: r#42
[#70 '&']: r#42
[#70 ')']: r#42
[#70 '*']: r#42
[#70 '+']: r#42
[#70 ',']: r#42
[#70 '-']: r#42
[#70 '.']: r#42
[#70 '/']: r#42
[#70 ':']: r#42
[#70 ';']: r#42
[#70 '<']: r#42
[#70 '<<']: r#42
[#70 '<=']: r#42
[#70 '==']: r#42
[#70 '>']: r#42
[#70 '>=']: r#42
[#70 '>>']: r#42
[#70 '[']: r#42
[#70 ']']: r#42
[#70 '^']: r#42
[#70 '{']: r#42
[#70 '|']: r#42
[#70 '||']: r#42
[#71 '!=']: r#43
[#71 '%']: r#43
[#71 '&&']: r#43
[#71 '&']: r#43
[#71 ')']: r#43
[#71 '*']: r#43
[#71 '+']: r#43
[#71 ',']: r#43
[#71 '-']: r#43
[#71 '.']: r#43
[#71 '/']: r#43
[#71 ':']: r#43
[#71 ';']: r#43
[#71 '<']: r#43
[#71 '<<']: r#43
[#71 '<=']: r#43
[#71 '==']: r#43
[#71 '>']: r#43
[#71 '>=']: r#43
[#71 '>>']: r#43
[#71 '[']: r#43
[#71 ']']: r#43
[#71 '^']: r#43
[#71 '{']: r#43
[#71 '|']: r#43
[#71 '||']: r#43
[#72 '!']: s#57
[#72 '&']: s#60
[#72 '(']: s#100
[#72 '*']: s#59
[#72 '-']: s#56
[#72 'array']: s#106
[#72 'bitcast']: s#65
[#72 'bool']: s#73
[#72 'f16']: s#102
[#72 'f32']: s#101
[#72 'false']: s#99
[#72 'i32']: s#103
[#72 'mat2x2']: s#84
[#72 'mat2x3']: s#85
[#72 'mat2x4']: s#86
[#72 'mat3x2']: s#87
[#72 'mat3x3']: s#88
[#72 'mat3x4']: s#89
[#72 'mat4x2']: s#90
[#72 'mat4x3']: s#91
[#72 'mat4x4']: s#92
[#72 'ptr']: s#105
[#72 'sampler']: s#120
[#72 'sampler_comparison']: s#121
[#72 'texture_1d']: s#127
[#72 'texture_2d']: s#128
[#72 'texture_2d_array']: s#129
[#72 'texture_3d']: s#130
[#72 'texture_cube']: s#131
[#72 'texture_cube_array']: s#132
[#72 'texture_depth_2d']: s#122
[#72 'texture_depth_2d_array']: s#123
[#72 'texture_depth_cube']: s#124
[#72 'texture_depth_cube_array']: s#125
[#72 'texture_depth_multisampled_2d']: s#126
[#72 'texture_multisampled_2d']: s#133
[#72 'texture_storage_1d']: s#134
[#72 'texture_storage_2d']: s#135
[#72 'texture_storage_2d_array']: s#136
[#72 'texture_storage_3d']: s#137
[#72 'true']: s#98
[#72 'u32']: s#104
[#72 'vec2']: s#81
[#72 'vec3']: s#82
[#72 'vec4']: s#83
[#72 '~']: s#58
[#72 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#72 /0[fh]/]: s#115
[#72 /0[iu]?/]: s#94
[#72 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#72 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#72 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#72 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#72 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#72 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#72 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#72 /[1-9][0-9]*[fh]/]: s#116
[#72 /[1-9][0-9]*[iu]?/]: s#95
[#73 '(']: r#44
[#73 ')']: r#44
[#73 ',']: r#44
[#73 ';']: r#44
[#73 '=']: r#44
[#73 '>']: r#44
[#73 '{']: r#44
[#73 '}']: r#44
[#74 '(']: r#45
[#74 ')']: r#45
[#74 ',']: r#45
[#74 ';']: r#45
[#74 '=']: r#45
[#74 '>']: r#45
[#74 '{']: r#45
[#74 '}']: r#45
[#75 '(']: r#46
[#75 ')']: r#46
[#75 ',']: r#46
[#75 ';']: r#46
[#75 '=']: r#46
[#75 '>']: r#46
[#75 '{']: r#46
[#75 '}']: r#46
[#76 '(']: r#47
[#76 ')']: r#47
[#76 ',']: r#47
[#76 ';']: r#47
[#76 '=']: r#47
[#76 '>']: r#47
[#76 '{']: r#47
[#76 '}']: r#47
[#77 '(']: r#48
[#77 ')']: r#48
[#77 ',']: r#48
[#77 ';']: r#48
[#77 '=']: r#48
[#77 '>']: r#48
[#77 '{']: r#48
[#77 '}']: r#48
[#78 '<']: s#157
[#79 '(']: r#49
[#79 ')']: r#49
[#79 ',']: r#49
[#79 ';']: r#49
[#79 '=']: r#49
[#79 '>']: r#49
[#79 '{']: r#49
[#79 '}']: r#49
[#80 '(']: r#50
[#80 ')']: r#50
[#80 ',']: r#50
[#80 ';']: r#50
[#80 '=']: r#50
[#80 '>']: r#50
[#80 '{']: r#50
[#80 '}']: r#50
[#81 '(']: r#51
[#82 '(']: r#52
[#83 '(']: r#53
[#84 '(']: r#54
[#85 '(']: r#55
[#86 '(']: r#56
[#87 '(']: r#57
[#88 '(']: r#58
[#89 '(']: r#59
[#90 '(']: r#60
[#91 '(']: r#61
[#92 '(']: r#62
[#93 '!=']: r#63
[#93 '%']: r#63
[#93 '&&']: r#63
[#93 '&']: r#63
[#93 ')']: r#63
[#93 '*']: r#63
[#93 '+']: r#63
[#93 ',']: r#63
[#93 '-']: r#63
[#93 '.']: r#63
[#93 '/']: r#63
[#93 ':']: r#63
[#93 ';']: r#63
[#93 '<']: r#63
[#93 '<<']: r#63
[#93 '<=']: r#63
[#93 '==']: r#63
[#93 '>']: r#63
[#93 '>=']: r#63
[#93 '>>']: r#63
[#93 '[']: r#63
[#93 ']']: r#63
[#93 '^']: r#63
[#93 '{']: r#63
[#93 '|']: r#63
[#93 '||']: r#63
[#94 '!=']: r#64
[#94 '%']: r#64
[#94 '&&']: r#64
[#94 '&']: r#64
[#94 ')']: r#64
[#94 '*']: r#64
[#94 '+']: r#64
[#94 ',']: r#64
[#94 '-']: r#64
[#94 '.']: r#64
[#94 '/']: r#64
[#94 ':']: r#64
[#94 ';']: r#64
[#94 '<']: r#64
[#94 '<<']: r#64
[#94 '<=']: r#64
[#94 '==']: r#64
[#94 '>']: r#64
[#94 '>=']: r#64
[#94 '>>']: r#64
[#94 '[']: r#64
[#94 ']']: r#64
[#94 '^']: r#64
[#94 '{']: r#64
[#94 '|']: r#64
[#94 '||']: r#64
[#95 '!=']: r#65
[#95 '%']: r#65
[#95 '&&']: r#65
[#95 '&']: r#65
[#95 ')']: r#65
[#95 '*']: r#65
[#95 '+']: r#65
[#95 ',']: r#65
[#95 '-']: r#65
[#95 '.']: r#65
[#95 '/']: r#65
[#95 ':']: r#65
[#95 ';']: r#65
[#95 '<']: r#65
[#95 '<<']: r#65
[#95 '<=']: r#65
[#95 '==']: r#65
[#95 '>']: r#65
[#95 '>=']: r#65
[#95 '>>']: r#65
[#95 '[']: r#65
[#95 ']']: r#65
[#95 '^']: r#65
[#95 '{']: r#65
[#95 '|']: r#65
[#95 '||']: r#65
[#96 '!=']: r#66
[#96 '%']: r#66
[#96 '&&']: r#66
[#96 '&']: r#66
[#96 ')']: r#66
[#96 '*']: r#66
[#96 '+']: r#66
[#96 ',']: r#66
[#96 '-']: r#66
[#96 '.']: r#66
[#96 '/']: r#66
[#96 ':']: r#66
[#96 ';']: r#66
[#96 '<']: r#66
[#96 '<<']: r#66
[#96 '<=']: r#66
[#96 '==']: r#66
[#96 '>']: r#66
[#96 '>=']: r#66
[#96 '>>']: r#66
[#96 '[']: r#66
[#96 ']']: r#66
[#96 '^']: r#66
[#96 '{']: r#66
[#96 '|']: r#66
[#96 '||']: r#66
[#97 '!=']: r#67
[#97 '%']: r#67
[#97 '&&']: r#67
[#97 '&']: r#67
[#97 ')']: r#67
[#97 '*']: r#67
[#97 '+']: r#67
[#97 ',']: r#67
[#97 '-']: r#67
[#97 '.']: r#67
[#97 '/']: r#67
[#97 ':']: r#67
[#97 ';']: r#67
[#97 '<']: r#67
[#97 '<<']: r#67
[#97 '<=']: r#67
[#97 '==']: r#67
[#97 '>']: r#67
[#97 '>=']: r#67
[#97 '>>']: r#67
[#97 '[']: r#67
[#97 ']']: r#67
[#97 '^']: r#67
[#97 '{']: r#67
[#97 '|']: r#67
[#97 '||']: r#67
[#98 '!=']: r#68
[#98 '%']: r#68
[#98 '&&']: r#68
[#98 '&']: r#68
[#98 ')']: r#68
[#98 '*']: r#68
[#98 '+']: r#68
[#98 ',']: r#68
[#98 '-']: r#68
[#98 '.']: r#68
[#98 '/']: r#68
[#98 ':']: r#68
[#98 ';']: r#68
[#98 '<']: r#68
[#98 '<<']: r#68
[#98 '<=']: r#68
[#98 '==']: r#68
[#98 '>']: r#68
[#98 '>=']: r#68
[#98 '>>']: r#68
[#98 '[']: r#68
[#98 ']']: r#68
[#98 '^']: r#68
[#98 '{']: r#68
[#98 '|']: r#68
[#98 '||']: r#68
[#99 '!=']: r#69
[#99 '%']: r#69
[#99 '&&']: r#69
[#99 '&']: r#69
[#99 ')']: r#69
[#99 '*']: r#69
[#99 '+']: r#69
[#99 ',']: r#69
[#99 '-']: r#69
[#99 '.']: r#69
[#99 '/']: r#69
[#99 ':']: r#69
[#99 ';']: r#69
[#99 '<']: r#69
[#99 '<<']: r#69
[#99 '<=']: r#69
[#99 '==']: r#69
[#99 '>']: r#69
[#99 '>=']: r#69
[#99 '>>']: r#69
[#99 '[']: r#69
[#99 ']']: r#69
[#99 '^']: r#69
[#99 '{']: r#69
[#99 '|']: r#69
[#99 '||']: r#69
[#100 '!']: r#70
[#100 '&']: r#70
[#100 '(']: r#70
[#100 ')']: r#70
[#100 '*']: r#70
[#100 '-']: r#70
[#100 ';']: r#70
[#100 '@']: r#70
[#100 'array']: r#70
[#100 'bitcast']: r#70
[#100 'bool']: r#70
[#100 'const']: r#70
[#100 'f16']: r#70
[#100 'f32']: r#70
[#100 'false']: r#70
[#100 'i32']: r#70
[#100 'let']: r#70
[#100 'mat2x2']: r#70
[#100 'mat2x3']: r#70
[#100 'mat2x4']: r#70
[#100 'mat3x2']: r#70
[#100 'mat3x3']: r#70
[#100 'mat3x4']: r#70
[#100 'mat4x2']: r#70
[#100 'mat4x3']: r#70
[#100 'mat4x4']: r#70
[#100 'ptr']: r#70
[#100 'sampler']: r#70
[#100 'sampler_comparison']: r#70
[#100 'texture_1d']: r#70
[#100 'texture_2d']: r#70
[#100 'texture_2d_array']: r#70
[#100 'texture_3d']: r#70
[#100 'texture_cube']: r#70
[#100 'texture_cube_array']: r#70
[#100 'texture_depth_2d']: r#70
[#100 'texture_depth_2d_array']: r#70
[#100 'texture_depth_cube']: r#70
[#100 'texture_depth_cube_array']: r#70
[#100 'texture_depth_multisampled_2d']: r#70
[#100 'texture_multisampled_2d']: r#70
[#100 'texture_storage_1d']: r#70
[#100 'texture_storage_2d']: r#70
[#100 'texture_storage_2d_array']: r#70
[#100 'texture_storage_3d']: r#70
[#100 'true']: r#70
[#100 'u32']: r#70
[#100 'var']: r#70
[#100 'vec2']: r#70
[#100 'vec3']: r#70
[#100 'vec4']: r#70
[#100 '~']: r#70
[#100 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#70
[#101 '(']: r#71
[#101 ')']: r#71
[#101 ',']: r#71
[#101 ';']: r#71
[#101 '=']: r#71
[#101 '>']: r#71
[#101 '{']: r#71
[#101 '}']: r#71
[#102 '(']: r#72
[#102 ')']: r#72
[#102 ',']: r#72
[#102 ';']: r#72
[#102 '=']: r#72
[#102 '>']: r#72
[#102 '{']: r#72
[#102 '}']: r#72
[#103 '(']: r#73
[#103 ')']: r#73
[#103 ',']: r#73
[#103 ';']: r#73
[#103 '=']: r#73
[#103 '>']: r#73
[#103 '{']: r#73
[#103 '}']: r#73
[#104 '(']: r#74
[#104 ')']: r#74
[#104 ',']: r#74
[#104 ';']: r#74
[#104 '=']: r#74
[#104 '>']: r#74
[#104 '{']: r#74
[#104 '}']: r#74
[#105 '<']: r#75
[#106 '<']: s#157
[#107 '(']: r#76
[#107 ')']: r#76
[#107 ',']: r#76
[#107 ';']: r#76
[#107 '=']: r#76
[#107 '>']: r#76
[#107 '{']: r#76
[#107 '}']: r#76
[#108 '(']: r#77
[#108 ')']: r#77
[#108 ',']: r#77
[#108 ';']: r#77
[#108 '=']: r#77
[#108 '>']: r#77
[#108 '{']: r#77
[#108 '}']: r#77
[#109 '<']: s#157
[#110 '<']: s#157
[#111 '<']: s#157
[#112 '!=']: r#78
[#112 '%']: r#78
[#112 '&&']: r#78
[#112 '&']: r#78
[#112 ')']: r#78
[#112 '*']: r#78
[#112 '+']: r#78
[#112 ',']: r#78
[#112 '-']: r#78
[#112 '.']: r#78
[#112 '/']: r#78
[#112 ':']: r#78
[#112 ';']: r#78
[#112 '<']: r#78
[#112 '<<']: r#78
[#112 '<=']: r#78
[#112 '==']: r#78
[#112 '>']: r#78
[#112 '>=']: r#78
[#112 '>>']: r#78
[#112 '[']: r#78
[#112 ']']: r#78
[#112 '^']: r#78
[#112 '{']: r#78
[#112 '|']: r#78
[#112 '||']: r#78
[#113 '!=']: r#79
[#113 '%']: r#79
[#113 '&&']: r#79
[#113 '&']: r#79
[#113 ')']: r#79
[#113 '*']: r#79
[#113 '+']: r#79
[#113 ',']: r#79
[#113 '-']: r#79
[#113 '.']: r#79
[#113 '/']: r#79
[#113 ':']: r#79
[#113 ';']: r#79
[#113 '<']: r#79
[#113 '<<']: r#79
[#113 '<=']: r#79
[#113 '==']: r#79
[#113 '>']: r#79
[#113 '>=']: r#79
[#113 '>>']: r#79
[#113 '[']: r#79
[#113 ']']: r#79
[#113 '^']: r#79
[#113 '{']: r#79
[#113 '|']: r#79
[#113 '||']: r#79
[#114 '!=']: r#80
[#114 '%']: r#80
[#114 '&&']: r#80
[#114 '&']: r#80
[#114 ')']: r#80
[#114 '*']: r#80
[#114 '+']: r#80
[#114 ',']: r#80
[#114 '-']: r#80
[#114 '.']: r#80
[#114 '/']: r#80
[#114 ':']: r#80
[#114 ';']: r#80
[#114 '<']: r#80
[#114 '<<']: r#80
[#114 '<=']: r#80
[#114 '==']: r#80
[#114 '>']: r#80
[#114 '>=']: r#80
[#114 '>>']: r#80
[#114 '[']: r#80
[#114 ']']: r#80
[#114 '^']: r#80
[#114 '{']: r#80
[#114 '|']: r#80
[#114 '||']: r#80
[#115 '!=']: r#81
[#115 '%']: r#81
[#115 '&&']: r#81
[#115 '&']: r#81
[#115 ')']: r#81
[#115 '*']: r#81
[#115 '+']: r#81
[#115 ',']: r#81
[#115 '-']: r#81
[#115 '.']: r#81
[#115 '/']: r#81
[#115 ':']: r#81
[#115 ';']: r#81
[#115 '<']: r#81
[#115 '<<']: r#81
[#115 '<=']: r#81
[#115 '==']: r#81
[#115 '>']: r#81
[#115 '>=']: r#81
[#115 '>>']: r#81
[#115 '[']: r#81
[#115 ']']: r#81
[#115 '^']: r#81
[#115 '{']: r#81
[#115 '|']: r#81
[#115 '||']: r#81
[#116 '!=']: r#82
[#116 '%']: r#82
[#116 '&&']: r#82
[#116 '&']: r#82
[#116 ')']: r#82
[#116 '*']: r#82
[#116 '+']: r#82
[#116 ',']: r#82
[#116 '-']: r#82
[#116 '.']: r#82
[#116 '/']: r#82
[#116 ':']: r#82
[#116 ';']: r#82
[#116 '<']: r#82
[#116 '<<']: r#82
[#116 '<=']: r#82
[#116 '==']: r#82
[#116 '>']: r#82
[#116 '>=']: r#82
[#116 '>>']: r#82
[#116 '[']: r#82
[#116 ']']: r#82
[#116 '^']: r#82
[#116 '{']: r#82
[#116 '|']: r#82
[#116 '||']: r#82
[#117 '!=']: r#83
[#117 '%']: r#83
[#117 '&&']: r#83
[#117 '&']: r#83
[#117 ')']: r#83
[#117 '*']: r#83
[#117 '+']: r#83
[#117 ',']: r#83
[#117 '-']: r#83
[#117 '.']: r#83
[#117 '/']: r#83
[#117 ':']: r#83
[#117 ';']: r#83
[#117 '<']: r#83
[#117 '<<']: r#83
[#117 '<=']: r#83
[#117 '==']: r#83
[#117 '>']: r#83
[#117 '>=']: r#83
[#117 '>>']: r#83
[#117 '[']: r#83
[#117 ']']: r#83
[#117 '^']: r#83
[#117 '{']: r#83
[#117 '|']: r#83
[#117 '||']: r#83
[#118 '!=']: r#84
[#118 '%']: r#84
[#118 '&&']: r#84
[#118 '&']: r#84
[#118 ')']: r#84
[#118 '*']: r#84
[#118 '+']: r#84
[#118 ',']: r#84
[#118 '-']: r#84
[#118 '.']: r#84
[#118 '/']: r#84
[#118 ':']: r#84
[#118 ';']: r#84
[#118 '<']: r#84
[#118 '<<']: r#84
[#118 '<=']: r#84
[#118 '==']: r#84
[#118 '>']: r#84
[#118 '>=']: r#84
[#118 '>>']: r#84
[#118 '[']: r#84
[#118 ']']: r#84
[#118 '^']: r#84
[#118 '{']: r#84
[#118 '|']: r#84
[#118 '||']: r#84
[#119 '!=']: r#85
[#119 '%']: r#85
[#119 '&&']: r#85
[#119 '&']: r#85
[#119 ')']: r#85
[#119 '*']: r#85
[#119 '+']: r#85
[#119 ',']: r#85
[#119 '-']: r#85
[#119 '.']: r#85
[#119 '/']: r#85
[#119 ':']: r#85
[#119 ';']: r#85
[#119 '<']: r#85
[#119 '<<']: r#85
[#119 '<=']: r#85
[#119 '==']: r#85
[#119 '>']: r#85
[#119 '>=']: r#85
[#119 '>>']: r#85
[#119 '[']: r#85
[#119 ']']: r#85
[#119 '^']: r#85
[#119 '{']: r#85
[#119 '|']: r#85
[#119 '||']: r#85
[#120 '(']: r#86
[#120 ')']: r#86
[#120 ',']: r#86
[#120 ';']: r#86
[#120 '=']: r#86
[#120 '>']: r#86
[#120 '{']: r#86
[#120 '}']: r#86
[#121 '(']: r#87
[#121 ')']: r#87
[#121 ',']: r#87
[#121 ';']: r#87
[#121 '=']: r#87
[#121 '>']: r#87
[#121 '{']: r#87
[#121 '}']: r#87
[#122 '(']: r#88
[#122 ')']: r#88
[#122 ',']: r#88
[#122 ';']: r#88
[#122 '=']: r#88
[#122 '>']: r#88
[#122 '{']: r#88
[#122 '}']: r#88
[#123 '(']: r#89
[#123 ')']: r#89
[#123 ',']: r#89
[#123 ';']: r#89
[#123 '=']: r#89
[#123 '>']: r#89
[#123 '{']: r#89
[#123 '}']: r#89
[#124 '(']: r#90
[#124 ')']: r#90
[#124 ',']: r#90
[#124 ';']: r#90
[#124 '=']: r#90
[#124 '>']: r#90
[#124 '{']: r#90
[#124 '}']: r#90
[#125 '(']: r#91
[#125 ')']: r#91
[#125 ',']: r#91
[#125 ';']: r#91
[#125 '=']: r#91
[#125 '>']: r#91
[#125 '{']: r#91
[#125 '}']: r#91
[#126 '(']: r#92
[#126 ')']: r#92
[#126 ',']: r#92
[#126 ';']: r#92
[#126 '=']: r#92
[#126 '>']: r#92
[#126 '{']: r#92
[#126 '}']: r#92
[#127 '<']: r#93
[#128 '<']: r#94
[#129 '<']: r#95
[#130 '<']: r#96
[#131 '<']: r#97
[#132 '<']: r#98
[#133 '<']: r#99
[#134 '<']: r#100
[#135 '<']: r#101
[#136 '<']: r#102
[#137 '<']: r#103
[#138 '{']: s#170
[#139 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#140 '{']: s#170
[#141 '=']: s#160
[#142 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#143 '=']: s#160
[#144 ':']: s#162
[#144 '=']: r#104
[#145 '=']: r#105
[#146 '=']: s#160
[#147 '<']: s#157
[#148 ';']: r#106
[#148 '@']: r#106
[#148 'const']: r#106
[#148 'fn']: r#106
[#148 'override']: r#106
[#148 'staticAssert']: r#106
[#148 'struct']: r#106
[#148 'type']: r#106
[#148 'var']: r#106
[#148 EndOfText]: r#106
[#149 ';']: r#107
[#149 '@']: r#107
[#149 'const']: r#107
[#149 'fn']: r#107
[#149 'override']: r#107
[#149 'staticAssert']: r#107
[#149 'struct']: r#107
[#149 'type']: r#107
[#149 'var']: r#107
[#149 EndOfText]: r#107
[#150 ';']: r#108
[#150 '@']: r#108
[#150 'const']: r#108
[#150 'fn']: r#108
[#150 'override']: r#108
[#150 'staticAssert']: r#108
[#150 'struct']: r#108
[#150 'type']: r#108
[#150 'var']: r#108
[#150 EndOfText]: r#108
[#151 ';']: r#109
[#151 '@']: r#109
[#151 'const']: r#109
[#151 'fn']: r#109
[#151 'override']: r#109
[#151 'staticAssert']: r#109
[#151 'struct']: r#109
[#151 'type']: r#109
[#151 'var']: r#109
[#151 EndOfText]: r#109
[#152 EndOfText]: r#110
[#153 ';']: r#111
[#153 '@']: r#111
[#153 'const']: r#111
[#153 'enable']: r#111
[#153 'fn']: r#111
[#153 'override']: r#111
[#153 'staticAssert']: r#111
[#153 'struct']: r#111
[#153 'type']: r#111
[#153 'var']: r#111
[#153 EndOfText]: r#111
[#154 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#155 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#112
[#156 'function']: s#267
[#156 'private']: s#268
[#156 'storage']: s#271
[#156 'uniform']: s#270
[#156 'workgroup']: s#269
[#157 '!']: r#113
[#157 '&']: r#113
[#157 '(']: r#113
[#157 '*']: r#113
[#157 '-']: r#113
[#157 'array']: r#113
[#157 'bitcast']: r#113
[#157 'bool']: r#113
[#157 'f16']: r#113
[#157 'f32']: r#113
[#157 'false']: r#113
[#157 'function']: r#113
[#157 'i32']: r#113
[#157 'mat2x2']: r#113
[#157 'mat2x3']: r#113
[#157 'mat2x4']: r#113
[#157 'mat3x2']: r#113
[#157 'mat3x3']: r#113
[#157 'mat3x4']: r#113
[#157 'mat4x2']: r#113
[#157 'mat4x3']: r#113
[#157 'mat4x4']: r#113
[#157 'private']: r#113
[#157 'ptr']: r#113
[#157 'sampler']: r#113
[#157 'sampler_comparison']: r#113
[#157 'storage']: r#113
[#157 'texture_1d']: r#113
[#157 'texture_2d']: r#113
[#157 'texture_2d_array']: r#113
[#157 'texture_3d']: r#113
[#157 'texture_cube']: r#113
[#157 'texture_cube_array']: r#113
[#157 'texture_depth_2d']: r#113
[#157 'texture_depth_2d_array']: r#113
[#157 'texture_depth_cube']: r#113
[#157 'texture_depth_cube_array']: r#113
[#157 'texture_depth_multisampled_2d']: r#113
[#157 'texture_multisampled_2d']: r#113
[#157 'texture_storage_1d']: r#113
[#157 'texture_storage_2d']: r#113
[#157 'texture_storage_2d_array']: r#113
[#157 'texture_storage_3d']: r#113
[#157 'true']: r#113
[#157 'u32']: r#113
[#157 'uniform']: r#113
[#157 'vec2']: r#113
[#157 'vec3']: r#113
[#157 'vec4']: r#113
[#157 'workgroup']: r#113
[#157 '~']: r#113
[#157 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#113
[#158 ';']: r#114
[#159 '!']: s#57
[#159 '&']: s#60
[#159 '(']: s#100
[#159 '*']: s#59
[#159 '-']: s#56
[#159 'array']: s#106
[#159 'bitcast']: s#65
[#159 'bool']: s#73
[#159 'f16']: s#102
[#159 'f32']: s#101
[#159 'false']: s#99
[#159 'i32']: s#103
[#159 'mat2x2']: s#84
[#159 'mat2x3']: s#85
[#159 'mat2x4']: s#86
[#159 'mat3x2']: s#87
[#159 'mat3x3']: s#88
[#159 'mat3x4']: s#89
[#159 'mat4x2']: s#90
[#159 'mat4x3']: s#91
[#159 'mat4x4']: s#92
[#159 'ptr']: s#105
[#159 'sampler']: s#120
[#159 'sampler_comparison']: s#121
[#159 'texture_1d']: s#127
[#159 'texture_2d']: s#128
[#159 'texture_2d_array']: s#129
[#159 'texture_3d']: s#130
[#159 'texture_cube']: s#131
[#159 'texture_cube_array']: s#132
[#159 'texture_depth_2d']: s#122
[#159 'texture_depth_2d_array']: s#123
[#159 'texture_depth_cube']: s#124
[#159 'texture_depth_cube_array']: s#125
[#159 'texture_depth_multisampled_2d']: s#126
[#159 'texture_multisampled_2d']: s#133
[#159 'texture_storage_1d']: s#134
[#159 'texture_storage_2d']: s#135
[#159 'texture_storage_2d_array']: s#136
[#159 'texture_storage_3d']: s#137
[#159 'true']: s#98
[#159 'u32']: s#104
[#159 'vec2']: s#81
[#159 'vec3']: s#82
[#159 'vec4']: s#83
[#159 '~']: s#58
[#159 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#159 /0[fh]/]: s#115
[#159 /0[iu]?/]: s#94
[#159 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#159 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#159 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#159 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#159 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#159 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#159 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#159 /[1-9][0-9]*[fh]/]: s#116
[#159 /[1-9][0-9]*[iu]?/]: s#95
[#160 '!']: r#115
[#160 '&']: r#115
[#160 '(']: r#115
[#160 '*']: r#115
[#160 '-']: r#115
[#160 'array']: r#115
[#160 'bitcast']: r#115
[#160 'bool']: r#115
[#160 'f16']: r#115
[#160 'f32']: r#115
[#160 'false']: r#115
[#160 'i32']: r#115
[#160 'mat2x2']: r#115
[#160 'mat2x3']: r#115
[#160 'mat2x4']: r#115
[#160 'mat3x2']: r#115
[#160 'mat3x3']: r#115
[#160 'mat3x4']: r#115
[#160 'mat4x2']: r#115
[#160 'mat4x3']: r#115
[#160 'mat4x4']: r#115
[#160 'ptr']: r#115
[#160 'sampler']: r#115
[#160 'sampler_comparison']: r#115
[#160 'texture_1d']: r#115
[#160 'texture_2d']: r#115
[#160 'texture_2d_array']: r#115
[#160 'texture_3d']: r#115
[#160 'texture_cube']: r#115
[#160 'texture_cube_array']: r#115
[#160 'texture_depth_2d']: r#115
[#160 'texture_depth_2d_array']: r#115
[#160 'texture_depth_cube']: r#115
[#160 'texture_depth_cube_array']: r#115
[#160 'texture_depth_multisampled_2d']: r#115
[#160 'texture_multisampled_2d']: r#115
[#160 'texture_storage_1d']: r#115
[#160 'texture_storage_2d']: r#115
[#160 'texture_storage_2d_array']: r#115
[#160 'texture_storage_3d']: r#115
[#160 'true']: r#115
[#160 'u32']: r#115
[#160 'vec2']: r#115
[#160 'vec3']: r#115
[#160 'vec4']: r#115
[#160 '~']: r#115
[#160 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#115
[#161 'array']: s#106
[#161 'bool']: s#73
[#161 'f16']: s#102
[#161 'f32']: s#101
[#161 'i32']: s#103
[#161 'ptr']: s#105
[#161 'sampler']: s#120
[#161 'sampler_comparison']: s#121
[#161 'texture_1d']: s#127
[#161 'texture_2d']: s#128
[#161 'texture_2d_array']: s#129
[#161 'texture_3d']: s#130
[#161 'texture_cube']: s#131
[#161 'texture_cube_array']: s#132
[#161 'texture_depth_2d']: s#122
[#161 'texture_depth_2d_array']: s#123
[#161 'texture_depth_cube']: s#124
[#161 'texture_depth_cube_array']: s#125
[#161 'texture_depth_multisampled_2d']: s#126
[#161 'texture_multisampled_2d']: s#133
[#161 'texture_storage_1d']: s#134
[#161 'texture_storage_2d']: s#135
[#161 'texture_storage_2d_array']: s#136
[#161 'texture_storage_3d']: s#137
[#161 'u32']: s#104
[#161 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#162 'array']: r#116
[#162 'bool']: r#116
[#162 'f16']: r#116
[#162 'f32']: r#116
[#162 'i32']: r#116
[#162 'ptr']: r#116
[#162 'sampler']: r#116
[#162 'sampler_comparison']: r#116
[#162 'texture_1d']: r#116
[#162 'texture_2d']: r#116
[#162 'texture_2d_array']: r#116
[#162 'texture_3d']: r#116
[#162 'texture_cube']: r#116
[#162 'texture_cube_array']: r#116
[#162 'texture_depth_2d']: r#116
[#162 'texture_depth_2d_array']: r#116
[#162 'texture_depth_cube']: r#116
[#162 'texture_depth_cube_array']: r#116
[#162 'texture_depth_multisampled_2d']: r#116
[#162 'texture_multisampled_2d']: r#116
[#162 'texture_storage_1d']: r#116
[#162 'texture_storage_2d']: r#116
[#162 'texture_storage_2d_array']: r#116
[#162 'texture_storage_3d']: r#116
[#162 'u32']: r#116
[#162 '{']: r#116
[#162 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#116
[#163 '!']: s#57
[#163 '&']: s#60
[#163 '(']: s#100
[#163 '*']: s#59
[#163 '-']: s#56
[#163 'array']: s#106
[#163 'bitcast']: s#65
[#163 'bool']: s#73
[#163 'f16']: s#102
[#163 'f32']: s#101
[#163 'false']: s#99
[#163 'i32']: s#103
[#163 'mat2x2']: s#84
[#163 'mat2x3']: s#85
[#163 'mat2x4']: s#86
[#163 'mat3x2']: s#87
[#163 'mat3x3']: s#88
[#163 'mat3x4']: s#89
[#163 'mat4x2']: s#90
[#163 'mat4x3']: s#91
[#163 'mat4x4']: s#92
[#163 'ptr']: s#105
[#163 'sampler']: s#120
[#163 'sampler_comparison']: s#121
[#163 'texture_1d']: s#127
[#163 'texture_2d']: s#128
[#163 'texture_2d_array']: s#129
[#163 'texture_3d']: s#130
[#163 'texture_cube']: s#131
[#163 'texture_cube_array']: s#132
[#163 'texture_depth_2d']: s#122
[#163 'texture_depth_2d_array']: s#123
[#163 'texture_depth_cube']: s#124
[#163 'texture_depth_cube_array']: s#125
[#163 'texture_depth_multisampled_2d']: s#126
[#163 'texture_multisampled_2d']: s#133
[#163 'texture_storage_1d']: s#134
[#163 'texture_storage_2d']: s#135
[#163 'texture_storage_2d_array']: s#136
[#163 'texture_storage_3d']: s#137
[#163 'true']: s#98
[#163 'u32']: s#104
[#163 'vec2']: s#81
[#163 'vec3']: s#82
[#163 'vec4']: s#83
[#163 '~']: s#58
[#163 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#163 /0[fh]/]: s#115
[#163 /0[iu]?/]: s#94
[#163 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#163 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#163 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#163 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#163 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#163 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#163 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#163 /[1-9][0-9]*[fh]/]: s#116
[#163 /[1-9][0-9]*[iu]?/]: s#95
[#164 '=']: s#160
[#165 ':']: s#162
[#165 ';']: r#117
[#165 '=']: r#117
[#166 ';']: r#118
[#166 '=']: r#118
[#167 'array']: s#106
[#167 'bool']: s#73
[#167 'f16']: s#102
[#167 'f32']: s#101
[#167 'i32']: s#103
[#167 'ptr']: s#105
[#167 'sampler']: s#120
[#167 'sampler_comparison']: s#121
[#167 'texture_1d']: s#127
[#167 'texture_2d']: s#128
[#167 'texture_2d_array']: s#129
[#167 'texture_3d']: s#130
[#167 'texture_cube']: s#131
[#167 'texture_cube_array']: s#132
[#167 'texture_depth_2d']: s#122
[#167 'texture_depth_2d_array']: s#123
[#167 'texture_depth_cube']: s#124
[#167 'texture_depth_cube_array']: s#125
[#167 'texture_depth_multisampled_2d']: s#126
[#167 'texture_multisampled_2d']: s#133
[#167 'texture_storage_1d']: s#134
[#167 'texture_storage_2d']: s#135
[#167 'texture_storage_2d_array']: s#136
[#167 'texture_storage_3d']: s#137
[#167 'u32']: s#104
[#167 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#168 ';']: r#119
[#168 '@']: r#119
[#168 'const']: r#119
[#168 'fn']: r#119
[#168 'override']: r#119
[#168 'staticAssert']: r#119
[#168 'struct']: r#119
[#168 'type']: r#119
[#168 'var']: r#119
[#168 EndOfText]: r#119
[#169 '@']: s#32
[#170 '&']: r#120
[#170 '(']: r#120
[#170 '*']: r#120
[#170 ';']: r#120
[#170 '@']: r#120
[#170 'break']: r#120
[#170 'case']: r#120
[#170 'const']: r#120
[#170 'continue']: r#120
[#170 'continuing']: r#120
[#170 'default']: r#120
[#170 'discard']: r#120
[#170 'fallthrough']: r#120
[#170 'for']: r#120
[#170 'if']: r#120
[#170 'let']: r#120
[#170 'loop']: r#120
[#170 'return']: r#120
[#170 'staticAssert']: r#120
[#170 'switch']: r#120
[#170 'var']: r#120
[#170 'while']: r#120
[#170 '{']: r#120
[#170 '}']: r#120
[#170 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#120
[#171 '(']: s#100
[#172 ';']: r#121
[#172 '@']: r#121
[#172 'const']: r#121
[#172 'fn']: r#121
[#172 'override']: r#121
[#172 'staticAssert']: r#121
[#172 'struct']: r#121
[#172 'type']: r#121
[#172 'var']: r#121
[#172 EndOfText]: r#121
[#173 '&']: s#60
[#173 '*']: s#59
[#173 ';']: s#19
[#173 'break']: s#322
[#173 'const']: s#321
[#173 'continue']: s#323
[#173 'discard']: s#306
[#173 'for']: s#316
[#173 'if']: s#313
[#173 'let']: s#320
[#173 'loop']: s#315
[#173 'return']: s#312
[#173 'staticAssert']: s#26
[#173 'switch']: s#314
[#173 'var']: s#147
[#173 'while']: s#317
[#173 '{']: s#170
[#173 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#174 'r32float']: s#285
[#174 'r32sint']: s#284
[#174 'r32uint']: s#283
[#174 'rg32float']: s#288
[#174 'rg32sint']: s#287
[#174 'rg32uint']: s#286
[#174 'rgba16float']: s#282
[#174 'rgba16sint']: s#281
[#174 'rgba16uint']: s#280
[#174 'rgba32float']: s#291
[#174 'rgba32sint']: s#290
[#174 'rgba32uint']: s#289
[#174 'rgba8sint']: s#279
[#174 'rgba8snorm']: s#277
[#174 'rgba8uint']: s#278
[#174 'rgba8unorm']: s#276
[#175 'array']: s#106
[#175 'bool']: s#73
[#175 'f16']: s#102
[#175 'f32']: s#101
[#175 'i32']: s#103
[#175 'ptr']: s#105
[#175 'sampler']: s#120
[#175 'sampler_comparison']: s#121
[#175 'texture_1d']: s#127
[#175 'texture_2d']: s#128
[#175 'texture_2d_array']: s#129
[#175 'texture_3d']: s#130
[#175 'texture_cube']: s#131
[#175 'texture_cube_array']: s#132
[#175 'texture_depth_2d']: s#122
[#175 'texture_depth_2d_array']: s#123
[#175 'texture_depth_cube']: s#124
[#175 'texture_depth_cube_array']: s#125
[#175 'texture_depth_multisampled_2d']: s#126
[#175 'texture_multisampled_2d']: s#133
[#175 'texture_storage_1d']: s#134
[#175 'texture_storage_2d']: s#135
[#175 'texture_storage_2d_array']: s#136
[#175 'texture_storage_3d']: s#137
[#175 'u32']: s#104
[#175 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#176 'array']: s#106
[#176 'bool']: s#73
[#176 'f16']: s#102
[#176 'f32']: s#101
[#176 'i32']: s#103
[#176 'ptr']: s#105
[#176 'sampler']: s#120
[#176 'sampler_comparison']: s#121
[#176 'texture_1d']: s#127
[#176 'texture_2d']: s#128
[#176 'texture_2d_array']: s#129
[#176 'texture_3d']: s#130
[#176 'texture_cube']: s#131
[#176 'texture_cube_array']: s#132
[#176 'texture_depth_2d']: s#122
[#176 'texture_depth_2d_array']: s#123
[#176 'texture_depth_cube']: s#124
[#176 'texture_depth_cube_array']: s#125
[#176 'texture_depth_multisampled_2d']: s#126
[#176 'texture_multisampled_2d']: s#133
[#176 'texture_storage_1d']: s#134
[#176 'texture_storage_2d']: s#135
[#176 'texture_storage_2d_array']: s#136
[#176 'texture_storage_3d']: s#137
[#176 'u32']: s#104
[#176 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#177 'array']: s#106
[#177 'bool']: s#73
[#177 'f16']: s#102
[#177 'f32']: s#101
[#177 'i32']: s#103
[#177 'ptr']: s#105
[#177 'sampler']: s#120
[#177 'sampler_comparison']: s#121
[#177 'texture_1d']: s#127
[#177 'texture_2d']: s#128
[#177 'texture_2d_array']: s#129
[#177 'texture_3d']: s#130
[#177 'texture_cube']: s#131
[#177 'texture_cube_array']: s#132
[#177 'texture_depth_2d']: s#122
[#177 'texture_depth_2d_array']: s#123
[#177 'texture_depth_cube']: s#124
[#177 'texture_depth_cube_array']: s#125
[#177 'texture_depth_multisampled_2d']: s#126
[#177 'texture_multisampled_2d']: s#133
[#177 'texture_storage_1d']: s#134
[#177 'texture_storage_2d']: s#135
[#177 'texture_storage_2d_array']: s#136
[#177 'texture_storage_3d']: s#137
[#177 'u32']: s#104
[#177 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#178 'function']: s#267
[#178 'private']: s#268
[#178 'storage']: s#271
[#178 'uniform']: s#270
[#178 'workgroup']: s#269
[#179 ')']: s#265
[#180 'array']: s#106
[#180 'bool']: s#73
[#180 'f16']: s#102
[#180 'f32']: s#101
[#180 'i32']: s#103
[#180 'ptr']: s#105
[#180 'sampler']: s#120
[#180 'sampler_comparison']: s#121
[#180 'texture_1d']: s#127
[#180 'texture_2d']: s#128
[#180 'texture_2d_array']: s#129
[#180 'texture_3d']: s#130
[#180 'texture_cube']: s#131
[#180 'texture_cube_array']: s#132
[#180 'texture_depth_2d']: s#122
[#180 'texture_depth_2d_array']: s#123
[#180 'texture_depth_cube']: s#124
[#180 'texture_depth_cube_array']: s#125
[#180 'texture_depth_multisampled_2d']: s#126
[#180 'texture_multisampled_2d']: s#133
[#180 'texture_storage_1d']: s#134
[#180 'texture_storage_2d']: s#135
[#180 'texture_storage_2d_array']: s#136
[#180 'texture_storage_3d']: s#137
[#180 'u32']: s#104
[#180 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#181 '!=']: r#122
[#181 '%']: r#122
[#181 '&&']: r#122
[#181 '&']: r#122
[#181 ')']: r#122
[#181 '*']: r#122
[#181 '+']: r#122
[#181 ',']: r#122
[#181 '-']: r#122
[#181 '.']: r#122
[#181 '/']: r#122
[#181 ':']: r#122
[#181 ';']: r#122
[#181 '<']: r#122
[#181 '<<']: r#122
[#181 '<=']: r#122
[#181 '==']: r#122
[#181 '>']: r#122
[#181 '>=']: r#122
[#181 '>>']: r#122
[#181 '[']: r#122
[#181 ']']: r#122
[#181 '^']: r#122
[#181 '{']: r#122
[#181 '|']: r#122
[#181 '||']: r#122
[#182 '!']: s#57
[#182 '&']: s#60
[#182 '(']: s#100
[#182 '*']: s#59
[#182 '-']: s#56
[#182 'array']: s#106
[#182 'bitcast']: s#65
[#182 'bool']: s#73
[#182 'f16']: s#102
[#182 'f32']: s#101
[#182 'false']: s#99
[#182 'i32']: s#103
[#182 'mat2x2']: s#84
[#182 'mat2x3']: s#85
[#182 'mat2x4']: s#86
[#182 'mat3x2']: s#87
[#182 'mat3x3']: s#88
[#182 'mat3x4']: s#89
[#182 'mat4x2']: s#90
[#182 'mat4x3']: s#91
[#182 'mat4x4']: s#92
[#182 'ptr']: s#105
[#182 'sampler']: s#120
[#182 'sampler_comparison']: s#121
[#182 'texture_1d']: s#127
[#182 'texture_2d']: s#128
[#182 'texture_2d_array']: s#129
[#182 'texture_3d']: s#130
[#182 'texture_cube']: s#131
[#182 'texture_cube_array']: s#132
[#182 'texture_depth_2d']: s#122
[#182 'texture_depth_2d_array']: s#123
[#182 'texture_depth_cube']: s#124
[#182 'texture_depth_cube_array']: s#125
[#182 'texture_depth_multisampled_2d']: s#126
[#182 'texture_multisampled_2d']: s#133
[#182 'texture_storage_1d']: s#134
[#182 'texture_storage_2d']: s#135
[#182 'texture_storage_2d_array']: s#136
[#182 'texture_storage_3d']: s#137
[#182 'true']: s#98
[#182 'u32']: s#104
[#182 'vec2']: s#81
[#182 'vec3']: s#82
[#182 'vec4']: s#83
[#182 '~']: s#58
[#182 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#182 /0[fh]/]: s#115
[#182 /0[iu]?/]: s#94
[#182 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#182 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#182 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#182 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#182 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#182 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#182 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#182 /[1-9][0-9]*[fh]/]: s#116
[#182 /[1-9][0-9]*[iu]?/]: s#95
[#183 '!=']: r#123
[#183 '%']: r#123
[#183 '&&']: r#123
[#183 '&']: r#123
[#183 ')']: r#123
[#183 '*']: r#123
[#183 '+']: r#123
[#183 ',']: r#123
[#183 '-']: r#123
[#183 '/']: r#123
[#183 ':']: r#123
[#183 ';']: r#123
[#183 '<']: r#123
[#183 '<<']: r#123
[#183 '<=']: r#123
[#183 '==']: r#123
[#183 '>']: r#123
[#183 '>=']: r#123
[#183 '>>']: r#123
[#183 ']']: r#123
[#183 '^']: r#123
[#183 '{']: r#123
[#183 '|']: r#123
[#183 '||']: r#123
[#184 '!=']: r#124
[#184 '%']: r#124
[#184 '&&']: r#124
[#184 '&']: r#124
[#184 ')']: r#124
[#184 '*']: r#124
[#184 '+']: r#124
[#184 ',']: r#124
[#184 '-']: r#124
[#184 '/']: r#124
[#184 ':']: r#124
[#184 ';']: r#124
[#184 '<']: r#124
[#184 '<<']: r#124
[#184 '<=']: r#124
[#184 '==']: r#124
[#184 '>']: r#124
[#184 '>=']: r#124
[#184 '>>']: r#124
[#184 ']']: r#124
[#184 '^']: r#124
[#184 '{']: r#124
[#184 '|']: r#124
[#184 '||']: r#124
[#185 '!']: s#57
[#185 '&']: s#60
[#185 '(']: s#100
[#185 '*']: s#59
[#185 '-']: s#56
[#185 'array']: s#106
[#185 'bitcast']: s#65
[#185 'bool']: s#73
[#185 'f16']: s#102
[#185 'f32']: s#101
[#185 'false']: s#99
[#185 'i32']: s#103
[#185 'mat2x2']: s#84
[#185 'mat2x3']: s#85
[#185 'mat2x4']: s#86
[#185 'mat3x2']: s#87
[#185 'mat3x3']: s#88
[#185 'mat3x4']: s#89
[#185 'mat4x2']: s#90
[#185 'mat4x3']: s#91
[#185 'mat4x4']: s#92
[#185 'ptr']: s#105
[#185 'sampler']: s#120
[#185 'sampler_comparison']: s#121
[#185 'texture_1d']: s#127
[#185 'texture_2d']: s#128
[#185 'texture_2d_array']: s#129
[#185 'texture_3d']: s#130
[#185 'texture_cube']: s#131
[#185 'texture_cube_array']: s#132
[#185 'texture_depth_2d']: s#122
[#185 'texture_depth_2d_array']: s#123
[#185 'texture_depth_cube']: s#124
[#185 'texture_depth_cube_array']: s#125
[#185 'texture_depth_multisampled_2d']: s#126
[#185 'texture_multisampled_2d']: s#133
[#185 'texture_storage_1d']: s#134
[#185 'texture_storage_2d']: s#135
[#185 'texture_storage_2d_array']: s#136
[#185 'texture_storage_3d']: s#137
[#185 'true']: s#98
[#185 'u32']: s#104
[#185 'vec2']: s#81
[#185 'vec3']: s#82
[#185 'vec4']: s#83
[#185 '~']: s#58
[#185 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#185 /0[fh]/]: s#115
[#185 /0[iu]?/]: s#94
[#185 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#185 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#185 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#185 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#185 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#185 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#185 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#185 /[1-9][0-9]*[fh]/]: s#116
[#185 /[1-9][0-9]*[iu]?/]: s#95
[#186 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#187 '!']: r#125
[#187 '&']: r#125
[#187 '(']: r#125
[#187 '*']: r#125
[#187 '-']: r#125
[#187 'array']: r#125
[#187 'bitcast']: r#125
[#187 'bool']: r#125
[#187 'f16']: r#125
[#187 'f32']: r#125
[#187 'false']: r#125
[#187 'i32']: r#125
[#187 'mat2x2']: r#125
[#187 'mat2x3']: r#125
[#187 'mat2x4']: r#125
[#187 'mat3x2']: r#125
[#187 'mat3x3']: r#125
[#187 'mat3x4']: r#125
[#187 'mat4x2']: r#125
[#187 'mat4x3']: r#125
[#187 'mat4x4']: r#125
[#187 'ptr']: r#125
[#187 'sampler']: r#125
[#187 'sampler_comparison']: r#125
[#187 'texture_1d']: r#125
[#187 'texture_2d']: r#125
[#187 'texture_2d_array']: r#125
[#187 'texture_3d']: r#125
[#187 'texture_cube']: r#125
[#187 'texture_cube_array']: r#125
[#187 'texture_depth_2d']: r#125
[#187 'texture_depth_2d_array']: r#125
[#187 'texture_depth_cube']: r#125
[#187 'texture_depth_cube_array']: r#125
[#187 'texture_depth_multisampled_2d']: r#125
[#187 'texture_multisampled_2d']: r#125
[#187 'texture_storage_1d']: r#125
[#187 'texture_storage_2d']: r#125
[#187 'texture_storage_2d_array']: r#125
[#187 'texture_storage_3d']: r#125
[#187 'true']: r#125
[#187 'u32']: r#125
[#187 'vec2']: r#125
[#187 'vec3']: r#125
[#187 'vec4']: r#125
[#187 '~']: r#125
[#187 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#125
[#188 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#126
[#189 '!=']: r#127
[#189 '%']: r#127
[#189 '&&']: r#127
[#189 '&']: r#127
[#189 ')']: r#127
[#189 '*']: r#127
[#189 '+']: r#127
[#189 ',']: r#127
[#189 '-']: r#127
[#189 '/']: r#127
[#189 ':']: r#127
[#189 ';']: r#127
[#189 '<']: r#127
[#189 '<<']: r#127
[#189 '<=']: r#127
[#189 '==']: r#127
[#189 '>']: r#127
[#189 '>=']: r#127
[#189 '>>']: r#127
[#189 ']']: r#127
[#189 '^']: r#127
[#189 '{']: r#127
[#189 '|']: r#127
[#189 '||']: r#127
[#190 '!=']: r#128
[#190 '%']: r#128
[#190 '&&']: r#128
[#190 '&']: r#128
[#190 ')']: r#128
[#190 '*']: r#128
[#190 '+']: r#128
[#190 ',']: r#128
[#190 '-']: r#128
[#190 '/']: r#128
[#190 ':']: r#128
[#190 ';']: r#128
[#190 '<']: r#128
[#190 '<<']: r#128
[#190 '<=']: r#128
[#190 '==']: r#128
[#190 '>']: r#128
[#190 '>=']: r#128
[#190 '>>']: r#128
[#190 ']']: r#128
[#190 '^']: r#128
[#190 '{']: r#128
[#190 '|']: r#128
[#190 '||']: r#128
[#191 '!=']: r#129
[#191 '%']: r#129
[#191 '&&']: r#129
[#191 '&']: r#129
[#191 ')']: r#129
[#191 '*']: r#129
[#191 '+']: r#129
[#191 ',']: r#129
[#191 '-']: r#129
[#191 '/']: r#129
[#191 ':']: r#129
[#191 ';']: r#129
[#191 '<']: r#129
[#191 '<<']: r#129
[#191 '<=']: r#129
[#191 '==']: r#129
[#191 '>']: r#129
[#191 '>=']: r#129
[#191 '>>']: r#129
[#191 ']']: r#129
[#191 '^']: r#129
[#191 '{']: r#129
[#191 '|']: r#129
[#191 '||']: r#129
[#192 '!=']: r#130
[#192 '%']: r#130
[#192 '&&']: r#130
[#192 '&']: r#130
[#192 ')']: r#130
[#192 '*']: r#130
[#192 '+']: r#130
[#192 ',']: r#130
[#192 '-']: r#130
[#192 '/']: r#130
[#192 ':']: r#130
[#192 ';']: r#130
[#192 '<']: r#130
[#192 '<<']: r#130
[#192 '<=']: r#130
[#192 '==']: r#130
[#192 '>']: r#130
[#192 '>=']: r#130
[#192 '>>']: r#130
[#192 ']']: r#130
[#192 '^']: r#130
[#192 '{']: r#130
[#192 '|']: r#130
[#192 '||']: r#130
[#193 '!=']: r#131
[#193 '%']: r#131
[#193 '&&']: r#131
[#193 '&']: r#131
[#193 ')']: r#131
[#193 '*']: r#131
[#193 '+']: r#131
[#193 ',']: r#131
[#193 '-']: r#131
[#193 '/']: r#131
[#193 ':']: r#131
[#193 ';']: r#131
[#193 '<']: r#131
[#193 '<<']: r#131
[#193 '<=']: r#131
[#193 '==']: r#131
[#193 '>']: r#131
[#193 '>=']: r#131
[#193 '>>']: r#131
[#193 ']']: r#131
[#193 '^']: r#131
[#193 '{']: r#131
[#193 '|']: r#131
[#193 '||']: r#131
[#194 '!']: s#57
[#194 '&']: s#60
[#194 '(']: s#100
[#194 '*']: s#59
[#194 '-']: s#56
[#194 'array']: s#106
[#194 'bitcast']: s#65
[#194 'bool']: s#73
[#194 'f16']: s#102
[#194 'f32']: s#101
[#194 'false']: s#99
[#194 'i32']: s#103
[#194 'mat2x2']: s#84
[#194 'mat2x3']: s#85
[#194 'mat2x4']: s#86
[#194 'mat3x2']: s#87
[#194 'mat3x3']: s#88
[#194 'mat3x4']: s#89
[#194 'mat4x2']: s#90
[#194 'mat4x3']: s#91
[#194 'mat4x4']: s#92
[#194 'ptr']: s#105
[#194 'sampler']: s#120
[#194 'sampler_comparison']: s#121
[#194 'texture_1d']: s#127
[#194 'texture_2d']: s#128
[#194 'texture_2d_array']: s#129
[#194 'texture_3d']: s#130
[#194 'texture_cube']: s#131
[#194 'texture_cube_array']: s#132
[#194 'texture_depth_2d']: s#122
[#194 'texture_depth_2d_array']: s#123
[#194 'texture_depth_cube']: s#124
[#194 'texture_depth_cube_array']: s#125
[#194 'texture_depth_multisampled_2d']: s#126
[#194 'texture_multisampled_2d']: s#133
[#194 'texture_storage_1d']: s#134
[#194 'texture_storage_2d']: s#135
[#194 'texture_storage_2d_array']: s#136
[#194 'texture_storage_3d']: s#137
[#194 'true']: s#98
[#194 'u32']: s#104
[#194 'vec2']: s#81
[#194 'vec3']: s#82
[#194 'vec4']: s#83
[#194 '~']: s#58
[#194 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#194 /0[fh]/]: s#115
[#194 /0[iu]?/]: s#94
[#194 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#194 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#194 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#194 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#194 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#194 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#194 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#194 /[1-9][0-9]*[fh]/]: s#116
[#194 /[1-9][0-9]*[iu]?/]: s#95
[#195 '!']: s#57
[#195 '&']: s#60
[#195 '(']: s#100
[#195 '*']: s#59
[#195 '-']: s#56
[#195 'array']: s#106
[#195 'bitcast']: s#65
[#195 'bool']: s#73
[#195 'f16']: s#102
[#195 'f32']: s#101
[#195 'false']: s#99
[#195 'i32']: s#103
[#195 'mat2x2']: s#84
[#195 'mat2x3']: s#85
[#195 'mat2x4']: s#86
[#195 'mat3x2']: s#87
[#195 'mat3x3']: s#88
[#195 'mat3x4']: s#89
[#195 'mat4x2']: s#90
[#195 'mat4x3']: s#91
[#195 'mat4x4']: s#92
[#195 'ptr']: s#105
[#195 'sampler']: s#120
[#195 'sampler_comparison']: s#121
[#195 'texture_1d']: s#127
[#195 'texture_2d']: s#128
[#195 'texture_2d_array']: s#129
[#195 'texture_3d']: s#130
[#195 'texture_cube']: s#131
[#195 'texture_cube_array']: s#132
[#195 'texture_depth_2d']: s#122
[#195 'texture_depth_2d_array']: s#123
[#195 'texture_depth_cube']: s#124
[#195 'texture_depth_cube_array']: s#125
[#195 'texture_depth_multisampled_2d']: s#126
[#195 'texture_multisampled_2d']: s#133
[#195 'texture_storage_1d']: s#134
[#195 'texture_storage_2d']: s#135
[#195 'texture_storage_2d_array']: s#136
[#195 'texture_storage_3d']: s#137
[#195 'true']: s#98
[#195 'u32']: s#104
[#195 'vec2']: s#81
[#195 'vec3']: s#82
[#195 'vec4']: s#83
[#195 '~']: s#58
[#195 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#195 /0[fh]/]: s#115
[#195 /0[iu]?/]: s#94
[#195 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#195 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#195 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#195 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#195 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#195 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#195 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#195 /[1-9][0-9]*[fh]/]: s#116
[#195 /[1-9][0-9]*[iu]?/]: s#95
[#196 '!']: s#57
[#196 '&']: s#60
[#196 '(']: s#100
[#196 '*']: s#59
[#196 '-']: s#56
[#196 'array']: s#106
[#196 'bitcast']: s#65
[#196 'bool']: s#73
[#196 'f16']: s#102
[#196 'f32']: s#101
[#196 'false']: s#99
[#196 'i32']: s#103
[#196 'mat2x2']: s#84
[#196 'mat2x3']: s#85
[#196 'mat2x4']: s#86
[#196 'mat3x2']: s#87
[#196 'mat3x3']: s#88
[#196 'mat3x4']: s#89
[#196 'mat4x2']: s#90
[#196 'mat4x3']: s#91
[#196 'mat4x4']: s#92
[#196 'ptr']: s#105
[#196 'sampler']: s#120
[#196 'sampler_comparison']: s#121
[#196 'texture_1d']: s#127
[#196 'texture_2d']: s#128
[#196 'texture_2d_array']: s#129
[#196 'texture_3d']: s#130
[#196 'texture_cube']: s#131
[#196 'texture_cube_array']: s#132
[#196 'texture_depth_2d']: s#122
[#196 'texture_depth_2d_array']: s#123
[#196 'texture_depth_cube']: s#124
[#196 'texture_depth_cube_array']: s#125
[#196 'texture_depth_multisampled_2d']: s#126
[#196 'texture_multisampled_2d']: s#133
[#196 'texture_storage_1d']: s#134
[#196 'texture_storage_2d']: s#135
[#196 'texture_storage_2d_array']: s#136
[#196 'texture_storage_3d']: s#137
[#196 'true']: s#98
[#196 'u32']: s#104
[#196 'vec2']: s#81
[#196 'vec3']: s#82
[#196 'vec4']: s#83
[#196 '~']: s#58
[#196 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#196 /0[fh]/]: s#115
[#196 /0[iu]?/]: s#94
[#196 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#196 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#196 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#196 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#196 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#196 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#196 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#196 /[1-9][0-9]*[fh]/]: s#116
[#196 /[1-9][0-9]*[iu]?/]: s#95
[#197 '!']: r#132
[#197 '&']: r#132
[#197 '(']: r#132
[#197 '*']: r#132
[#197 '-']: r#132
[#197 'array']: r#132
[#197 'bitcast']: r#132
[#197 'bool']: r#132
[#197 'f16']: r#132
[#197 'f32']: r#132
[#197 'false']: r#132
[#197 'i32']: r#132
[#197 'mat2x2']: r#132
[#197 'mat2x3']: r#132
[#197 'mat2x4']: r#132
[#197 'mat3x2']: r#132
[#197 'mat3x3']: r#132
[#197 'mat3x4']: r#132
[#197 'mat4x2']: r#132
[#197 'mat4x3']: r#132
[#197 'mat4x4']: r#132
[#197 'ptr']: r#132
[#197 'sampler']: r#132
[#197 'sampler_comparison']: r#132
[#197 'texture_1d']: r#132
[#197 'texture_2d']: r#132
[#197 'texture_2d_array']: r#132
[#197 'texture_3d']: r#132
[#197 'texture_cube']: r#132
[#197 'texture_cube_array']: r#132
[#197 'texture_depth_2d']: r#132
[#197 'texture_depth_2d_array']: r#132
[#197 'texture_depth_cube']: r#132
[#197 'texture_depth_cube_array']: r#132
[#197 'texture_depth_multisampled_2d']: r#132
[#197 'texture_multisampled_2d']: r#132
[#197 'texture_storage_1d']: r#132
[#197 'texture_storage_2d']: r#132
[#197 'texture_storage_2d_array']: r#132
[#197 'texture_storage_3d']: r#132
[#197 'true']: r#132
[#197 'u32']: r#132
[#197 'vec2']: r#132
[#197 'vec3']: r#132
[#197 'vec4']: r#132
[#197 '~']: r#132
[#197 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#132
[#198 '!']: r#133
[#198 '&']: r#133
[#198 '(']: r#133
[#198 '*']: r#133
[#198 '-']: r#133
[#198 'array']: r#133
[#198 'bitcast']: r#133
[#198 'bool']: r#133
[#198 'f16']: r#133
[#198 'f32']: r#133
[#198 'false']: r#133
[#198 'i32']: r#133
[#198 'mat2x2']: r#133
[#198 'mat2x3']: r#133
[#198 'mat2x4']: r#133
[#198 'mat3x2']: r#133
[#198 'mat3x3']: r#133
[#198 'mat3x4']: r#133
[#198 'mat4x2']: r#133
[#198 'mat4x3']: r#133
[#198 'mat4x4']: r#133
[#198 'ptr']: r#133
[#198 'sampler']: r#133
[#198 'sampler_comparison']: r#133
[#198 'texture_1d']: r#133
[#198 'texture_2d']: r#133
[#198 'texture_2d_array']: r#133
[#198 'texture_3d']: r#133
[#198 'texture_cube']: r#133
[#198 'texture_cube_array']: r#133
[#198 'texture_depth_2d']: r#133
[#198 'texture_depth_2d_array']: r#133
[#198 'texture_depth_cube']: r#133
[#198 'texture_depth_cube_array']: r#133
[#198 'texture_depth_multisampled_2d']: r#133
[#198 'texture_multisampled_2d']: r#133
[#198 'texture_storage_1d']: r#133
[#198 'texture_storage_2d']: r#133
[#198 'texture_storage_2d_array']: r#133
[#198 'texture_storage_3d']: r#133
[#198 'true']: r#133
[#198 'u32']: r#133
[#198 'vec2']: r#133
[#198 'vec3']: r#133
[#198 'vec4']: r#133
[#198 '~']: r#133
[#198 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#133
[#199 '!']: s#57
[#199 '&']: s#60
[#199 '(']: s#100
[#199 '*']: s#59
[#199 '-']: s#56
[#199 'array']: s#106
[#199 'bitcast']: s#65
[#199 'bool']: s#73
[#199 'f16']: s#102
[#199 'f32']: s#101
[#199 'false']: s#99
[#199 'i32']: s#103
[#199 'mat2x2']: s#84
[#199 'mat2x3']: s#85
[#199 'mat2x4']: s#86
[#199 'mat3x2']: s#87
[#199 'mat3x3']: s#88
[#199 'mat3x4']: s#89
[#199 'mat4x2']: s#90
[#199 'mat4x3']: s#91
[#199 'mat4x4']: s#92
[#199 'ptr']: s#105
[#199 'sampler']: s#120
[#199 'sampler_comparison']: s#121
[#199 'texture_1d']: s#127
[#199 'texture_2d']: s#128
[#199 'texture_2d_array']: s#129
[#199 'texture_3d']: s#130
[#199 'texture_cube']: s#131
[#199 'texture_cube_array']: s#132
[#199 'texture_depth_2d']: s#122
[#199 'texture_depth_2d_array']: s#123
[#199 'texture_depth_cube']: s#124
[#199 'texture_depth_cube_array']: s#125
[#199 'texture_depth_multisampled_2d']: s#126
[#199 'texture_multisampled_2d']: s#133
[#199 'texture_storage_1d']: s#134
[#199 'texture_storage_2d']: s#135
[#199 'texture_storage_2d_array']: s#136
[#199 'texture_storage_3d']: s#137
[#199 'true']: s#98
[#199 'u32']: s#104
[#199 'vec2']: s#81
[#199 'vec3']: s#82
[#199 'vec4']: s#83
[#199 '~']: s#58
[#199 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#199 /0[fh]/]: s#115
[#199 /0[iu]?/]: s#94
[#199 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#199 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#199 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#199 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#199 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#199 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#199 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#199 /[1-9][0-9]*[fh]/]: s#116
[#199 /[1-9][0-9]*[iu]?/]: s#95
[#200 '!']: s#57
[#200 '&']: s#60
[#200 '(']: s#100
[#200 '*']: s#59
[#200 '-']: s#56
[#200 'array']: s#106
[#200 'bitcast']: s#65
[#200 'bool']: s#73
[#200 'f16']: s#102
[#200 'f32']: s#101
[#200 'false']: s#99
[#200 'i32']: s#103
[#200 'mat2x2']: s#84
[#200 'mat2x3']: s#85
[#200 'mat2x4']: s#86
[#200 'mat3x2']: s#87
[#200 'mat3x3']: s#88
[#200 'mat3x4']: s#89
[#200 'mat4x2']: s#90
[#200 'mat4x3']: s#91
[#200 'mat4x4']: s#92
[#200 'ptr']: s#105
[#200 'sampler']: s#120
[#200 'sampler_comparison']: s#121
[#200 'texture_1d']: s#127
[#200 'texture_2d']: s#128
[#200 'texture_2d_array']: s#129
[#200 'texture_3d']: s#130
[#200 'texture_cube']: s#131
[#200 'texture_cube_array']: s#132
[#200 'texture_depth_2d']: s#122
[#200 'texture_depth_2d_array']: s#123
[#200 'texture_depth_cube']: s#124
[#200 'texture_depth_cube_array']: s#125
[#200 'texture_depth_multisampled_2d']: s#126
[#200 'texture_multisampled_2d']: s#133
[#200 'texture_storage_1d']: s#134
[#200 'texture_storage_2d']: s#135
[#200 'texture_storage_2d_array']: s#136
[#200 'texture_storage_3d']: s#137
[#200 'true']: s#98
[#200 'u32']: s#104
[#200 'vec2']: s#81
[#200 'vec3']: s#82
[#200 'vec4']: s#83
[#200 '~']: s#58
[#200 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#200 /0[fh]/]: s#115
[#200 /0[iu]?/]: s#94
[#200 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#200 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#200 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#200 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#200 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#200 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#200 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#200 /[1-9][0-9]*[fh]/]: s#116
[#200 /[1-9][0-9]*[iu]?/]: s#95
[#201 '!']: r#134
[#201 '&']: r#134
[#201 '(']: r#134
[#201 '*']: r#134
[#201 '-']: r#134
[#201 'array']: r#134
[#201 'bitcast']: r#134
[#201 'bool']: r#134
[#201 'f16']: r#134
[#201 'f32']: r#134
[#201 'false']: r#134
[#201 'i32']: r#134
[#201 'mat2x2']: r#134
[#201 'mat2x3']: r#134
[#201 'mat2x4']: r#134
[#201 'mat3x2']: r#134
[#201 'mat3x3']: r#134
[#201 'mat3x4']: r#134
[#201 'mat4x2']: r#134
[#201 'mat4x3']: r#134
[#201 'mat4x4']: r#134
[#201 'ptr']: r#134
[#201 'sampler']: r#134
[#201 'sampler_comparison']: r#134
[#201 'texture_1d']: r#134
[#201 'texture_2d']: r#134
[#201 'texture_2d_array']: r#134
[#201 'texture_3d']: r#134
[#201 'texture_cube']: r#134
[#201 'texture_cube_array']: r#134
[#201 'texture_depth_2d']: r#134
[#201 'texture_depth_2d_array']: r#134
[#201 'texture_depth_cube']: r#134
[#201 'texture_depth_cube_array']: r#134
[#201 'texture_depth_multisampled_2d']: r#134
[#201 'texture_multisampled_2d']: r#134
[#201 'texture_storage_1d']: r#134
[#201 'texture_storage_2d']: r#134
[#201 'texture_storage_2d_array']: r#134
[#201 'texture_storage_3d']: r#134
[#201 'true']: r#134
[#201 'u32']: r#134
[#201 'vec2']: r#134
[#201 'vec3']: r#134
[#201 'vec4']: r#134
[#201 '~']: r#134
[#201 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#134
[#202 '!']: r#135
[#202 '&']: r#135
[#202 '(']: r#135
[#202 '*']: r#135
[#202 '-']: r#135
[#202 'array']: r#135
[#202 'bitcast']: r#135
[#202 'bool']: r#135
[#202 'f16']: r#135
[#202 'f32']: r#135
[#202 'false']: r#135
[#202 'i32']: r#135
[#202 'mat2x2']: r#135
[#202 'mat2x3']: r#135
[#202 'mat2x4']: r#135
[#202 'mat3x2']: r#135
[#202 'mat3x3']: r#135
[#202 'mat3x4']: r#135
[#202 'mat4x2']: r#135
[#202 'mat4x3']: r#135
[#202 'mat4x4']: r#135
[#202 'ptr']: r#135
[#202 'sampler']: r#135
[#202 'sampler_comparison']: r#135
[#202 'texture_1d']: r#135
[#202 'texture_2d']: r#135
[#202 'texture_2d_array']: r#135
[#202 'texture_3d']: r#135
[#202 'texture_cube']: r#135
[#202 'texture_cube_array']: r#135
[#202 'texture_depth_2d']: r#135
[#202 'texture_depth_2d_array']: r#135
[#202 'texture_depth_cube']: r#135
[#202 'texture_depth_cube_array']: r#135
[#202 'texture_depth_multisampled_2d']: r#135
[#202 'texture_multisampled_2d']: r#135
[#202 'texture_storage_1d']: r#135
[#202 'texture_storage_2d']: r#135
[#202 'texture_storage_2d_array']: r#135
[#202 'texture_storage_3d']: r#135
[#202 'true']: r#135
[#202 'u32']: r#135
[#202 'vec2']: r#135
[#202 'vec3']: r#135
[#202 'vec4']: r#135
[#202 '~']: r#135
[#202 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#135
[#203 '!']: s#57
[#203 '&']: s#60
[#203 '(']: s#100
[#203 '*']: s#59
[#203 '-']: s#56
[#203 'array']: s#106
[#203 'bitcast']: s#65
[#203 'bool']: s#73
[#203 'f16']: s#102
[#203 'f32']: s#101
[#203 'false']: s#99
[#203 'i32']: s#103
[#203 'mat2x2']: s#84
[#203 'mat2x3']: s#85
[#203 'mat2x4']: s#86
[#203 'mat3x2']: s#87
[#203 'mat3x3']: s#88
[#203 'mat3x4']: s#89
[#203 'mat4x2']: s#90
[#203 'mat4x3']: s#91
[#203 'mat4x4']: s#92
[#203 'ptr']: s#105
[#203 'sampler']: s#120
[#203 'sampler_comparison']: s#121
[#203 'texture_1d']: s#127
[#203 'texture_2d']: s#128
[#203 'texture_2d_array']: s#129
[#203 'texture_3d']: s#130
[#203 'texture_cube']: s#131
[#203 'texture_cube_array']: s#132
[#203 'texture_depth_2d']: s#122
[#203 'texture_depth_2d_array']: s#123
[#203 'texture_depth_cube']: s#124
[#203 'texture_depth_cube_array']: s#125
[#203 'texture_depth_multisampled_2d']: s#126
[#203 'texture_multisampled_2d']: s#133
[#203 'texture_storage_1d']: s#134
[#203 'texture_storage_2d']: s#135
[#203 'texture_storage_2d_array']: s#136
[#203 'texture_storage_3d']: s#137
[#203 'true']: s#98
[#203 'u32']: s#104
[#203 'vec2']: s#81
[#203 'vec3']: s#82
[#203 'vec4']: s#83
[#203 '~']: s#58
[#203 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#203 /0[fh]/]: s#115
[#203 /0[iu]?/]: s#94
[#203 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#203 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#203 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#203 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#203 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#203 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#203 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#203 /[1-9][0-9]*[fh]/]: s#116
[#203 /[1-9][0-9]*[iu]?/]: s#95
[#204 '!']: s#57
[#204 '&']: s#60
[#204 '(']: s#100
[#204 '*']: s#59
[#204 '-']: s#56
[#204 'array']: s#106
[#204 'bitcast']: s#65
[#204 'bool']: s#73
[#204 'f16']: s#102
[#204 'f32']: s#101
[#204 'false']: s#99
[#204 'i32']: s#103
[#204 'mat2x2']: s#84
[#204 'mat2x3']: s#85
[#204 'mat2x4']: s#86
[#204 'mat3x2']: s#87
[#204 'mat3x3']: s#88
[#204 'mat3x4']: s#89
[#204 'mat4x2']: s#90
[#204 'mat4x3']: s#91
[#204 'mat4x4']: s#92
[#204 'ptr']: s#105
[#204 'sampler']: s#120
[#204 'sampler_comparison']: s#121
[#204 'texture_1d']: s#127
[#204 'texture_2d']: s#128
[#204 'texture_2d_array']: s#129
[#204 'texture_3d']: s#130
[#204 'texture_cube']: s#131
[#204 'texture_cube_array']: s#132
[#204 'texture_depth_2d']: s#122
[#204 'texture_depth_2d_array']: s#123
[#204 'texture_depth_cube']: s#124
[#204 'texture_depth_cube_array']: s#125
[#204 'texture_depth_multisampled_2d']: s#126
[#204 'texture_multisampled_2d']: s#133
[#204 'texture_storage_1d']: s#134
[#204 'texture_storage_2d']: s#135
[#204 'texture_storage_2d_array']: s#136
[#204 'texture_storage_3d']: s#137
[#204 'true']: s#98
[#204 'u32']: s#104
[#204 'vec2']: s#81
[#204 'vec3']: s#82
[#204 'vec4']: s#83
[#204 '~']: s#58
[#204 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#204 /0[fh]/]: s#115
[#204 /0[iu]?/]: s#94
[#204 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#204 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#204 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#204 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#204 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#204 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#204 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#204 /[1-9][0-9]*[fh]/]: s#116
[#204 /[1-9][0-9]*[iu]?/]: s#95
[#205 '!']: r#136
[#205 '&']: r#136
[#205 '(']: r#136
[#205 '*']: r#136
[#205 '-']: r#136
[#205 'array']: r#136
[#205 'bitcast']: r#136
[#205 'bool']: r#136
[#205 'f16']: r#136
[#205 'f32']: r#136
[#205 'false']: r#136
[#205 'i32']: r#136
[#205 'mat2x2']: r#136
[#205 'mat2x3']: r#136
[#205 'mat2x4']: r#136
[#205 'mat3x2']: r#136
[#205 'mat3x3']: r#136
[#205 'mat3x4']: r#136
[#205 'mat4x2']: r#136
[#205 'mat4x3']: r#136
[#205 'mat4x4']: r#136
[#205 'ptr']: r#136
[#205 'sampler']: r#136
[#205 'sampler_comparison']: r#136
[#205 'texture_1d']: r#136
[#205 'texture_2d']: r#136
[#205 'texture_2d_array']: r#136
[#205 'texture_3d']: r#136
[#205 'texture_cube']: r#136
[#205 'texture_cube_array']: r#136
[#205 'texture_depth_2d']: r#136
[#205 'texture_depth_2d_array']: r#136
[#205 'texture_depth_cube']: r#136
[#205 'texture_depth_cube_array']: r#136
[#205 'texture_depth_multisampled_2d']: r#136
[#205 'texture_multisampled_2d']: r#136
[#205 'texture_storage_1d']: r#136
[#205 'texture_storage_2d']: r#136
[#205 'texture_storage_2d_array']: r#136
[#205 'texture_storage_3d']: r#136
[#205 'true']: r#136
[#205 'u32']: r#136
[#205 'vec2']: r#136
[#205 'vec3']: r#136
[#205 'vec4']: r#136
[#205 '~']: r#136
[#205 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#136
[#206 '!']: s#57
[#206 '&']: s#60
[#206 '(']: s#100
[#206 '*']: s#59
[#206 '-']: s#56
[#206 'array']: s#106
[#206 'bitcast']: s#65
[#206 'bool']: s#73
[#206 'f16']: s#102
[#206 'f32']: s#101
[#206 'false']: s#99
[#206 'i32']: s#103
[#206 'mat2x2']: s#84
[#206 'mat2x3']: s#85
[#206 'mat2x4']: s#86
[#206 'mat3x2']: s#87
[#206 'mat3x3']: s#88
[#206 'mat3x4']: s#89
[#206 'mat4x2']: s#90
[#206 'mat4x3']: s#91
[#206 'mat4x4']: s#92
[#206 'ptr']: s#105
[#206 'sampler']: s#120
[#206 'sampler_comparison']: s#121
[#206 'texture_1d']: s#127
[#206 'texture_2d']: s#128
[#206 'texture_2d_array']: s#129
[#206 'texture_3d']: s#130
[#206 'texture_cube']: s#131
[#206 'texture_cube_array']: s#132
[#206 'texture_depth_2d']: s#122
[#206 'texture_depth_2d_array']: s#123
[#206 'texture_depth_cube']: s#124
[#206 'texture_depth_cube_array']: s#125
[#206 'texture_depth_multisampled_2d']: s#126
[#206 'texture_multisampled_2d']: s#133
[#206 'texture_storage_1d']: s#134
[#206 'texture_storage_2d']: s#135
[#206 'texture_storage_2d_array']: s#136
[#206 'texture_storage_3d']: s#137
[#206 'true']: s#98
[#206 'u32']: s#104
[#206 'vec2']: s#81
[#206 'vec3']: s#82
[#206 'vec4']: s#83
[#206 '~']: s#58
[#206 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#206 /0[fh]/]: s#115
[#206 /0[iu]?/]: s#94
[#206 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#206 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#206 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#206 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#206 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#206 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#206 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#206 /[1-9][0-9]*[fh]/]: s#116
[#206 /[1-9][0-9]*[iu]?/]: s#95
[#207 '!']: r#137
[#207 '&']: r#137
[#207 '(']: r#137
[#207 '*']: r#137
[#207 '-']: r#137
[#207 'array']: r#137
[#207 'bitcast']: r#137
[#207 'bool']: r#137
[#207 'f16']: r#137
[#207 'f32']: r#137
[#207 'false']: r#137
[#207 'i32']: r#137
[#207 'mat2x2']: r#137
[#207 'mat2x3']: r#137
[#207 'mat2x4']: r#137
[#207 'mat3x2']: r#137
[#207 'mat3x3']: r#137
[#207 'mat3x4']: r#137
[#207 'mat4x2']: r#137
[#207 'mat4x3']: r#137
[#207 'mat4x4']: r#137
[#207 'ptr']: r#137
[#207 'sampler']: r#137
[#207 'sampler_comparison']: r#137
[#207 'texture_1d']: r#137
[#207 'texture_2d']: r#137
[#207 'texture_2d_array']: r#137
[#207 'texture_3d']: r#137
[#207 'texture_cube']: r#137
[#207 'texture_cube_array']: r#137
[#207 'texture_depth_2d']: r#137
[#207 'texture_depth_2d_array']: r#137
[#207 'texture_depth_cube']: r#137
[#207 'texture_depth_cube_array']: r#137
[#207 'texture_depth_multisampled_2d']: r#137
[#207 'texture_multisampled_2d']: r#137
[#207 'texture_storage_1d']: r#137
[#207 'texture_storage_2d']: r#137
[#207 'texture_storage_2d_array']: r#137
[#207 'texture_storage_3d']: r#137
[#207 'true']: r#137
[#207 'u32']: r#137
[#207 'vec2']: r#137
[#207 'vec3']: r#137
[#207 'vec4']: r#137
[#207 '~']: r#137
[#207 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#137
[#208 '!']: s#57
[#208 '&']: s#60
[#208 '(']: s#100
[#208 '*']: s#59
[#208 '-']: s#56
[#208 'array']: s#106
[#208 'bitcast']: s#65
[#208 'bool']: s#73
[#208 'f16']: s#102
[#208 'f32']: s#101
[#208 'false']: s#99
[#208 'i32']: s#103
[#208 'mat2x2']: s#84
[#208 'mat2x3']: s#85
[#208 'mat2x4']: s#86
[#208 'mat3x2']: s#87
[#208 'mat3x3']: s#88
[#208 'mat3x4']: s#89
[#208 'mat4x2']: s#90
[#208 'mat4x3']: s#91
[#208 'mat4x4']: s#92
[#208 'ptr']: s#105
[#208 'sampler']: s#120
[#208 'sampler_comparison']: s#121
[#208 'texture_1d']: s#127
[#208 'texture_2d']: s#128
[#208 'texture_2d_array']: s#129
[#208 'texture_3d']: s#130
[#208 'texture_cube']: s#131
[#208 'texture_cube_array']: s#132
[#208 'texture_depth_2d']: s#122
[#208 'texture_depth_2d_array']: s#123
[#208 'texture_depth_cube']: s#124
[#208 'texture_depth_cube_array']: s#125
[#208 'texture_depth_multisampled_2d']: s#126
[#208 'texture_multisampled_2d']: s#133
[#208 'texture_storage_1d']: s#134
[#208 'texture_storage_2d']: s#135
[#208 'texture_storage_2d_array']: s#136
[#208 'texture_storage_3d']: s#137
[#208 'true']: s#98
[#208 'u32']: s#104
[#208 'vec2']: s#81
[#208 'vec3']: s#82
[#208 'vec4']: s#83
[#208 '~']: s#58
[#208 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#208 /0[fh]/]: s#115
[#208 /0[iu]?/]: s#94
[#208 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#208 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#208 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#208 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#208 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#208 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#208 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#208 /[1-9][0-9]*[fh]/]: s#116
[#208 /[1-9][0-9]*[iu]?/]: s#95
[#209 '!']: r#138
[#209 '&']: r#138
[#209 '(']: r#138
[#209 '*']: r#138
[#209 '-']: r#138
[#209 'array']: r#138
[#209 'bitcast']: r#138
[#209 'bool']: r#138
[#209 'f16']: r#138
[#209 'f32']: r#138
[#209 'false']: r#138
[#209 'i32']: r#138
[#209 'mat2x2']: r#138
[#209 'mat2x3']: r#138
[#209 'mat2x4']: r#138
[#209 'mat3x2']: r#138
[#209 'mat3x3']: r#138
[#209 'mat3x4']: r#138
[#209 'mat4x2']: r#138
[#209 'mat4x3']: r#138
[#209 'mat4x4']: r#138
[#209 'ptr']: r#138
[#209 'sampler']: r#138
[#209 'sampler_comparison']: r#138
[#209 'texture_1d']: r#138
[#209 'texture_2d']: r#138
[#209 'texture_2d_array']: r#138
[#209 'texture_3d']: r#138
[#209 'texture_cube']: r#138
[#209 'texture_cube_array']: r#138
[#209 'texture_depth_2d']: r#138
[#209 'texture_depth_2d_array']: r#138
[#209 'texture_depth_cube']: r#138
[#209 'texture_depth_cube_array']: r#138
[#209 'texture_depth_multisampled_2d']: r#138
[#209 'texture_multisampled_2d']: r#138
[#209 'texture_storage_1d']: r#138
[#209 'texture_storage_2d']: r#138
[#209 'texture_storage_2d_array']: r#138
[#209 'texture_storage_3d']: r#138
[#209 'true']: r#138
[#209 'u32']: r#138
[#209 'vec2']: r#138
[#209 'vec3']: r#138
[#209 'vec4']: r#138
[#209 '~']: r#138
[#209 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#138
[#210 '!']: s#57
[#210 '&']: s#60
[#210 '(']: s#100
[#210 '*']: s#59
[#210 '-']: s#56
[#210 'array']: s#106
[#210 'bitcast']: s#65
[#210 'bool']: s#73
[#210 'f16']: s#102
[#210 'f32']: s#101
[#210 'false']: s#99
[#210 'i32']: s#103
[#210 'mat2x2']: s#84
[#210 'mat2x3']: s#85
[#210 'mat2x4']: s#86
[#210 'mat3x2']: s#87
[#210 'mat3x3']: s#88
[#210 'mat3x4']: s#89
[#210 'mat4x2']: s#90
[#210 'mat4x3']: s#91
[#210 'mat4x4']: s#92
[#210 'ptr']: s#105
[#210 'sampler']: s#120
[#210 'sampler_comparison']: s#121
[#210 'texture_1d']: s#127
[#210 'texture_2d']: s#128
[#210 'texture_2d_array']: s#129
[#210 'texture_3d']: s#130
[#210 'texture_cube']: s#131
[#210 'texture_cube_array']: s#132
[#210 'texture_depth_2d']: s#122
[#210 'texture_depth_2d_array']: s#123
[#210 'texture_depth_cube']: s#124
[#210 'texture_depth_cube_array']: s#125
[#210 'texture_depth_multisampled_2d']: s#126
[#210 'texture_multisampled_2d']: s#133
[#210 'texture_storage_1d']: s#134
[#210 'texture_storage_2d']: s#135
[#210 'texture_storage_2d_array']: s#136
[#210 'texture_storage_3d']: s#137
[#210 'true']: s#98
[#210 'u32']: s#104
[#210 'vec2']: s#81
[#210 'vec3']: s#82
[#210 'vec4']: s#83
[#210 '~']: s#58
[#210 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#210 /0[fh]/]: s#115
[#210 /0[iu]?/]: s#94
[#210 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#210 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#210 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#210 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#210 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#210 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#210 /[1-9][0-9]*[fh]/]: s#116
[#210 /[1-9][0-9]*[iu]?/]: s#95
[#211 '!']: s#57
[#211 '&']: s#60
[#211 '(']: s#100
[#211 '*']: s#59
[#211 '-']: s#56
[#211 'array']: s#106
[#211 'bitcast']: s#65
[#211 'bool']: s#73
[#211 'f16']: s#102
[#211 'f32']: s#101
[#211 'false']: s#99
[#211 'i32']: s#103
[#211 'mat2x2']: s#84
[#211 'mat2x3']: s#85
[#211 'mat2x4']: s#86
[#211 'mat3x2']: s#87
[#211 'mat3x3']: s#88
[#211 'mat3x4']: s#89
[#211 'mat4x2']: s#90
[#211 'mat4x3']: s#91
[#211 'mat4x4']: s#92
[#211 'ptr']: s#105
[#211 'sampler']: s#120
[#211 'sampler_comparison']: s#121
[#211 'texture_1d']: s#127
[#211 'texture_2d']: s#128
[#211 'texture_2d_array']: s#129
[#211 'texture_3d']: s#130
[#211 'texture_cube']: s#131
[#211 'texture_cube_array']: s#132
[#211 'texture_depth_2d']: s#122
[#211 'texture_depth_2d_array']: s#123
[#211 'texture_depth_cube']: s#124
[#211 'texture_depth_cube_array']: s#125
[#211 'texture_depth_multisampled_2d']: s#126
[#211 'texture_multisampled_2d']: s#133
[#211 'texture_storage_1d']: s#134
[#211 'texture_storage_2d']: s#135
[#211 'texture_storage_2d_array']: s#136
[#211 'texture_storage_3d']: s#137
[#211 'true']: s#98
[#211 'u32']: s#104
[#211 'vec2']: s#81
[#211 'vec3']: s#82
[#211 'vec4']: s#83
[#211 '~']: s#58
[#211 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#211 /0[fh]/]: s#115
[#211 /0[iu]?/]: s#94
[#211 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#211 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#211 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#211 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#211 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#211 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#211 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#211 /[1-9][0-9]*[fh]/]: s#116
[#211 /[1-9][0-9]*[iu]?/]: s#95
[#212 '!']: s#57
[#212 '&']: s#60
[#212 '(']: s#100
[#212 '*']: s#59
[#212 '-']: s#56
[#212 'array']: s#106
[#212 'bitcast']: s#65
[#212 'bool']: s#73
[#212 'f16']: s#102
[#212 'f32']: s#101
[#212 'false']: s#99
[#212 'i32']: s#103
[#212 'mat2x2']: s#84
[#212 'mat2x3']: s#85
[#212 'mat2x4']: s#86
[#212 'mat3x2']: s#87
[#212 'mat3x3']: s#88
[#212 'mat3x4']: s#89
[#212 'mat4x2']: s#90
[#212 'mat4x3']: s#91
[#212 'mat4x4']: s#92
[#212 'ptr']: s#105
[#212 'sampler']: s#120
[#212 'sampler_comparison']: s#121
[#212 'texture_1d']: s#127
[#212 'texture_2d']: s#128
[#212 'texture_2d_array']: s#129
[#212 'texture_3d']: s#130
[#212 'texture_cube']: s#131
[#212 'texture_cube_array']: s#132
[#212 'texture_depth_2d']: s#122
[#212 'texture_depth_2d_array']: s#123
[#212 'texture_depth_cube']: s#124
[#212 'texture_depth_cube_array']: s#125
[#212 'texture_depth_multisampled_2d']: s#126
[#212 'texture_multisampled_2d']: s#133
[#212 'texture_storage_1d']: s#134
[#212 'texture_storage_2d']: s#135
[#212 'texture_storage_2d_array']: s#136
[#212 'texture_storage_3d']: s#137
[#212 'true']: s#98
[#212 'u32']: s#104
[#212 'vec2']: s#81
[#212 'vec3']: s#82
[#212 'vec4']: s#83
[#212 '~']: s#58
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#212 /0[fh]/]: s#115
[#212 /0[iu]?/]: s#94
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#212 /[1-9][0-9]*[fh]/]: s#116
[#212 /[1-9][0-9]*[iu]?/]: s#95
[#213 '!']: s#57
[#213 '&']: s#60
[#213 '(']: s#100
[#213 '*']: s#59
[#213 '-']: s#56
[#213 'array']: s#106
[#213 'bitcast']: s#65
[#213 'bool']: s#73
[#213 'f16']: s#102
[#213 'f32']: s#101
[#213 'false']: s#99
[#213 'i32']: s#103
[#213 'mat2x2']: s#84
[#213 'mat2x3']: s#85
[#213 'mat2x4']: s#86
[#213 'mat3x2']: s#87
[#213 'mat3x3']: s#88
[#213 'mat3x4']: s#89
[#213 'mat4x2']: s#90
[#213 'mat4x3']: s#91
[#213 'mat4x4']: s#92
[#213 'ptr']: s#105
[#213 'sampler']: s#120
[#213 'sampler_comparison']: s#121
[#213 'texture_1d']: s#127
[#213 'texture_2d']: s#128
[#213 'texture_2d_array']: s#129
[#213 'texture_3d']: s#130
[#213 'texture_cube']: s#131
[#213 'texture_cube_array']: s#132
[#213 'texture_depth_2d']: s#122
[#213 'texture_depth_2d_array']: s#123
[#213 'texture_depth_cube']: s#124
[#213 'texture_depth_cube_array']: s#125
[#213 'texture_depth_multisampled_2d']: s#126
[#213 'texture_multisampled_2d']: s#133
[#213 'texture_storage_1d']: s#134
[#213 'texture_storage_2d']: s#135
[#213 'texture_storage_2d_array']: s#136
[#213 'texture_storage_3d']: s#137
[#213 'true']: s#98
[#213 'u32']: s#104
[#213 'vec2']: s#81
[#213 'vec3']: s#82
[#213 'vec4']: s#83
[#213 '~']: s#58
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#213 /0[fh]/]: s#115
[#213 /0[iu]?/]: s#94
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#213 /[1-9][0-9]*[fh]/]: s#116
[#213 /[1-9][0-9]*[iu]?/]: s#95
[#214 '!']: s#57
[#214 '&']: s#60
[#214 '(']: s#100
[#214 '*']: s#59
[#214 '-']: s#56
[#214 'array']: s#106
[#214 'bitcast']: s#65
[#214 'bool']: s#73
[#214 'f16']: s#102
[#214 'f32']: s#101
[#214 'false']: s#99
[#214 'i32']: s#103
[#214 'mat2x2']: s#84
[#214 'mat2x3']: s#85
[#214 'mat2x4']: s#86
[#214 'mat3x2']: s#87
[#214 'mat3x3']: s#88
[#214 'mat3x4']: s#89
[#214 'mat4x2']: s#90
[#214 'mat4x3']: s#91
[#214 'mat4x4']: s#92
[#214 'ptr']: s#105
[#214 'sampler']: s#120
[#214 'sampler_comparison']: s#121
[#214 'texture_1d']: s#127
[#214 'texture_2d']: s#128
[#214 'texture_2d_array']: s#129
[#214 'texture_3d']: s#130
[#214 'texture_cube']: s#131
[#214 'texture_cube_array']: s#132
[#214 'texture_depth_2d']: s#122
[#214 'texture_depth_2d_array']: s#123
[#214 'texture_depth_cube']: s#124
[#214 'texture_depth_cube_array']: s#125
[#214 'texture_depth_multisampled_2d']: s#126
[#214 'texture_multisampled_2d']: s#133
[#214 'texture_storage_1d']: s#134
[#214 'texture_storage_2d']: s#135
[#214 'texture_storage_2d_array']: s#136
[#214 'texture_storage_3d']: s#137
[#214 'true']: s#98
[#214 'u32']: s#104
[#214 'vec2']: s#81
[#214 'vec3']: s#82
[#214 'vec4']: s#83
[#214 '~']: s#58
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#214 /0[fh]/]: s#115
[#214 /0[iu]?/]: s#94
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#214 /[1-9][0-9]*[fh]/]: s#116
[#214 /[1-9][0-9]*[iu]?/]: s#95
[#215 '!']: s#57
[#215 '&']: s#60
[#215 '(']: s#100
[#215 '*']: s#59
[#215 '-']: s#56
[#215 'array']: s#106
[#215 'bitcast']: s#65
[#215 'bool']: s#73
[#215 'f16']: s#102
[#215 'f32']: s#101
[#215 'false']: s#99
[#215 'i32']: s#103
[#215 'mat2x2']: s#84
[#215 'mat2x3']: s#85
[#215 'mat2x4']: s#86
[#215 'mat3x2']: s#87
[#215 'mat3x3']: s#88
[#215 'mat3x4']: s#89
[#215 'mat4x2']: s#90
[#215 'mat4x3']: s#91
[#215 'mat4x4']: s#92
[#215 'ptr']: s#105
[#215 'sampler']: s#120
[#215 'sampler_comparison']: s#121
[#215 'texture_1d']: s#127
[#215 'texture_2d']: s#128
[#215 'texture_2d_array']: s#129
[#215 'texture_3d']: s#130
[#215 'texture_cube']: s#131
[#215 'texture_cube_array']: s#132
[#215 'texture_depth_2d']: s#122
[#215 'texture_depth_2d_array']: s#123
[#215 'texture_depth_cube']: s#124
[#215 'texture_depth_cube_array']: s#125
[#215 'texture_depth_multisampled_2d']: s#126
[#215 'texture_multisampled_2d']: s#133
[#215 'texture_storage_1d']: s#134
[#215 'texture_storage_2d']: s#135
[#215 'texture_storage_2d_array']: s#136
[#215 'texture_storage_3d']: s#137
[#215 'true']: s#98
[#215 'u32']: s#104
[#215 'vec2']: s#81
[#215 'vec3']: s#82
[#215 'vec4']: s#83
[#215 '~']: s#58
[#215 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#215 /0[fh]/]: s#115
[#215 /0[iu]?/]: s#94
[#215 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#215 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#215 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#215 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#215 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#215 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#215 /[1-9][0-9]*[fh]/]: s#116
[#215 /[1-9][0-9]*[iu]?/]: s#95
[#216 '!']: s#57
[#216 '&']: s#60
[#216 '(']: s#100
[#216 '*']: s#59
[#216 '-']: s#56
[#216 'array']: s#106
[#216 'bitcast']: s#65
[#216 'bool']: s#73
[#216 'f16']: s#102
[#216 'f32']: s#101
[#216 'false']: s#99
[#216 'i32']: s#103
[#216 'mat2x2']: s#84
[#216 'mat2x3']: s#85
[#216 'mat2x4']: s#86
[#216 'mat3x2']: s#87
[#216 'mat3x3']: s#88
[#216 'mat3x4']: s#89
[#216 'mat4x2']: s#90
[#216 'mat4x3']: s#91
[#216 'mat4x4']: s#92
[#216 'ptr']: s#105
[#216 'sampler']: s#120
[#216 'sampler_comparison']: s#121
[#216 'texture_1d']: s#127
[#216 'texture_2d']: s#128
[#216 'texture_2d_array']: s#129
[#216 'texture_3d']: s#130
[#216 'texture_cube']: s#131
[#216 'texture_cube_array']: s#132
[#216 'texture_depth_2d']: s#122
[#216 'texture_depth_2d_array']: s#123
[#216 'texture_depth_cube']: s#124
[#216 'texture_depth_cube_array']: s#125
[#216 'texture_depth_multisampled_2d']: s#126
[#216 'texture_multisampled_2d']: s#133
[#216 'texture_storage_1d']: s#134
[#216 'texture_storage_2d']: s#135
[#216 'texture_storage_2d_array']: s#136
[#216 'texture_storage_3d']: s#137
[#216 'true']: s#98
[#216 'u32']: s#104
[#216 'vec2']: s#81
[#216 'vec3']: s#82
[#216 'vec4']: s#83
[#216 '~']: s#58
[#216 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#216 /0[fh]/]: s#115
[#216 /0[iu]?/]: s#94
[#216 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#216 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#216 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#216 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#216 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#216 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#216 /[1-9][0-9]*[fh]/]: s#116
[#216 /[1-9][0-9]*[iu]?/]: s#95
[#217 '!']: r#139
[#217 '&']: r#139
[#217 '(']: r#139
[#217 ')']: r#139
[#217 '*']: r#139
[#217 ',']: r#139
[#217 '-']: r#139
[#217 ';']: r#139
[#217 '=']: r#139
[#217 '>']: r#139
[#217 'array']: r#139
[#217 'bitcast']: r#139
[#217 'bool']: r#139
[#217 'f16']: r#139
[#217 'f32']: r#139
[#217 'false']: r#139
[#217 'i32']: r#139
[#217 'mat2x2']: r#139
[#217 'mat2x3']: r#139
[#217 'mat2x4']: r#139
[#217 'mat3x2']: r#139
[#217 'mat3x3']: r#139
[#217 'mat3x4']: r#139
[#217 'mat4x2']: r#139
[#217 'mat4x3']: r#139
[#217 'mat4x4']: r#139
[#217 'ptr']: r#139
[#217 'sampler']: r#139
[#217 'sampler_comparison']: r#139
[#217 'texture_1d']: r#139
[#217 'texture_2d']: r#139
[#217 'texture_2d_array']: r#139
[#217 'texture_3d']: r#139
[#217 'texture_cube']: r#139
[#217 'texture_cube_array']: r#139
[#217 'texture_depth_2d']: r#139
[#217 'texture_depth_2d_array']: r#139
[#217 'texture_depth_cube']: r#139
[#217 'texture_depth_cube_array']: r#139
[#217 'texture_depth_multisampled_2d']: r#139
[#217 'texture_multisampled_2d']: r#139
[#217 'texture_storage_1d']: r#139
[#217 'texture_storage_2d']: r#139
[#217 'texture_storage_2d_array']: r#139
[#217 'texture_storage_3d']: r#139
[#217 'true']: r#139
[#217 'u32']: r#139
[#217 'vec2']: r#139
[#217 'vec3']: r#139
[#217 'vec4']: r#139
[#217 '{']: r#139
[#217 '}']: r#139
[#217 '~']: r#139
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#139
[#218 '!']: r#140
[#218 '&']: r#140
[#218 '(']: r#140
[#218 '*']: r#140
[#218 '-']: r#140
[#218 'array']: r#140
[#218 'bitcast']: r#140
[#218 'bool']: r#140
[#218 'f16']: r#140
[#218 'f32']: r#140
[#218 'false']: r#140
[#218 'i32']: r#140
[#218 'mat2x2']: r#140
[#218 'mat2x3']: r#140
[#218 'mat2x4']: r#140
[#218 'mat3x2']: r#140
[#218 'mat3x3']: r#140
[#218 'mat3x4']: r#140
[#218 'mat4x2']: r#140
[#218 'mat4x3']: r#140
[#218 'mat4x4']: r#140
[#218 'ptr']: r#140
[#218 'sampler']: r#140
[#218 'sampler_comparison']: r#140
[#218 'texture_1d']: r#140
[#218 'texture_2d']: r#140
[#218 'texture_2d_array']: r#140
[#218 'texture_3d']: r#140
[#218 'texture_cube']: r#140
[#218 'texture_cube_array']: r#140
[#218 'texture_depth_2d']: r#140
[#218 'texture_depth_2d_array']: r#140
[#218 'texture_depth_cube']: r#140
[#218 'texture_depth_cube_array']: r#140
[#218 'texture_depth_multisampled_2d']: r#140
[#218 'texture_multisampled_2d']: r#140
[#218 'texture_storage_1d']: r#140
[#218 'texture_storage_2d']: r#140
[#218 'texture_storage_2d_array']: r#140
[#218 'texture_storage_3d']: r#140
[#218 'true']: r#140
[#218 'u32']: r#140
[#218 'vec2']: r#140
[#218 'vec3']: r#140
[#218 'vec4']: r#140
[#218 '~']: r#140
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#140
[#219 '!']: r#141
[#219 '&']: r#141
[#219 '(']: r#141
[#219 '*']: r#141
[#219 '-']: r#141
[#219 'array']: r#141
[#219 'bitcast']: r#141
[#219 'bool']: r#141
[#219 'f16']: r#141
[#219 'f32']: r#141
[#219 'false']: r#141
[#219 'i32']: r#141
[#219 'mat2x2']: r#141
[#219 'mat2x3']: r#141
[#219 'mat2x4']: r#141
[#219 'mat3x2']: r#141
[#219 'mat3x3']: r#141
[#219 'mat3x4']: r#141
[#219 'mat4x2']: r#141
[#219 'mat4x3']: r#141
[#219 'mat4x4']: r#141
[#219 'ptr']: r#141
[#219 'sampler']: r#141
[#219 'sampler_comparison']: r#141
[#219 'texture_1d']: r#141
[#219 'texture_2d']: r#141
[#219 'texture_2d_array']: r#141
[#219 'texture_3d']: r#141
[#219 'texture_cube']: r#141
[#219 'texture_cube_array']: r#141
[#219 'texture_depth_2d']: r#141
[#219 'texture_depth_2d_array']: r#141
[#219 'texture_depth_cube']: r#141
[#219 'texture_depth_cube_array']: r#141
[#219 'texture_depth_multisampled_2d']: r#141
[#219 'texture_multisampled_2d']: r#141
[#219 'texture_storage_1d']: r#141
[#219 'texture_storage_2d']: r#141
[#219 'texture_storage_2d_array']: r#141
[#219 'texture_storage_3d']: r#141
[#219 'true']: r#141
[#219 'u32']: r#141
[#219 'vec2']: r#141
[#219 'vec3']: r#141
[#219 'vec4']: r#141
[#219 '~']: r#141
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#141
[#220 '!']: r#142
[#220 '&']: r#142
[#220 '(']: r#142
[#220 '*']: r#142
[#220 '-']: r#142
[#220 'array']: r#142
[#220 'bitcast']: r#142
[#220 'bool']: r#142
[#220 'f16']: r#142
[#220 'f32']: r#142
[#220 'false']: r#142
[#220 'i32']: r#142
[#220 'mat2x2']: r#142
[#220 'mat2x3']: r#142
[#220 'mat2x4']: r#142
[#220 'mat3x2']: r#142
[#220 'mat3x3']: r#142
[#220 'mat3x4']: r#142
[#220 'mat4x2']: r#142
[#220 'mat4x3']: r#142
[#220 'mat4x4']: r#142
[#220 'ptr']: r#142
[#220 'sampler']: r#142
[#220 'sampler_comparison']: r#142
[#220 'texture_1d']: r#142
[#220 'texture_2d']: r#142
[#220 'texture_2d_array']: r#142
[#220 'texture_3d']: r#142
[#220 'texture_cube']: r#142
[#220 'texture_cube_array']: r#142
[#220 'texture_depth_2d']: r#142
[#220 'texture_depth_2d_array']: r#142
[#220 'texture_depth_cube']: r#142
[#220 'texture_depth_cube_array']: r#142
[#220 'texture_depth_multisampled_2d']: r#142
[#220 'texture_multisampled_2d']: r#142
[#220 'texture_storage_1d']: r#142
[#220 'texture_storage_2d']: r#142
[#220 'texture_storage_2d_array']: r#142
[#220 'texture_storage_3d']: r#142
[#220 'true']: r#142
[#220 'u32']: r#142
[#220 'vec2']: r#142
[#220 'vec3']: r#142
[#220 'vec4']: r#142
[#220 '~']: r#142
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#142
[#221 '!']: r#143
[#221 '&']: r#143
[#221 '(']: r#143
[#221 '*']: r#143
[#221 '-']: r#143
[#221 'array']: r#143
[#221 'bitcast']: r#143
[#221 'bool']: r#143
[#221 'f16']: r#143
[#221 'f32']: r#143
[#221 'false']: r#143
[#221 'i32']: r#143
[#221 'mat2x2']: r#143
[#221 'mat2x3']: r#143
[#221 'mat2x4']: r#143
[#221 'mat3x2']: r#143
[#221 'mat3x3']: r#143
[#221 'mat3x4']: r#143
[#221 'mat4x2']: r#143
[#221 'mat4x3']: r#143
[#221 'mat4x4']: r#143
[#221 'ptr']: r#143
[#221 'sampler']: r#143
[#221 'sampler_comparison']: r#143
[#221 'texture_1d']: r#143
[#221 'texture_2d']: r#143
[#221 'texture_2d_array']: r#143
[#221 'texture_3d']: r#143
[#221 'texture_cube']: r#143
[#221 'texture_cube_array']: r#143
[#221 'texture_depth_2d']: r#143
[#221 'texture_depth_2d_array']: r#143
[#221 'texture_depth_cube']: r#143
[#221 'texture_depth_cube_array']: r#143
[#221 'texture_depth_multisampled_2d']: r#143
[#221 'texture_multisampled_2d']: r#143
[#221 'texture_storage_1d']: r#143
[#221 'texture_storage_2d']: r#143
[#221 'texture_storage_2d_array']: r#143
[#221 'texture_storage_3d']: r#143
[#221 'true']: r#143
[#221 'u32']: r#143
[#221 'vec2']: r#143
[#221 'vec3']: r#143
[#221 'vec4']: r#143
[#221 '~']: r#143
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#143
[#222 '!']: s#57
[#222 '&']: s#60
[#222 '(']: s#100
[#222 '*']: s#59
[#222 '-']: s#56
[#222 'array']: s#106
[#222 'bitcast']: s#65
[#222 'bool']: s#73
[#222 'f16']: s#102
[#222 'f32']: s#101
[#222 'false']: s#99
[#222 'i32']: s#103
[#222 'mat2x2']: s#84
[#222 'mat2x3']: s#85
[#222 'mat2x4']: s#86
[#222 'mat3x2']: s#87
[#222 'mat3x3']: s#88
[#222 'mat3x4']: s#89
[#222 'mat4x2']: s#90
[#222 'mat4x3']: s#91
[#222 'mat4x4']: s#92
[#222 'ptr']: s#105
[#222 'sampler']: s#120
[#222 'sampler_comparison']: s#121
[#222 'texture_1d']: s#127
[#222 'texture_2d']: s#128
[#222 'texture_2d_array']: s#129
[#222 'texture_3d']: s#130
[#222 'texture_cube']: s#131
[#222 'texture_cube_array']: s#132
[#222 'texture_depth_2d']: s#122
[#222 'texture_depth_2d_array']: s#123
[#222 'texture_depth_cube']: s#124
[#222 'texture_depth_cube_array']: s#125
[#222 'texture_depth_multisampled_2d']: s#126
[#222 'texture_multisampled_2d']: s#133
[#222 'texture_storage_1d']: s#134
[#222 'texture_storage_2d']: s#135
[#222 'texture_storage_2d_array']: s#136
[#222 'texture_storage_3d']: s#137
[#222 'true']: s#98
[#222 'u32']: s#104
[#222 'vec2']: s#81
[#222 'vec3']: s#82
[#222 'vec4']: s#83
[#222 '~']: s#58
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#222 /0[fh]/]: s#115
[#222 /0[iu]?/]: s#94
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#222 /[1-9][0-9]*[fh]/]: s#116
[#222 /[1-9][0-9]*[iu]?/]: s#95
[#223 '!']: r#144
[#223 '&']: r#144
[#223 '(']: r#144
[#223 '*']: r#144
[#223 '-']: r#144
[#223 'array']: r#144
[#223 'bitcast']: r#144
[#223 'bool']: r#144
[#223 'f16']: r#144
[#223 'f32']: r#144
[#223 'false']: r#144
[#223 'i32']: r#144
[#223 'mat2x2']: r#144
[#223 'mat2x3']: r#144
[#223 'mat2x4']: r#144
[#223 'mat3x2']: r#144
[#223 'mat3x3']: r#144
[#223 'mat3x4']: r#144
[#223 'mat4x2']: r#144
[#223 'mat4x3']: r#144
[#223 'mat4x4']: r#144
[#223 'ptr']: r#144
[#223 'sampler']: r#144
[#223 'sampler_comparison']: r#144
[#223 'texture_1d']: r#144
[#223 'texture_2d']: r#144
[#223 'texture_2d_array']: r#144
[#223 'texture_3d']: r#144
[#223 'texture_cube']: r#144
[#223 'texture_cube_array']: r#144
[#223 'texture_depth_2d']: r#144
[#223 'texture_depth_2d_array']: r#144
[#223 'texture_depth_cube']: r#144
[#223 'texture_depth_cube_array']: r#144
[#223 'texture_depth_multisampled_2d']: r#144
[#223 'texture_multisampled_2d']: r#144
[#223 'texture_storage_1d']: r#144
[#223 'texture_storage_2d']: r#144
[#223 'texture_storage_2d_array']: r#144
[#223 'texture_storage_3d']: r#144
[#223 'true']: r#144
[#223 'u32']: r#144
[#223 'vec2']: r#144
[#223 'vec3']: r#144
[#223 'vec4']: r#144
[#223 '~']: r#144
[#223 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#144
[#224 '!']: s#57
[#224 '&']: s#60
[#224 '(']: s#100
[#224 '*']: s#59
[#224 '-']: s#56
[#224 'array']: s#106
[#224 'bitcast']: s#65
[#224 'bool']: s#73
[#224 'f16']: s#102
[#224 'f32']: s#101
[#224 'false']: s#99
[#224 'i32']: s#103
[#224 'mat2x2']: s#84
[#224 'mat2x3']: s#85
[#224 'mat2x4']: s#86
[#224 'mat3x2']: s#87
[#224 'mat3x3']: s#88
[#224 'mat3x4']: s#89
[#224 'mat4x2']: s#90
[#224 'mat4x3']: s#91
[#224 'mat4x4']: s#92
[#224 'ptr']: s#105
[#224 'sampler']: s#120
[#224 'sampler_comparison']: s#121
[#224 'texture_1d']: s#127
[#224 'texture_2d']: s#128
[#224 'texture_2d_array']: s#129
[#224 'texture_3d']: s#130
[#224 'texture_cube']: s#131
[#224 'texture_cube_array']: s#132
[#224 'texture_depth_2d']: s#122
[#224 'texture_depth_2d_array']: s#123
[#224 'texture_depth_cube']: s#124
[#224 'texture_depth_cube_array']: s#125
[#224 'texture_depth_multisampled_2d']: s#126
[#224 'texture_multisampled_2d']: s#133
[#224 'texture_storage_1d']: s#134
[#224 'texture_storage_2d']: s#135
[#224 'texture_storage_2d_array']: s#136
[#224 'texture_storage_3d']: s#137
[#224 'true']: s#98
[#224 'u32']: s#104
[#224 'vec2']: s#81
[#224 'vec3']: s#82
[#224 'vec4']: s#83
[#224 '~']: s#58
[#224 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#224 /0[fh]/]: s#115
[#224 /0[iu]?/]: s#94
[#224 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#224 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#224 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#224 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#224 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#224 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#224 /[1-9][0-9]*[fh]/]: s#116
[#224 /[1-9][0-9]*[iu]?/]: s#95
[#225 '!']: r#145
[#225 '&']: r#145
[#225 '(']: r#145
[#225 '*']: r#145
[#225 '-']: r#145
[#225 'array']: r#145
[#225 'bitcast']: r#145
[#225 'bool']: r#145
[#225 'f16']: r#145
[#225 'f32']: r#145
[#225 'false']: r#145
[#225 'i32']: r#145
[#225 'mat2x2']: r#145
[#225 'mat2x3']: r#145
[#225 'mat2x4']: r#145
[#225 'mat3x2']: r#145
[#225 'mat3x3']: r#145
[#225 'mat3x4']: r#145
[#225 'mat4x2']: r#145
[#225 'mat4x3']: r#145
[#225 'mat4x4']: r#145
[#225 'ptr']: r#145
[#225 'sampler']: r#145
[#225 'sampler_comparison']: r#145
[#225 'texture_1d']: r#145
[#225 'texture_2d']: r#145
[#225 'texture_2d_array']: r#145
[#225 'texture_3d']: r#145
[#225 'texture_cube']: r#145
[#225 'texture_cube_array']: r#145
[#225 'texture_depth_2d']: r#145
[#225 'texture_depth_2d_array']: r#145
[#225 'texture_depth_cube']: r#145
[#225 'texture_depth_cube_array']: r#145
[#225 'texture_depth_multisampled_2d']: r#145
[#225 'texture_multisampled_2d']: r#145
[#225 'texture_storage_1d']: r#145
[#225 'texture_storage_2d']: r#145
[#225 'texture_storage_2d_array']: r#145
[#225 'texture_storage_3d']: r#145
[#225 'true']: r#145
[#225 'u32']: r#145
[#225 'vec2']: r#145
[#225 'vec3']: r#145
[#225 'vec4']: r#145
[#225 '~']: r#145
[#225 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#145
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#226 /0[fh]/]: s#115
[#226 /0[iu]?/]: s#94
[#226 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#226 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#226 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#226 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#226 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#226 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#226 /[1-9][0-9]*[fh]/]: s#116
[#226 /[1-9][0-9]*[iu]?/]: s#95
[#227 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#227 /0[fh]/]: s#115
[#227 /0[iu]?/]: s#94
[#227 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#227 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#227 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#227 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#227 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#227 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#227 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#227 /[1-9][0-9]*[fh]/]: s#116
[#227 /[1-9][0-9]*[iu]?/]: s#95
[#228 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#146
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#229 /0[fh]/]: s#115
[#229 /0[iu]?/]: s#94
[#229 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#229 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#229 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#229 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#229 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#229 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#229 /[1-9][0-9]*[fh]/]: s#116
[#229 /[1-9][0-9]*[iu]?/]: s#95
[#230 ',']: s#350
[#231 ')']: r#147
[#231 ',']: r#147
[#232 ')']: r#148
[#232 ',']: r#148
[#233 ')']: r#149
[#233 ',']: r#149
[#234 ')']: r#150
[#234 ',']: r#150
[#234 ':']: r#150
[#234 ';']: r#150
[#234 ']']: r#150
[#234 '{']: r#150
[#234 '||']: r#151
[#235 '!=']: r#26
[#235 '%']: r#26
[#235 '&&']: r#26
[#235 ')']: r#26
[#235 '*']: r#26
[#235 '+']: r#26
[#235 ',']: r#26
[#235 '-']: r#26
[#235 '/']: r#26
[#235 ':']: r#26
[#235 ';']: r#26
[#235 '<']: r#26
[#235 '<<']: s#201
[#235 '<=']: r#26
[#235 '==']: r#26
[#235 '>']: r#26
[#235 '>=']: r#26
[#235 '>>']: s#202
[#235 ']']: r#26
[#235 '{']: r#26
[#235 '||']: r#26
[#236 '&&']: r#153
[#236 ')']: r#152
[#236 ',']: r#152
[#236 ':']: r#152
[#236 ';']: r#152
[#236 ']']: r#152
[#236 '{']: r#152
[#237 '&&']: r#154
[#237 ')']: r#154
[#237 ',']: r#154
[#237 ':']: r#154
[#237 ';']: r#154
[#237 ']']: r#154
[#237 '{']: r#154
[#237 '||']: r#154
[#238 '&&']: r#155
[#238 ')']: r#155
[#238 ',']: r#155
[#238 ':']: r#155
[#238 ';']: r#155
[#238 ']']: r#155
[#238 '{']: r#155
[#238 '||']: r#155
[#239 '&&']: r#156
[#239 ')']: r#156
[#239 ',']: r#156
[#239 ':']: r#156
[#239 ';']: r#156
[#239 ']']: r#156
[#239 '{']: r#156
[#239 '||']: r#156
[#240 '&&']: r#157
[#240 ')']: r#157
[#240 ',']: r#157
[#240 ':']: r#157
[#240 ';']: r#157
[#240 ']']: r#157
[#240 '{']: r#157
[#240 '||']: r#157
[#241 '&&']: r#158
[#241 ')']: r#158
[#241 ',']: r#158
[#241 ':']: r#158
[#241 ';']: r#158
[#241 ']']: r#158
[#241 '{']: r#158
[#241 '||']: r#158
[#242 '&&']: r#159
[#242 ')']: r#159
[#242 ',']: r#159
[#242 ':']: r#159
[#242 ';']: r#159
[#242 ']']: r#159
[#242 '{']: r#159
[#242 '||']: r#159
[#243 '&']: r#161
[#243 ')']: r#160
[#243 ',']: r#160
[#243 ':']: r#160
[#243 ';']: r#160
[#243 '>']: r#160
[#243 ']']: r#160
[#243 '{']: r#160
[#244 ')']: r#162
[#244 ',']: r#162
[#244 ':']: r#162
[#244 ';']: r#162
[#244 '>']: r#162
[#244 ']']: r#162
[#244 '{']: r#162
[#244 '|']: r#163
[#245 ')']: r#164
[#245 ',']: r#164
[#245 ':']: r#164
[#245 ';']: r#164
[#245 '>']: r#164
[#245 ']']: r#164
[#245 '^']: r#165
[#245 '{']: r#164
[#246 '!=']: r#166
[#246 '%']: s#198
[#246 '&&']: r#166
[#246 ')']: r#166
[#246 '*']: s#59
[#246 '+']: r#166
[#246 ',']: r#166
[#246 '-']: r#166
[#246 '/']: s#197
[#246 ':']: r#166
[#246 ';']: r#166
[#246 '<']: r#166
[#246 '<=']: r#166
[#246 '==']: r#166
[#246 '>']: r#166
[#246 '>=']: r#166
[#246 ']']: r#166
[#246 '{']: r#166
[#246 '||']: r#166
[#247 '!=']: r#26
[#247 '%']: r#26
[#247 '&&']: r#26
[#247 ')']: r#26
[#247 '*']: r#26
[#247 '+']: r#26
[#247 ',']: r#26
[#247 '-']: r#26
[#247 '/']: r#26
[#247 ':']: r#26
[#247 ';']: r#26
[#247 '<']: r#26
[#247 '<=']: r#26
[#247 '==']: r#26
[#247 '>']: r#26
[#247 '>=']: r#26
[#247 ']']: r#26
[#247 '{']: r#26
[#247 '||']: r#26
[#248 '!=']: r#167
[#248 '%']: s#198
[#248 '&&']: r#167
[#248 ')']: r#167
[#248 '*']: s#59
[#248 '+']: r#167
[#248 ',']: r#167
[#248 '-']: r#167
[#248 '/']: s#197
[#248 ':']: r#167
[#248 ';']: r#167
[#248 '<']: r#167
[#248 '<=']: r#167
[#248 '==']: r#167
[#248 '>']: r#167
[#248 '>=']: r#167
[#248 ']']: r#167
[#248 '{']: r#167
[#248 '||']: r#167
[#249 '!=']: r#168
[#249 '&&']: r#168
[#249 ')']: r#168
[#249 ',']: r#168
[#249 ':']: r#168
[#249 ';']: r#168
[#249 '<']: r#168
[#249 '<=']: r#168
[#249 '==']: r#168
[#249 '>']: r#168
[#249 '>=']: r#168
[#249 ']']: r#168
[#249 '{']: r#168
[#249 '||']: r#168
[#250 '!=']: r#169
[#250 '&&']: r#169
[#250 ')']: r#169
[#250 ',']: r#169
[#250 ':']: r#169
[#250 ';']: r#169
[#250 '<']: r#169
[#250 '<=']: r#169
[#250 '==']: r#169
[#250 '>']: r#169
[#250 '>=']: r#169
[#250 ']']: r#169
[#250 '{']: r#169
[#250 '||']: r#169
[#251 '!=']: r#170
[#251 '%']: r#170
[#251 '&&']: r#170
[#251 ')']: r#170
[#251 '*']: r#170
[#251 '+']: r#170
[#251 ',']: r#170
[#251 '-']: r#170
[#251 '/']: r#170
[#251 ':']: r#170
[#251 ';']: r#170
[#251 '<']: r#170
[#251 '<=']: r#170
[#251 '==']: r#170
[#251 '>']: r#170
[#251 '>=']: r#170
[#251 ']']: r#170
[#251 '{']: r#170
[#251 '||']: r#170
[#252 '!=']: r#171
[#252 '%']: r#171
[#252 '&&']: r#171
[#252 ')']: r#171
[#252 '*']: r#171
[#252 '+']: r#171
[#252 ',']: r#171
[#252 '-']: r#171
[#252 '/']: r#171
[#252 ':']: r#171
[#252 ';']: r#171
[#252 '<']: r#171
[#252 '<=']: r#171
[#252 '==']: r#171
[#252 '>']: r#171
[#252 '>=']: r#171
[#252 ']']: r#171
[#252 '{']: r#171
[#252 '||']: r#171
[#253 '!=']: r#172
[#253 '%']: r#172
[#253 '&&']: r#172
[#253 ')']: r#172
[#253 '*']: r#172
[#253 '+']: r#172
[#253 ',']: r#172
[#253 '-']: r#172
[#253 '/']: r#172
[#253 ':']: r#172
[#253 ';']: r#172
[#253 '<']: r#172
[#253 '<=']: r#172
[#253 '==']: r#172
[#253 '>']: r#172
[#253 '>=']: r#172
[#253 ']']: r#172
[#253 '{']: r#172
[#253 '||']: r#172
[#254 '.']: s#188
[#254 '[']: s#187
[#255 ']']: s#437
[#256 ')']: s#265
[#257 '!']: s#57
[#257 '&']: s#60
[#257 '(']: s#100
[#257 '*']: s#59
[#257 '-']: s#56
[#257 'array']: s#106
[#257 'bitcast']: s#65
[#257 'bool']: s#73
[#257 'f16']: s#102
[#257 'f32']: s#101
[#257 'false']: s#99
[#257 'i32']: s#103
[#257 'mat2x2']: s#84
[#257 'mat2x3']: s#85
[#257 'mat2x4']: s#86
[#257 'mat3x2']: s#87
[#257 'mat3x3']: s#88
[#257 'mat3x4']: s#89
[#257 'mat4x2']: s#90
[#257 'mat4x3']: s#91
[#257 'mat4x4']: s#92
[#257 'ptr']: s#105
[#257 'sampler']: s#120
[#257 'sampler_comparison']: s#121
[#257 'texture_1d']: s#127
[#257 'texture_2d']: s#128
[#257 'texture_2d_array']: s#129
[#257 'texture_3d']: s#130
[#257 'texture_cube']: s#131
[#257 'texture_cube_array']: s#132
[#257 'texture_depth_2d']: s#122
[#257 'texture_depth_2d_array']: s#123
[#257 'texture_depth_cube']: s#124
[#257 'texture_depth_cube_array']: s#125
[#257 'texture_depth_multisampled_2d']: s#126
[#257 'texture_multisampled_2d']: s#133
[#257 'texture_storage_1d']: s#134
[#257 'texture_storage_2d']: s#135
[#257 'texture_storage_2d_array']: s#136
[#257 'texture_storage_3d']: s#137
[#257 'true']: s#98
[#257 'u32']: s#104
[#257 'vec2']: s#81
[#257 'vec3']: s#82
[#257 'vec4']: s#83
[#257 '~']: s#58
[#257 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#257 /0[fh]/]: s#115
[#257 /0[iu]?/]: s#94
[#257 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#257 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#257 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#257 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#257 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#257 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#257 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#257 /[1-9][0-9]*[fh]/]: s#116
[#257 /[1-9][0-9]*[iu]?/]: s#95
[#258 '!']: r#173
[#258 '&']: r#173
[#258 '(']: r#173
[#258 '*']: r#173
[#258 '-']: r#173
[#258 'array']: r#173
[#258 'bitcast']: r#173
[#258 'bool']: r#173
[#258 'f16']: r#173
[#258 'f32']: r#173
[#258 'false']: r#173
[#258 'i32']: r#173
[#258 'mat2x2']: r#173
[#258 'mat2x3']: r#173
[#258 'mat2x4']: r#173
[#258 'mat3x2']: r#173
[#258 'mat3x3']: r#173
[#258 'mat3x4']: r#173
[#258 'mat4x2']: r#173
[#258 'mat4x3']: r#173
[#258 'mat4x4']: r#173
[#258 'ptr']: r#173
[#258 'sampler']: r#173
[#258 'sampler_comparison']: r#173
[#258 'texture_1d']: r#173
[#258 'texture_2d']: r#173
[#258 'texture_2d_array']: r#173
[#258 'texture_3d']: r#173
[#258 'texture_cube']: r#173
[#258 'texture_cube_array']: r#173
[#258 'texture_depth_2d']: r#173
[#258 'texture_depth_2d_array']: r#173
[#258 'texture_depth_cube']: r#173
[#258 'texture_depth_cube_array']: r#173
[#258 'texture_depth_multisampled_2d']: r#173
[#258 'texture_multisampled_2d']: r#173
[#258 'texture_storage_1d']: r#173
[#258 'texture_storage_2d']: r#173
[#258 'texture_storage_2d_array']: r#173
[#258 'texture_storage_3d']: r#173
[#258 'true']: r#173
[#258 'u32']: r#173
[#258 'vec2']: r#173
[#258 'vec3']: r#173
[#258 'vec4']: r#173
[#258 '~']: r#173
[#258 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#173
[#259 '!']: s#57
[#259 '&']: s#60
[#259 '(']: s#100
[#259 '*']: s#59
[#259 '-']: s#56
[#259 'array']: s#106
[#259 'bitcast']: s#65
[#259 'bool']: s#73
[#259 'f16']: s#102
[#259 'f32']: s#101
[#259 'false']: s#99
[#259 'i32']: s#103
[#259 'mat2x2']: s#84
[#259 'mat2x3']: s#85
[#259 'mat2x4']: s#86
[#259 'mat3x2']: s#87
[#259 'mat3x3']: s#88
[#259 'mat3x4']: s#89
[#259 'mat4x2']: s#90
[#259 'mat4x3']: s#91
[#259 'mat4x4']: s#92
[#259 'ptr']: s#105
[#259 'sampler']: s#120
[#259 'sampler_comparison']: s#121
[#259 'texture_1d']: s#127
[#259 'texture_2d']: s#128
[#259 'texture_2d_array']: s#129
[#259 'texture_3d']: s#130
[#259 'texture_cube']: s#131
[#259 'texture_cube_array']: s#132
[#259 'texture_depth_2d']: s#122
[#259 'texture_depth_2d_array']: s#123
[#259 'texture_depth_cube']: s#124
[#259 'texture_depth_cube_array']: s#125
[#259 'texture_depth_multisampled_2d']: s#126
[#259 'texture_multisampled_2d']: s#133
[#259 'texture_storage_1d']: s#134
[#259 'texture_storage_2d']: s#135
[#259 'texture_storage_2d_array']: s#136
[#259 'texture_storage_3d']: s#137
[#259 'true']: s#98
[#259 'u32']: s#104
[#259 'vec2']: s#81
[#259 'vec3']: s#82
[#259 'vec4']: s#83
[#259 '~']: s#58
[#259 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#259 /0[fh]/]: s#115
[#259 /0[iu]?/]: s#94
[#259 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#259 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#259 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#259 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#259 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#259 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#259 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#259 /[1-9][0-9]*[fh]/]: s#116
[#259 /[1-9][0-9]*[iu]?/]: s#95
[#260 ',']: s#350
[#261 '>']: s#217
[#262 ')']: r#174
[#262 ',']: r#174
[#262 ';']: r#174
[#262 '=']: r#174
[#262 '>']: r#174
[#262 '{']: r#174
[#262 '}']: r#174
[#263 ')']: r#175
[#263 ',']: r#175
[#263 ';']: r#175
[#263 '=']: r#175
[#263 '>']: r#175
[#263 '{']: r#175
[#263 '}']: r#175
[#264 '!=']: r#176
[#264 '%']: r#176
[#264 '&&']: r#176
[#264 '&']: r#176
[#264 ')']: r#176
[#264 '*']: r#176
[#264 '+']: r#176
[#264 ',']: r#176
[#264 '-']: r#176
[#264 '.']: r#176
[#264 '/']: r#176
[#264 ':']: r#176
[#264 ';']: r#176
[#264 '<']: r#176
[#264 '<<']: r#176
[#264 '<=']: r#176
[#264 '==']: r#176
[#264 '>']: r#176
[#264 '>=']: r#176
[#264 '>>']: r#176
[#264 '[']: r#176
[#264 ']']: r#176
[#264 '^']: r#176
[#264 '{']: r#176
[#264 '|']: r#176
[#264 '||']: r#176
[#265 '!=']: r#177
[#265 '%']: r#177
[#265 '%=']: r#177
[#265 '&&']: r#177
[#265 '&']: r#177
[#265 '&=']: r#177
[#265 ')']: r#177
[#265 '*']: r#177
[#265 '*=']: r#177
[#265 '+']: r#177
[#265 '++']: r#177
[#265 '+=']: r#177
[#265 ',']: r#177
[#265 '-']: r#177
[#265 '--']: r#177
[#265 '-=']: r#177
[#265 '->']: r#177
[#265 '.']: r#177
[#265 '/']: r#177
[#265 '/=']: r#177
[#265 ':']: r#177
[#265 ';']: r#177
[#265 '<']: r#177
[#265 '<<']: r#177
[#265 '<<=']: r#177
[#265 '<=']: r#177
[#265 '=']: r#177
[#265 '==']: r#177
[#265 '>']: r#177
[#265 '>=']: r#177
[#265 '>>']: r#177
[#265 '>>=']: r#177
[#265 '@']: r#177
[#265 '[']: r#177
[#265 ']']: r#177
[#265 '^']: r#177
[#265 '^=']: r#177
[#265 'array']: r#177
[#265 'bool']: r#177
[#265 'f16']: r#177
[#265 'f32']: r#177
[#265 'fn']: r#177
[#265 'i32']: r#177
[#265 'override']: r#177
[#265 'ptr']: r#177
[#265 'sampler']: r#177
[#265 'sampler_comparison']: r#177
[#265 'texture_1d']: r#177
[#265 'texture_2d']: r#177
[#265 'texture_2d_array']: r#177
[#265 'texture_3d']: r#177
[#265 'texture_cube']: r#177
[#265 'texture_cube_array']: r#177
[#265 'texture_depth_2d']: r#177
[#265 'texture_depth_2d_array']: r#177
[#265 'texture_depth_cube']: r#177
[#265 'texture_depth_cube_array']: r#177
[#265 'texture_depth_multisampled_2d']: r#177
[#265 'texture_multisampled_2d']: r#177
[#265 'texture_storage_1d']: r#177
[#265 'texture_storage_2d']: r#177
[#265 'texture_storage_2d_array']: r#177
[#265 'texture_storage_3d']: r#177
[#265 'u32']: r#177
[#265 'var']: r#177
[#265 '{']: r#177
[#265 '|']: r#177
[#265 '|=']: r#177
[#265 '||']: r#177
[#265 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#177
[#266 ',']: s#350
[#267 ',']: r#178
[#267 '>']: r#178
[#268 ',']: r#179
[#268 '>']: r#179
[#269 ',']: r#180
[#269 '>']: r#180
[#270 ',']: r#181
[#270 '>']: r#181
[#271 ',']: r#182
[#271 '>']: r#182
[#272 ',']: s#350
[#273 '>']: s#217
[#274 '>']: s#217
[#275 ',']: s#350
[#276 ',']: r#183
[#277 ',']: r#184
[#278 ',']: r#185
[#279 ',']: r#186
[#280 ',']: r#187
[#281 ',']: r#188
[#282 ',']: r#189
[#283 ',']: r#190
[#284 ',']: r#191
[#285 ',']: r#192
[#286 ',']: r#193
[#287 ',']: r#194
[#288 ',']: r#195
[#289 ',']: r#196
[#290 ',']: r#197
[#291 ',']: r#198
[#292 '}']: s#424
[#293 '}']: r#199
[#294 '&']: s#60
[#294 '*']: s#59
[#294 ';']: s#19
[#294 'break']: s#322
[#294 'const']: s#321
[#294 'continue']: s#323
[#294 'discard']: s#306
[#294 'for']: s#316
[#294 'if']: s#313
[#294 'let']: s#320
[#294 'loop']: s#315
[#294 'return']: s#312
[#294 'staticAssert']: s#26
[#294 'switch']: s#314
[#294 'var']: s#147
[#294 'while']: s#317
[#294 '{']: s#170
[#294 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#295 '&']: r#200
[#295 '(']: r#200
[#295 '*']: r#200
[#295 ';']: r#200
[#295 'break']: r#200
[#295 'const']: r#200
[#295 'continue']: r#200
[#295 'continuing']: r#200
[#295 'discard']: r#200
[#295 'fallthrough']: r#200
[#295 'for']: r#200
[#295 'if']: r#200
[#295 'let']: r#200
[#295 'loop']: r#200
[#295 'return']: r#200
[#295 'staticAssert']: r#200
[#295 'switch']: r#200
[#295 'var']: r#200
[#295 'while']: r#200
[#295 '{']: r#200
[#295 '}']: r#200
[#295 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#200
[#296 ';']: s#19
[#297 '&']: r#201
[#297 '(']: r#201
[#297 '*']: r#201
[#297 ';']: r#201
[#297 'break']: r#201
[#297 'const']: r#201
[#297 'continue']: r#201
[#297 'continuing']: r#201
[#297 'discard']: r#201
[#297 'fallthrough']: r#201
[#297 'for']: r#201
[#297 'if']: r#201
[#297 'let']: r#201
[#297 'loop']: r#201
[#297 'return']: r#201
[#297 'staticAssert']: r#201
[#297 'switch']: r#201
[#297 'var']: r#201
[#297 'while']: r#201
[#297 '{']: r#201
[#297 '}']: r#201
[#297 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#201
[#298 '&']: r#202
[#298 '(']: r#202
[#298 '*']: r#202
[#298 ';']: r#202
[#298 'break']: r#202
[#298 'const']: r#202
[#298 'continue']: r#202
[#298 'continuing']: r#202
[#298 'discard']: r#202
[#298 'fallthrough']: r#202
[#298 'for']: r#202
[#298 'if']: r#202
[#298 'let']: r#202
[#298 'loop']: r#202
[#298 'return']: r#202
[#298 'staticAssert']: r#202
[#298 'switch']: r#202
[#298 'var']: r#202
[#298 'while']: r#202
[#298 '{']: r#202
[#298 '}']: r#202
[#298 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#202
[#299 '&']: r#203
[#299 '(']: r#203
[#299 '*']: r#203
[#299 ';']: r#203
[#299 'break']: r#203
[#299 'const']: r#203
[#299 'continue']: r#203
[#299 'continuing']: r#203
[#299 'discard']: r#203
[#299 'fallthrough']: r#203
[#299 'for']: r#203
[#299 'if']: r#203
[#299 'let']: r#203
[#299 'loop']: r#203
[#299 'return']: r#203
[#299 'staticAssert']: r#203
[#299 'switch']: r#203
[#299 'var']: r#203
[#299 'while']: r#203
[#299 '{']: r#203
[#299 '}']: r#203
[#299 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#203
[#300 '&']: r#204
[#300 '(']: r#204
[#300 '*']: r#204
[#300 ';']: r#204
[#300 'break']: r#204
[#300 'const']: r#204
[#300 'continue']: r#204
[#300 'continuing']: r#204
[#300 'discard']: r#204
[#300 'fallthrough']: r#204
[#300 'for']: r#204
[#300 'if']: r#204
[#300 'let']: r#204
[#300 'loop']: r#204
[#300 'return']: r#204
[#300 'staticAssert']: r#204
[#300 'switch']: r#204
[#300 'var']: r#204
[#300 'while']: r#204
[#300 '{']: r#204
[#300 '}']: r#204
[#300 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#204
[#301 '&']: r#205
[#301 '(']: r#205
[#301 '*']: r#205
[#301 ';']: r#205
[#301 'break']: r#205
[#301 'const']: r#205
[#301 'continue']: r#205
[#301 'continuing']: r#205
[#301 'discard']: r#205
[#301 'fallthrough']: r#205
[#301 'for']: r#205
[#301 'if']: r#205
[#301 'let']: r#205
[#301 'loop']: r#205
[#301 'return']: r#205
[#301 'staticAssert']: r#205
[#301 'switch']: r#205
[#301 'var']: r#205
[#301 'while']: r#205
[#301 '{']: r#205
[#301 '}']: r#205
[#301 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#205
[#302 ';']: s#19
[#303 ';']: s#19
[#304 ';']: s#19
[#305 ';']: s#19
[#306 ';']: s#19
[#307 ';']: s#19
[#308 '&']: r#206
[#308 '(']: r#206
[#308 '*']: r#206
[#308 ';']: r#206
[#308 'break']: r#206
[#308 'const']: r#206
[#308 'continue']: r#206
[#308 'continuing']: r#206
[#308 'discard']: r#206
[#308 'fallthrough']: r#206
[#308 'for']: r#206
[#308 'if']: r#206
[#308 'let']: r#206
[#308 'loop']: r#206
[#308 'return']: r#206
[#308 'staticAssert']: r#206
[#308 'switch']: r#206
[#308 'var']: r#206
[#308 'while']: r#206
[#308 '{']: r#206
[#308 '}']: r#206
[#308 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#206
[#309 ';']: s#19
[#310 ';']: s#19
[#311 ';']: s#19
[#312 '!']: s#57
[#312 '&']: s#60
[#312 '(']: s#100
[#312 '*']: s#59
[#312 '-']: s#56
[#312 'array']: s#106
[#312 'bitcast']: s#65
[#312 'bool']: s#73
[#312 'f16']: s#102
[#312 'f32']: s#101
[#312 'false']: s#99
[#312 'i32']: s#103
[#312 'mat2x2']: s#84
[#312 'mat2x3']: s#85
[#312 'mat2x4']: s#86
[#312 'mat3x2']: s#87
[#312 'mat3x3']: s#88
[#312 'mat3x4']: s#89
[#312 'mat4x2']: s#90
[#312 'mat4x3']: s#91
[#312 'mat4x4']: s#92
[#312 'ptr']: s#105
[#312 'sampler']: s#120
[#312 'sampler_comparison']: s#121
[#312 'texture_1d']: s#127
[#312 'texture_2d']: s#128
[#312 'texture_2d_array']: s#129
[#312 'texture_3d']: s#130
[#312 'texture_cube']: s#131
[#312 'texture_cube_array']: s#132
[#312 'texture_depth_2d']: s#122
[#312 'texture_depth_2d_array']: s#123
[#312 'texture_depth_cube']: s#124
[#312 'texture_depth_cube_array']: s#125
[#312 'texture_depth_multisampled_2d']: s#126
[#312 'texture_multisampled_2d']: s#133
[#312 'texture_storage_1d']: s#134
[#312 'texture_storage_2d']: s#135
[#312 'texture_storage_2d_array']: s#136
[#312 'texture_storage_3d']: s#137
[#312 'true']: s#98
[#312 'u32']: s#104
[#312 'vec2']: s#81
[#312 'vec3']: s#82
[#312 'vec4']: s#83
[#312 '~']: s#58
[#312 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#312 /0[fh]/]: s#115
[#312 /0[iu]?/]: s#94
[#312 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#312 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#312 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#312 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#312 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#312 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#312 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#312 /[1-9][0-9]*[fh]/]: s#116
[#312 /[1-9][0-9]*[iu]?/]: s#95
[#313 '!']: s#57
[#313 '&']: s#60
[#313 '(']: s#100
[#313 '*']: s#59
[#313 '-']: s#56
[#313 'array']: s#106
[#313 'bitcast']: s#65
[#313 'bool']: s#73
[#313 'f16']: s#102
[#313 'f32']: s#101
[#313 'false']: s#99
[#313 'i32']: s#103
[#313 'mat2x2']: s#84
[#313 'mat2x3']: s#85
[#313 'mat2x4']: s#86
[#313 'mat3x2']: s#87
[#313 'mat3x3']: s#88
[#313 'mat3x4']: s#89
[#313 'mat4x2']: s#90
[#313 'mat4x3']: s#91
[#313 'mat4x4']: s#92
[#313 'ptr']: s#105
[#313 'sampler']: s#120
[#313 'sampler_comparison']: s#121
[#313 'texture_1d']: s#127
[#313 'texture_2d']: s#128
[#313 'texture_2d_array']: s#129
[#313 'texture_3d']: s#130
[#313 'texture_cube']: s#131
[#313 'texture_cube_array']: s#132
[#313 'texture_depth_2d']: s#122
[#313 'texture_depth_2d_array']: s#123
[#313 'texture_depth_cube']: s#124
[#313 'texture_depth_cube_array']: s#125
[#313 'texture_depth_multisampled_2d']: s#126
[#313 'texture_multisampled_2d']: s#133
[#313 'texture_storage_1d']: s#134
[#313 'texture_storage_2d']: s#135
[#313 'texture_storage_2d_array']: s#136
[#313 'texture_storage_3d']: s#137
[#313 'true']: s#98
[#313 'u32']: s#104
[#313 'vec2']: s#81
[#313 'vec3']: s#82
[#313 'vec4']: s#83
[#313 '~']: s#58
[#313 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#313 /0[fh]/]: s#115
[#313 /0[iu]?/]: s#94
[#313 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#313 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#313 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#313 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#313 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#313 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#313 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#313 /[1-9][0-9]*[fh]/]: s#116
[#313 /[1-9][0-9]*[iu]?/]: s#95
[#314 '!']: s#57
[#314 '&']: s#60
[#314 '(']: s#100
[#314 '*']: s#59
[#314 '-']: s#56
[#314 'array']: s#106
[#314 'bitcast']: s#65
[#314 'bool']: s#73
[#314 'f16']: s#102
[#314 'f32']: s#101
[#314 'false']: s#99
[#314 'i32']: s#103
[#314 'mat2x2']: s#84
[#314 'mat2x3']: s#85
[#314 'mat2x4']: s#86
[#314 'mat3x2']: s#87
[#314 'mat3x3']: s#88
[#314 'mat3x4']: s#89
[#314 'mat4x2']: s#90
[#314 'mat4x3']: s#91
[#314 'mat4x4']: s#92
[#314 'ptr']: s#105
[#314 'sampler']: s#120
[#314 'sampler_comparison']: s#121
[#314 'texture_1d']: s#127
[#314 'texture_2d']: s#128
[#314 'texture_2d_array']: s#129
[#314 'texture_3d']: s#130
[#314 'texture_cube']: s#131
[#314 'texture_cube_array']: s#132
[#314 'texture_depth_2d']: s#122
[#314 'texture_depth_2d_array']: s#123
[#314 'texture_depth_cube']: s#124
[#314 'texture_depth_cube_array']: s#125
[#314 'texture_depth_multisampled_2d']: s#126
[#314 'texture_multisampled_2d']: s#133
[#314 'texture_storage_1d']: s#134
[#314 'texture_storage_2d']: s#135
[#314 'texture_storage_2d_array']: s#136
[#314 'texture_storage_3d']: s#137
[#314 'true']: s#98
[#314 'u32']: s#104
[#314 'vec2']: s#81
[#314 'vec3']: s#82
[#314 'vec4']: s#83
[#314 '~']: s#58
[#314 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#314 /0[fh]/]: s#115
[#314 /0[iu]?/]: s#94
[#314 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#314 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#314 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#314 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#314 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#314 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#314 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#314 /[1-9][0-9]*[fh]/]: s#116
[#314 /[1-9][0-9]*[iu]?/]: s#95
[#315 '{']: s#170
[#316 '(']: s#100
[#317 '!']: s#57
[#317 '&']: s#60
[#317 '(']: s#100
[#317 '*']: s#59
[#317 '-']: s#56
[#317 'array']: s#106
[#317 'bitcast']: s#65
[#317 'bool']: s#73
[#317 'f16']: s#102
[#317 'f32']: s#101
[#317 'false']: s#99
[#317 'i32']: s#103
[#317 'mat2x2']: s#84
[#317 'mat2x3']: s#85
[#317 'mat2x4']: s#86
[#317 'mat3x2']: s#87
[#317 'mat3x3']: s#88
[#317 'mat3x4']: s#89
[#317 'mat4x2']: s#90
[#317 'mat4x3']: s#91
[#317 'mat4x4']: s#92
[#317 'ptr']: s#105
[#317 'sampler']: s#120
[#317 'sampler_comparison']: s#121
[#317 'texture_1d']: s#127
[#317 'texture_2d']: s#128
[#317 'texture_2d_array']: s#129
[#317 'texture_3d']: s#130
[#317 'texture_cube']: s#131
[#317 'texture_cube_array']: s#132
[#317 'texture_depth_2d']: s#122
[#317 'texture_depth_2d_array']: s#123
[#317 'texture_depth_cube']: s#124
[#317 'texture_depth_cube_array']: s#125
[#317 'texture_depth_multisampled_2d']: s#126
[#317 'texture_multisampled_2d']: s#133
[#317 'texture_storage_1d']: s#134
[#317 'texture_storage_2d']: s#135
[#317 'texture_storage_2d_array']: s#136
[#317 'texture_storage_3d']: s#137
[#317 'true']: s#98
[#317 'u32']: s#104
[#317 'vec2']: s#81
[#317 'vec3']: s#82
[#317 'vec4']: s#83
[#317 '~']: s#58
[#317 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#317 /0[fh]/]: s#115
[#317 /0[iu]?/]: s#94
[#317 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#317 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#317 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#317 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#317 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#317 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#317 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#317 /[1-9][0-9]*[fh]/]: s#116
[#317 /[1-9][0-9]*[iu]?/]: s#95
[#318 '(']: s#100
[#319 ';']: r#207
[#320 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#321 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#322 ';']: r#208
[#323 ';']: r#209
[#324 '%=']: s#392
[#324 '&=']: s#393
[#324 '*=']: s#390
[#324 '++']: s#376
[#324 '+=']: s#388
[#324 '--']: s#377
[#324 '-=']: s#389
[#324 '/=']: s#391
[#324 '<<=']: s#397
[#324 '=']: s#160
[#324 '>>=']: s#396
[#324 '^=']: s#395
[#324 '|=']: s#394
[#325 '(']: s#100
[#325 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#326 '(']: r#210
[#326 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#210
[#327 '&']: s#60
[#327 '*']: s#59
[#328 '&']: r#211
[#328 '(']: r#211
[#328 '*']: r#211
[#328 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#211
[#329 '&']: r#212
[#329 '(']: r#212
[#329 '*']: r#212
[#329 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#212
[#330 '@']: s#32
[#331 '@']: s#32
[#332 '@']: r#213
[#332 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#213
[#333 '@']: s#32
[#334 ',']: s#350
[#335 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#336 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#214
[#337 '@']: s#32
[#338 ';']: r#215
[#339 ';']: r#216
[#340 '!']: s#57
[#340 '&']: s#60
[#340 '(']: s#100
[#340 '*']: s#59
[#340 '-']: s#56
[#340 'array']: s#106
[#340 'bitcast']: s#65
[#340 'bool']: s#73
[#340 'f16']: s#102
[#340 'f32']: s#101
[#340 'false']: s#99
[#340 'i32']: s#103
[#340 'mat2x2']: s#84
[#340 'mat2x3']: s#85
[#340 'mat2x4']: s#86
[#340 'mat3x2']: s#87
[#340 'mat3x3']: s#88
[#340 'mat3x4']: s#89
[#340 'mat4x2']: s#90
[#340 'mat4x3']: s#91
[#340 'mat4x4']: s#92
[#340 'ptr']: s#105
[#340 'sampler']: s#120
[#340 'sampler_comparison']: s#121
[#340 'texture_1d']: s#127
[#340 'texture_2d']: s#128
[#340 'texture_2d_array']: s#129
[#340 'texture_3d']: s#130
[#340 'texture_cube']: s#131
[#340 'texture_cube_array']: s#132
[#340 'texture_depth_2d']: s#122
[#340 'texture_depth_2d_array']: s#123
[#340 'texture_depth_cube']: s#124
[#340 'texture_depth_cube_array']: s#125
[#340 'texture_depth_multisampled_2d']: s#126
[#340 'texture_multisampled_2d']: s#133
[#340 'texture_storage_1d']: s#134
[#340 'texture_storage_2d']: s#135
[#340 'texture_storage_2d_array']: s#136
[#340 'texture_storage_3d']: s#137
[#340 'true']: s#98
[#340 'u32']: s#104
[#340 'vec2']: s#81
[#340 'vec3']: s#82
[#340 'vec4']: s#83
[#340 '~']: s#58
[#340 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#340 /0[fh]/]: s#115
[#340 /0[iu]?/]: s#94
[#340 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#340 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#340 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#340 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#340 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#340 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#340 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#340 /[1-9][0-9]*[fh]/]: s#116
[#340 /[1-9][0-9]*[iu]?/]: s#95
[#341 ';']: r#217
[#342 ')']: r#218
[#342 ',']: r#218
[#342 ';']: r#218
[#342 '=']: r#218
[#342 '}']: r#218
[#343 ';']: r#219
[#344 ',']: s#350
[#345 ';']: r#220
[#345 '=']: r#220
[#346 ':']: s#162
[#346 ';']: r#221
[#346 '=']: r#221
[#347 ';']: r#222
[#347 '=']: r#222
[#348 '>']: s#217
[#349 'read']: s#457
[#349 'read_write']: s#459
[#349 'write']: s#458
[#350 '!']: r#223
[#350 '&']: r#223
[#350 '(']: r#223
[#350 ')']: r#223
[#350 '*']: r#223
[#350 '-']: r#223
[#350 ':']: r#223
[#350 '@']: r#223
[#350 'array']: r#223
[#350 'bitcast']: r#223
[#350 'bool']: r#223
[#350 'f16']: r#223
[#350 'f32']: r#223
[#350 'false']: r#223
[#350 'i32']: r#223
[#350 'mat2x2']: r#223
[#350 'mat2x3']: r#223
[#350 'mat2x4']: r#223
[#350 'mat3x2']: r#223
[#350 'mat3x3']: r#223
[#350 'mat3x4']: r#223
[#350 'mat4x2']: r#223
[#350 'mat4x3']: r#223
[#350 'mat4x4']: r#223
[#350 'ptr']: r#223
[#350 'sampler']: r#223
[#350 'sampler_comparison']: r#223
[#350 'texture_1d']: r#223
[#350 'texture_2d']: r#223
[#350 'texture_2d_array']: r#223
[#350 'texture_3d']: r#223
[#350 'texture_cube']: r#223
[#350 'texture_cube_array']: r#223
[#350 'texture_depth_2d']: r#223
[#350 'texture_depth_2d_array']: r#223
[#350 'texture_depth_cube']: r#223
[#350 'texture_depth_cube_array']: r#223
[#350 'texture_depth_multisampled_2d']: r#223
[#350 'texture_multisampled_2d']: r#223
[#350 'texture_storage_1d']: r#223
[#350 'texture_storage_2d']: r#223
[#350 'texture_storage_2d_array']: r#223
[#350 'texture_storage_3d']: r#223
[#350 'true']: r#223
[#350 'u32']: r#223
[#350 'vec2']: r#223
[#350 'vec3']: r#223
[#350 'vec4']: r#223
[#350 '{']: r#223
[#350 '}']: r#223
[#350 '~']: r#223
[#350 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#223
[#351 ';']: r#224
[#352 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#225
[#353 ',']: r#226
[#353 '}']: r#226
[#354 ':']: s#162
[#355 '@']: r#227
[#355 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#227
[#356 '@']: r#228
[#356 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#228
[#357 ',']: s#350
[#358 ')']: s#265
[#359 ')']: r#229
[#360 '@']: s#32
[#361 '@']: r#230
[#361 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#230
[#362 '@']: s#32
[#363 ',']: s#350
[#364 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#365 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#231
[#366 '@']: s#32
[#367 '(']: r#232
[#367 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#232
[#368 '.']: s#188
[#368 '[']: s#187
[#369 '%=']: r#233
[#369 '&=']: r#233
[#369 ')']: r#233
[#369 '*=']: r#233
[#369 '++']: r#233
[#369 '+=']: r#233
[#369 '--']: r#233
[#369 '-=']: r#233
[#369 '.']: r#233
[#369 '/=']: r#233
[#369 '<<=']: r#233
[#369 '=']: r#233
[#369 '>>=']: r#233
[#369 '[']: r#233
[#369 '^=']: r#233
[#369 '|=']: r#233
[#370 '&']: s#60
[#370 '*']: s#59
[#371 '!']: s#57
[#371 '&']: s#60
[#371 '(']: s#100
[#371 '*']: s#59
[#371 '-']: s#56
[#371 'array']: s#106
[#371 'bitcast']: s#65
[#371 'bool']: s#73
[#371 'f16']: s#102
[#371 'f32']: s#101
[#371 'false']: s#99
[#371 'i32']: s#103
[#371 'mat2x2']: s#84
[#371 'mat2x3']: s#85
[#371 'mat2x4']: s#86
[#371 'mat3x2']: s#87
[#371 'mat3x3']: s#88
[#371 'mat3x4']: s#89
[#371 'mat4x2']: s#90
[#371 'mat4x3']: s#91
[#371 'mat4x4']: s#92
[#371 'ptr']: s#105
[#371 'sampler']: s#120
[#371 'sampler_comparison']: s#121
[#371 'texture_1d']: s#127
[#371 'texture_2d']: s#128
[#371 'texture_2d_array']: s#129
[#371 'texture_3d']: s#130
[#371 'texture_cube']: s#131
[#371 'texture_cube_array']: s#132
[#371 'texture_depth_2d']: s#122
[#371 'texture_depth_2d_array']: s#123
[#371 'texture_depth_cube']: s#124
[#371 'texture_depth_cube_array']: s#125
[#371 'texture_depth_multisampled_2d']: s#126
[#371 'texture_multisampled_2d']: s#133
[#371 'texture_storage_1d']: s#134
[#371 'texture_storage_2d']: s#135
[#371 'texture_storage_2d_array']: s#136
[#371 'texture_storage_3d']: s#137
[#371 'true']: s#98
[#371 'u32']: s#104
[#371 'vec2']: s#81
[#371 'vec3']: s#82
[#371 'vec4']: s#83
[#371 '~']: s#58
[#371 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#371 /0[fh]/]: s#115
[#371 /0[iu]?/]: s#94
[#371 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#371 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#371 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#371 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#371 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#371 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#371 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#371 /[1-9][0-9]*[fh]/]: s#116
[#371 /[1-9][0-9]*[iu]?/]: s#95
[#372 ')']: r#234
[#372 ';']: r#234
[#373 ')']: r#235
[#373 ';']: r#235
[#374 '!']: r#236
[#374 '&']: r#236
[#374 '(']: r#236
[#374 '*']: r#236
[#374 '-']: r#236
[#374 'array']: r#236
[#374 'bitcast']: r#236
[#374 'bool']: r#236
[#374 'f16']: r#236
[#374 'f32']: r#236
[#374 'false']: r#236
[#374 'i32']: r#236
[#374 'mat2x2']: r#236
[#374 'mat2x3']: r#236
[#374 'mat2x4']: r#236
[#374 'mat3x2']: r#236
[#374 'mat3x3']: r#236
[#374 'mat3x4']: r#236
[#374 'mat4x2']: r#236
[#374 'mat4x3']: r#236
[#374 'mat4x4']: r#236
[#374 'ptr']: r#236
[#374 'sampler']: r#236
[#374 'sampler_comparison']: r#236
[#374 'texture_1d']: r#236
[#374 'texture_2d']: r#236
[#374 'texture_2d_array']: r#236
[#374 'texture_3d']: r#236
[#374 'texture_cube']: r#236
[#374 'texture_cube_array']: r#236
[#374 'texture_depth_2d']: r#236
[#374 'texture_depth_2d_array']: r#236
[#374 'texture_depth_cube']: r#236
[#374 'texture_depth_cube_array']: r#236
[#374 'texture_depth_multisampled_2d']: r#236
[#374 'texture_multisampled_2d']: r#236
[#374 'texture_storage_1d']: r#236
[#374 'texture_storage_2d']: r#236
[#374 'texture_storage_2d_array']: r#236
[#374 'texture_storage_3d']: r#236
[#374 'true']: r#236
[#374 'u32']: r#236
[#374 'vec2']: r#236
[#374 'vec3']: r#236
[#374 'vec4']: r#236
[#374 '~']: r#236
[#374 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#236
[#375 '!']: r#237
[#375 '&']: r#237
[#375 '(']: r#237
[#375 '*']: r#237
[#375 '-']: r#237
[#375 'array']: r#237
[#375 'bitcast']: r#237
[#375 'bool']: r#237
[#375 'f16']: r#237
[#375 'f32']: r#237
[#375 'false']: r#237
[#375 'i32']: r#237
[#375 'mat2x2']: r#237
[#375 'mat2x3']: r#237
[#375 'mat2x4']: r#237
[#375 'mat3x2']: r#237
[#375 'mat3x3']: r#237
[#375 'mat3x4']: r#237
[#375 'mat4x2']: r#237
[#375 'mat4x3']: r#237
[#375 'mat4x4']: r#237
[#375 'ptr']: r#237
[#375 'sampler']: r#237
[#375 'sampler_comparison']: r#237
[#375 'texture_1d']: r#237
[#375 'texture_2d']: r#237
[#375 'texture_2d_array']: r#237
[#375 'texture_3d']: r#237
[#375 'texture_cube']: r#237
[#375 'texture_cube_array']: r#237
[#375 'texture_depth_2d']: r#237
[#375 'texture_depth_2d_array']: r#237
[#375 'texture_depth_cube']: r#237
[#375 'texture_depth_cube_array']: r#237
[#375 'texture_depth_multisampled_2d']: r#237
[#375 'texture_multisampled_2d']: r#237
[#375 'texture_storage_1d']: r#237
[#375 'texture_storage_2d']: r#237
[#375 'texture_storage_2d_array']: r#237
[#375 'texture_storage_3d']: r#237
[#375 'true']: r#237
[#375 'u32']: r#237
[#375 'vec2']: r#237
[#375 'vec3']: r#237
[#375 'vec4']: r#237
[#375 '~']: r#237
[#375 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#237
[#376 ')']: r#238
[#376 ';']: r#238
[#377 ')']: r#239
[#377 ';']: r#239
[#378 '!']: r#240
[#378 '&']: r#240
[#378 '(']: r#240
[#378 '*']: r#240
[#378 '-']: r#240
[#378 'array']: r#240
[#378 'bitcast']: r#240
[#378 'bool']: r#240
[#378 'f16']: r#240
[#378 'f32']: r#240
[#378 'false']: r#240
[#378 'i32']: r#240
[#378 'mat2x2']: r#240
[#378 'mat2x3']: r#240
[#378 'mat2x4']: r#240
[#378 'mat3x2']: r#240
[#378 'mat3x3']: r#240
[#378 'mat3x4']: r#240
[#378 'mat4x2']: r#240
[#378 'mat4x3']: r#240
[#378 'mat4x4']: r#240
[#378 'ptr']: r#240
[#378 'sampler']: r#240
[#378 'sampler_comparison']: r#240
[#378 'texture_1d']: r#240
[#378 'texture_2d']: r#240
[#378 'texture_2d_array']: r#240
[#378 'texture_3d']: r#240
[#378 'texture_cube']: r#240
[#378 'texture_cube_array']: r#240
[#378 'texture_depth_2d']: r#240
[#378 'texture_depth_2d_array']: r#240
[#378 'texture_depth_cube']: r#240
[#378 'texture_depth_cube_array']: r#240
[#378 'texture_depth_multisampled_2d']: r#240
[#378 'texture_multisampled_2d']: r#240
[#378 'texture_storage_1d']: r#240
[#378 'texture_storage_2d']: r#240
[#378 'texture_storage_2d_array']: r#240
[#378 'texture_storage_3d']: r#240
[#378 'true']: r#240
[#378 'u32']: r#240
[#378 'vec2']: r#240
[#378 'vec3']: r#240
[#378 'vec4']: r#240
[#378 '~']: r#240
[#378 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#240
[#379 '!']: r#241
[#379 '&']: r#241
[#379 '(']: r#241
[#379 '*']: r#241
[#379 '-']: r#241
[#379 'array']: r#241
[#379 'bitcast']: r#241
[#379 'bool']: r#241
[#379 'f16']: r#241
[#379 'f32']: r#241
[#379 'false']: r#241
[#379 'i32']: r#241
[#379 'mat2x2']: r#241
[#379 'mat2x3']: r#241
[#379 'mat2x4']: r#241
[#379 'mat3x2']: r#241
[#379 'mat3x3']: r#241
[#379 'mat3x4']: r#241
[#379 'mat4x2']: r#241
[#379 'mat4x3']: r#241
[#379 'mat4x4']: r#241
[#379 'ptr']: r#241
[#379 'sampler']: r#241
[#379 'sampler_comparison']: r#241
[#379 'texture_1d']: r#241
[#379 'texture_2d']: r#241
[#379 'texture_2d_array']: r#241
[#379 'texture_3d']: r#241
[#379 'texture_cube']: r#241
[#379 'texture_cube_array']: r#241
[#379 'texture_depth_2d']: r#241
[#379 'texture_depth_2d_array']: r#241
[#379 'texture_depth_cube']: r#241
[#379 'texture_depth_cube_array']: r#241
[#379 'texture_depth_multisampled_2d']: r#241
[#379 'texture_multisampled_2d']: r#241
[#379 'texture_storage_1d']: r#241
[#379 'texture_storage_2d']: r#241
[#379 'texture_storage_2d_array']: r#241
[#379 'texture_storage_3d']: r#241
[#379 'true']: r#241
[#379 'u32']: r#241
[#379 'vec2']: r#241
[#379 'vec3']: r#241
[#379 'vec4']: r#241
[#379 '~']: r#241
[#379 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#241
[#380 '!']: r#242
[#380 '&']: r#242
[#380 '(']: r#242
[#380 '*']: r#242
[#380 '-']: r#242
[#380 'array']: r#242
[#380 'bitcast']: r#242
[#380 'bool']: r#242
[#380 'f16']: r#242
[#380 'f32']: r#242
[#380 'false']: r#242
[#380 'i32']: r#242
[#380 'mat2x2']: r#242
[#380 'mat2x3']: r#242
[#380 'mat2x4']: r#242
[#380 'mat3x2']: r#242
[#380 'mat3x3']: r#242
[#380 'mat3x4']: r#242
[#380 'mat4x2']: r#242
[#380 'mat4x3']: r#242
[#380 'mat4x4']: r#242
[#380 'ptr']: r#242
[#380 'sampler']: r#242
[#380 'sampler_comparison']: r#242
[#380 'texture_1d']: r#242
[#380 'texture_2d']: r#242
[#380 'texture_2d_array']: r#242
[#380 'texture_3d']: r#242
[#380 'texture_cube']: r#242
[#380 'texture_cube_array']: r#242
[#380 'texture_depth_2d']: r#242
[#380 'texture_depth_2d_array']: r#242
[#380 'texture_depth_cube']: r#242
[#380 'texture_depth_cube_array']: r#242
[#380 'texture_depth_multisampled_2d']: r#242
[#380 'texture_multisampled_2d']: r#242
[#380 'texture_storage_1d']: r#242
[#380 'texture_storage_2d']: r#242
[#380 'texture_storage_2d_array']: r#242
[#380 'texture_storage_3d']: r#242
[#380 'true']: r#242
[#380 'u32']: r#242
[#380 'vec2']: r#242
[#380 'vec3']: r#242
[#380 'vec4']: r#242
[#380 '~']: r#242
[#380 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#242
[#381 '!']: r#243
[#381 '&']: r#243
[#381 '(']: r#243
[#381 '*']: r#243
[#381 '-']: r#243
[#381 'array']: r#243
[#381 'bitcast']: r#243
[#381 'bool']: r#243
[#381 'f16']: r#243
[#381 'f32']: r#243
[#381 'false']: r#243
[#381 'i32']: r#243
[#381 'mat2x2']: r#243
[#381 'mat2x3']: r#243
[#381 'mat2x4']: r#243
[#381 'mat3x2']: r#243
[#381 'mat3x3']: r#243
[#381 'mat3x4']: r#243
[#381 'mat4x2']: r#243
[#381 'mat4x3']: r#243
[#381 'mat4x4']: r#243
[#381 'ptr']: r#243
[#381 'sampler']: r#243
[#381 'sampler_comparison']: r#243
[#381 'texture_1d']: r#243
[#381 'texture_2d']: r#243
[#381 'texture_2d_array']: r#243
[#381 'texture_3d']: r#243
[#381 'texture_cube']: r#243
[#381 'texture_cube_array']: r#243
[#381 'texture_depth_2d']: r#243
[#381 'texture_depth_2d_array']: r#243
[#381 'texture_depth_cube']: r#243
[#381 'texture_depth_cube_array']: r#243
[#381 'texture_depth_multisampled_2d']: r#243
[#381 'texture_multisampled_2d']: r#243
[#381 'texture_storage_1d']: r#243
[#381 'texture_storage_2d']: r#243
[#381 'texture_storage_2d_array']: r#243
[#381 'texture_storage_3d']: r#243
[#381 'true']: r#243
[#381 'u32']: r#243
[#381 'vec2']: r#243
[#381 'vec3']: r#243
[#381 'vec4']: r#243
[#381 '~']: r#243
[#381 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#243
[#382 '!']: r#244
[#382 '&']: r#244
[#382 '(']: r#244
[#382 '*']: r#244
[#382 '-']: r#244
[#382 'array']: r#244
[#382 'bitcast']: r#244
[#382 'bool']: r#244
[#382 'f16']: r#244
[#382 'f32']: r#244
[#382 'false']: r#244
[#382 'i32']: r#244
[#382 'mat2x2']: r#244
[#382 'mat2x3']: r#244
[#382 'mat2x4']: r#244
[#382 'mat3x2']: r#244
[#382 'mat3x3']: r#244
[#382 'mat3x4']: r#244
[#382 'mat4x2']: r#244
[#382 'mat4x3']: r#244
[#382 'mat4x4']: r#244
[#382 'ptr']: r#244
[#382 'sampler']: r#244
[#382 'sampler_comparison']: r#244
[#382 'texture_1d']: r#244
[#382 'texture_2d']: r#244
[#382 'texture_2d_array']: r#244
[#382 'texture_3d']: r#244
[#382 'texture_cube']: r#244
[#382 'texture_cube_array']: r#244
[#382 'texture_depth_2d']: r#244
[#382 'texture_depth_2d_array']: r#244
[#382 'texture_depth_cube']: r#244
[#382 'texture_depth_cube_array']: r#244
[#382 'texture_depth_multisampled_2d']: r#244
[#382 'texture_multisampled_2d']: r#244
[#382 'texture_storage_1d']: r#244
[#382 'texture_storage_2d']: r#244
[#382 'texture_storage_2d_array']: r#244
[#382 'texture_storage_3d']: r#244
[#382 'true']: r#244
[#382 'u32']: r#244
[#382 'vec2']: r#244
[#382 'vec3']: r#244
[#382 'vec4']: r#244
[#382 '~']: r#244
[#382 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#244
[#383 '!']: r#245
[#383 '&']: r#245
[#383 '(']: r#245
[#383 '*']: r#245
[#383 '-']: r#245
[#383 'array']: r#245
[#383 'bitcast']: r#245
[#383 'bool']: r#245
[#383 'f16']: r#245
[#383 'f32']: r#245
[#383 'false']: r#245
[#383 'i32']: r#245
[#383 'mat2x2']: r#245
[#383 'mat2x3']: r#245
[#383 'mat2x4']: r#245
[#383 'mat3x2']: r#245
[#383 'mat3x3']: r#245
[#383 'mat3x4']: r#245
[#383 'mat4x2']: r#245
[#383 'mat4x3']: r#245
[#383 'mat4x4']: r#245
[#383 'ptr']: r#245
[#383 'sampler']: r#245
[#383 'sampler_comparison']: r#245
[#383 'texture_1d']: r#245
[#383 'texture_2d']: r#245
[#383 'texture_2d_array']: r#245
[#383 'texture_3d']: r#245
[#383 'texture_cube']: r#245
[#383 'texture_cube_array']: r#245
[#383 'texture_depth_2d']: r#245
[#383 'texture_depth_2d_array']: r#245
[#383 'texture_depth_cube']: r#245
[#383 'texture_depth_cube_array']: r#245
[#383 'texture_depth_multisampled_2d']: r#245
[#383 'texture_multisampled_2d']: r#245
[#383 'texture_storage_1d']: r#245
[#383 'texture_storage_2d']: r#245
[#383 'texture_storage_2d_array']: r#245
[#383 'texture_storage_3d']: r#245
[#383 'true']: r#245
[#383 'u32']: r#245
[#383 'vec2']: r#245
[#383 'vec3']: r#245
[#383 'vec4']: r#245
[#383 '~']: r#245
[#383 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#245
[#384 '!']: r#246
[#384 '&']: r#246
[#384 '(']: r#246
[#384 '*']: r#246
[#384 '-']: r#246
[#384 'array']: r#246
[#384 'bitcast']: r#246
[#384 'bool']: r#246
[#384 'f16']: r#246
[#384 'f32']: r#246
[#384 'false']: r#246
[#384 'i32']: r#246
[#384 'mat2x2']: r#246
[#384 'mat2x3']: r#246
[#384 'mat2x4']: r#246
[#384 'mat3x2']: r#246
[#384 'mat3x3']: r#246
[#384 'mat3x4']: r#246
[#384 'mat4x2']: r#246
[#384 'mat4x3']: r#246
[#384 'mat4x4']: r#246
[#384 'ptr']: r#246
[#384 'sampler']: r#246
[#384 'sampler_comparison']: r#246
[#384 'texture_1d']: r#246
[#384 'texture_2d']: r#246
[#384 'texture_2d_array']: r#246
[#384 'texture_3d']: r#246
[#384 'texture_cube']: r#246
[#384 'texture_cube_array']: r#246
[#384 'texture_depth_2d']: r#246
[#384 'texture_depth_2d_array']: r#246
[#384 'texture_depth_cube']: r#246
[#384 'texture_depth_cube_array']: r#246
[#384 'texture_depth_multisampled_2d']: r#246
[#384 'texture_multisampled_2d']: r#246
[#384 'texture_storage_1d']: r#246
[#384 'texture_storage_2d']: r#246
[#384 'texture_storage_2d_array']: r#246
[#384 'texture_storage_3d']: r#246
[#384 'true']: r#246
[#384 'u32']: r#246
[#384 'vec2']: r#246
[#384 'vec3']: r#246
[#384 'vec4']: r#246
[#384 '~']: r#246
[#384 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#246
[#385 '!']: r#247
[#385 '&']: r#247
[#385 '(']: r#247
[#385 '*']: r#247
[#385 '-']: r#247
[#385 'array']: r#247
[#385 'bitcast']: r#247
[#385 'bool']: r#247
[#385 'f16']: r#247
[#385 'f32']: r#247
[#385 'false']: r#247
[#385 'i32']: r#247
[#385 'mat2x2']: r#247
[#385 'mat2x3']: r#247
[#385 'mat2x4']: r#247
[#385 'mat3x2']: r#247
[#385 'mat3x3']: r#247
[#385 'mat3x4']: r#247
[#385 'mat4x2']: r#247
[#385 'mat4x3']: r#247
[#385 'mat4x4']: r#247
[#385 'ptr']: r#247
[#385 'sampler']: r#247
[#385 'sampler_comparison']: r#247
[#385 'texture_1d']: r#247
[#385 'texture_2d']: r#247
[#385 'texture_2d_array']: r#247
[#385 'texture_3d']: r#247
[#385 'texture_cube']: r#247
[#385 'texture_cube_array']: r#247
[#385 'texture_depth_2d']: r#247
[#385 'texture_depth_2d_array']: r#247
[#385 'texture_depth_cube']: r#247
[#385 'texture_depth_cube_array']: r#247
[#385 'texture_depth_multisampled_2d']: r#247
[#385 'texture_multisampled_2d']: r#247
[#385 'texture_storage_1d']: r#247
[#385 'texture_storage_2d']: r#247
[#385 'texture_storage_2d_array']: r#247
[#385 'texture_storage_3d']: r#247
[#385 'true']: r#247
[#385 'u32']: r#247
[#385 'vec2']: r#247
[#385 'vec3']: r#247
[#385 'vec4']: r#247
[#385 '~']: r#247
[#385 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#247
[#386 '!']: r#248
[#386 '&']: r#248
[#386 '(']: r#248
[#386 '*']: r#248
[#386 '-']: r#248
[#386 'array']: r#248
[#386 'bitcast']: r#248
[#386 'bool']: r#248
[#386 'f16']: r#248
[#386 'f32']: r#248
[#386 'false']: r#248
[#386 'i32']: r#248
[#386 'mat2x2']: r#248
[#386 'mat2x3']: r#248
[#386 'mat2x4']: r#248
[#386 'mat3x2']: r#248
[#386 'mat3x3']: r#248
[#386 'mat3x4']: r#248
[#386 'mat4x2']: r#248
[#386 'mat4x3']: r#248
[#386 'mat4x4']: r#248
[#386 'ptr']: r#248
[#386 'sampler']: r#248
[#386 'sampler_comparison']: r#248
[#386 'texture_1d']: r#248
[#386 'texture_2d']: r#248
[#386 'texture_2d_array']: r#248
[#386 'texture_3d']: r#248
[#386 'texture_cube']: r#248
[#386 'texture_cube_array']: r#248
[#386 'texture_depth_2d']: r#248
[#386 'texture_depth_2d_array']: r#248
[#386 'texture_depth_cube']: r#248
[#386 'texture_depth_cube_array']: r#248
[#386 'texture_depth_multisampled_2d']: r#248
[#386 'texture_multisampled_2d']: r#248
[#386 'texture_storage_1d']: r#248
[#386 'texture_storage_2d']: r#248
[#386 'texture_storage_2d_array']: r#248
[#386 'texture_storage_3d']: r#248
[#386 'true']: r#248
[#386 'u32']: r#248
[#386 'vec2']: r#248
[#386 'vec3']: r#248
[#386 'vec4']: r#248
[#386 '~']: r#248
[#386 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#248
[#387 '!']: r#249
[#387 '&']: r#249
[#387 '(']: r#249
[#387 '*']: r#249
[#387 '-']: r#249
[#387 'array']: r#249
[#387 'bitcast']: r#249
[#387 'bool']: r#249
[#387 'f16']: r#249
[#387 'f32']: r#249
[#387 'false']: r#249
[#387 'i32']: r#249
[#387 'mat2x2']: r#249
[#387 'mat2x3']: r#249
[#387 'mat2x4']: r#249
[#387 'mat3x2']: r#249
[#387 'mat3x3']: r#249
[#387 'mat3x4']: r#249
[#387 'mat4x2']: r#249
[#387 'mat4x3']: r#249
[#387 'mat4x4']: r#249
[#387 'ptr']: r#249
[#387 'sampler']: r#249
[#387 'sampler_comparison']: r#249
[#387 'texture_1d']: r#249
[#387 'texture_2d']: r#249
[#387 'texture_2d_array']: r#249
[#387 'texture_3d']: r#249
[#387 'texture_cube']: r#249
[#387 'texture_cube_array']: r#249
[#387 'texture_depth_2d']: r#249
[#387 'texture_depth_2d_array']: r#249
[#387 'texture_depth_cube']: r#249
[#387 'texture_depth_cube_array']: r#249
[#387 'texture_depth_multisampled_2d']: r#249
[#387 'texture_multisampled_2d']: r#249
[#387 'texture_storage_1d']: r#249
[#387 'texture_storage_2d']: r#249
[#387 'texture_storage_2d_array']: r#249
[#387 'texture_storage_3d']: r#249
[#387 'true']: r#249
[#387 'u32']: r#249
[#387 'vec2']: r#249
[#387 'vec3']: r#249
[#387 'vec4']: r#249
[#387 '~']: r#249
[#387 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#249
[#388 '!']: r#250
[#388 '&']: r#250
[#388 '(']: r#250
[#388 '*']: r#250
[#388 '-']: r#250
[#388 'array']: r#250
[#388 'bitcast']: r#250
[#388 'bool']: r#250
[#388 'f16']: r#250
[#388 'f32']: r#250
[#388 'false']: r#250
[#388 'i32']: r#250
[#388 'mat2x2']: r#250
[#388 'mat2x3']: r#250
[#388 'mat2x4']: r#250
[#388 'mat3x2']: r#250
[#388 'mat3x3']: r#250
[#388 'mat3x4']: r#250
[#388 'mat4x2']: r#250
[#388 'mat4x3']: r#250
[#388 'mat4x4']: r#250
[#388 'ptr']: r#250
[#388 'sampler']: r#250
[#388 'sampler_comparison']: r#250
[#388 'texture_1d']: r#250
[#388 'texture_2d']: r#250
[#388 'texture_2d_array']: r#250
[#388 'texture_3d']: r#250
[#388 'texture_cube']: r#250
[#388 'texture_cube_array']: r#250
[#388 'texture_depth_2d']: r#250
[#388 'texture_depth_2d_array']: r#250
[#388 'texture_depth_cube']: r#250
[#388 'texture_depth_cube_array']: r#250
[#388 'texture_depth_multisampled_2d']: r#250
[#388 'texture_multisampled_2d']: r#250
[#388 'texture_storage_1d']: r#250
[#388 'texture_storage_2d']: r#250
[#388 'texture_storage_2d_array']: r#250
[#388 'texture_storage_3d']: r#250
[#388 'true']: r#250
[#388 'u32']: r#250
[#388 'vec2']: r#250
[#388 'vec3']: r#250
[#388 'vec4']: r#250
[#388 '~']: r#250
[#388 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#250
[#389 '!']: r#251
[#389 '&']: r#251
[#389 '(']: r#251
[#389 '*']: r#251
[#389 '-']: r#251
[#389 'array']: r#251
[#389 'bitcast']: r#251
[#389 'bool']: r#251
[#389 'f16']: r#251
[#389 'f32']: r#251
[#389 'false']: r#251
[#389 'i32']: r#251
[#389 'mat2x2']: r#251
[#389 'mat2x3']: r#251
[#389 'mat2x4']: r#251
[#389 'mat3x2']: r#251
[#389 'mat3x3']: r#251
[#389 'mat3x4']: r#251
[#389 'mat4x2']: r#251
[#389 'mat4x3']: r#251
[#389 'mat4x4']: r#251
[#389 'ptr']: r#251
[#389 'sampler']: r#251
[#389 'sampler_comparison']: r#251
[#389 'texture_1d']: r#251
[#389 'texture_2d']: r#251
[#389 'texture_2d_array']: r#251
[#389 'texture_3d']: r#251
[#389 'texture_cube']: r#251
[#389 'texture_cube_array']: r#251
[#389 'texture_depth_2d']: r#251
[#389 'texture_depth_2d_array']: r#251
[#389 'texture_depth_cube']: r#251
[#389 'texture_depth_cube_array']: r#251
[#389 'texture_depth_multisampled_2d']: r#251
[#389 'texture_multisampled_2d']: r#251
[#389 'texture_storage_1d']: r#251
[#389 'texture_storage_2d']: r#251
[#389 'texture_storage_2d_array']: r#251
[#389 'texture_storage_3d']: r#251
[#389 'true']: r#251
[#389 'u32']: r#251
[#389 'vec2']: r#251
[#389 'vec3']: r#251
[#389 'vec4']: r#251
[#389 '~']: r#251
[#389 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#251
[#390 '!']: r#252
[#390 '&']: r#252
[#390 '(']: r#252
[#390 '*']: r#252
[#390 '-']: r#252
[#390 'array']: r#252
[#390 'bitcast']: r#252
[#390 'bool']: r#252
[#390 'f16']: r#252
[#390 'f32']: r#252
[#390 'false']: r#252
[#390 'i32']: r#252
[#390 'mat2x2']: r#252
[#390 'mat2x3']: r#252
[#390 'mat2x4']: r#252
[#390 'mat3x2']: r#252
[#390 'mat3x3']: r#252
[#390 'mat3x4']: r#252
[#390 'mat4x2']: r#252
[#390 'mat4x3']: r#252
[#390 'mat4x4']: r#252
[#390 'ptr']: r#252
[#390 'sampler']: r#252
[#390 'sampler_comparison']: r#252
[#390 'texture_1d']: r#252
[#390 'texture_2d']: r#252
[#390 'texture_2d_array']: r#252
[#390 'texture_3d']: r#252
[#390 'texture_cube']: r#252
[#390 'texture_cube_array']: r#252
[#390 'texture_depth_2d']: r#252
[#390 'texture_depth_2d_array']: r#252
[#390 'texture_depth_cube']: r#252
[#390 'texture_depth_cube_array']: r#252
[#390 'texture_depth_multisampled_2d']: r#252
[#390 'texture_multisampled_2d']: r#252
[#390 'texture_storage_1d']: r#252
[#390 'texture_storage_2d']: r#252
[#390 'texture_storage_2d_array']: r#252
[#390 'texture_storage_3d']: r#252
[#390 'true']: r#252
[#390 'u32']: r#252
[#390 'vec2']: r#252
[#390 'vec3']: r#252
[#390 'vec4']: r#252
[#390 '~']: r#252
[#390 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#252
[#391 '!']: r#253
[#391 '&']: r#253
[#391 '(']: r#253
[#391 '*']: r#253
[#391 '-']: r#253
[#391 'array']: r#253
[#391 'bitcast']: r#253
[#391 'bool']: r#253
[#391 'f16']: r#253
[#391 'f32']: r#253
[#391 'false']: r#253
[#391 'i32']: r#253
[#391 'mat2x2']: r#253
[#391 'mat2x3']: r#253
[#391 'mat2x4']: r#253
[#391 'mat3x2']: r#253
[#391 'mat3x3']: r#253
[#391 'mat3x4']: r#253
[#391 'mat4x2']: r#253
[#391 'mat4x3']: r#253
[#391 'mat4x4']: r#253
[#391 'ptr']: r#253
[#391 'sampler']: r#253
[#391 'sampler_comparison']: r#253
[#391 'texture_1d']: r#253
[#391 'texture_2d']: r#253
[#391 'texture_2d_array']: r#253
[#391 'texture_3d']: r#253
[#391 'texture_cube']: r#253
[#391 'texture_cube_array']: r#253
[#391 'texture_depth_2d']: r#253
[#391 'texture_depth_2d_array']: r#253
[#391 'texture_depth_cube']: r#253
[#391 'texture_depth_cube_array']: r#253
[#391 'texture_depth_multisampled_2d']: r#253
[#391 'texture_multisampled_2d']: r#253
[#391 'texture_storage_1d']: r#253
[#391 'texture_storage_2d']: r#253
[#391 'texture_storage_2d_array']: r#253
[#391 'texture_storage_3d']: r#253
[#391 'true']: r#253
[#391 'u32']: r#253
[#391 'vec2']: r#253
[#391 'vec3']: r#253
[#391 'vec4']: r#253
[#391 '~']: r#253
[#391 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#253
[#392 '!']: r#254
[#392 '&']: r#254
[#392 '(']: r#254
[#392 '*']: r#254
[#392 '-']: r#254
[#392 'array']: r#254
[#392 'bitcast']: r#254
[#392 'bool']: r#254
[#392 'f16']: r#254
[#392 'f32']: r#254
[#392 'false']: r#254
[#392 'i32']: r#254
[#392 'mat2x2']: r#254
[#392 'mat2x3']: r#254
[#392 'mat2x4']: r#254
[#392 'mat3x2']: r#254
[#392 'mat3x3']: r#254
[#392 'mat3x4']: r#254
[#392 'mat4x2']: r#254
[#392 'mat4x3']: r#254
[#392 'mat4x4']: r#254
[#392 'ptr']: r#254
[#392 'sampler']: r#254
[#392 'sampler_comparison']: r#254
[#392 'texture_1d']: r#254
[#392 'texture_2d']: r#254
[#392 'texture_2d_array']: r#254
[#392 'texture_3d']: r#254
[#392 'texture_cube']: r#254
[#392 'texture_cube_array']: r#254
[#392 'texture_depth_2d']: r#254
[#392 'texture_depth_2d_array']: r#254
[#392 'texture_depth_cube']: r#254
[#392 'texture_depth_cube_array']: r#254
[#392 'texture_depth_multisampled_2d']: r#254
[#392 'texture_multisampled_2d']: r#254
[#392 'texture_storage_1d']: r#254
[#392 'texture_storage_2d']: r#254
[#392 'texture_storage_2d_array']: r#254
[#392 'texture_storage_3d']: r#254
[#392 'true']: r#254
[#392 'u32']: r#254
[#392 'vec2']: r#254
[#392 'vec3']: r#254
[#392 'vec4']: r#254
[#392 '~']: r#254
[#392 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#254
[#393 '!']: r#255
[#393 '&']: r#255
[#393 '(']: r#255
[#393 '*']: r#255
[#393 '-']: r#255
[#393 'array']: r#255
[#393 'bitcast']: r#255
[#393 'bool']: r#255
[#393 'f16']: r#255
[#393 'f32']: r#255
[#393 'false']: r#255
[#393 'i32']: r#255
[#393 'mat2x2']: r#255
[#393 'mat2x3']: r#255
[#393 'mat2x4']: r#255
[#393 'mat3x2']: r#255
[#393 'mat3x3']: r#255
[#393 'mat3x4']: r#255
[#393 'mat4x2']: r#255
[#393 'mat4x3']: r#255
[#393 'mat4x4']: r#255
[#393 'ptr']: r#255
[#393 'sampler']: r#255
[#393 'sampler_comparison']: r#255
[#393 'texture_1d']: r#255
[#393 'texture_2d']: r#255
[#393 'texture_2d_array']: r#255
[#393 'texture_3d']: r#255
[#393 'texture_cube']: r#255
[#393 'texture_cube_array']: r#255
[#393 'texture_depth_2d']: r#255
[#393 'texture_depth_2d_array']: r#255
[#393 'texture_depth_cube']: r#255
[#393 'texture_depth_cube_array']: r#255
[#393 'texture_depth_multisampled_2d']: r#255
[#393 'texture_multisampled_2d']: r#255
[#393 'texture_storage_1d']: r#255
[#393 'texture_storage_2d']: r#255
[#393 'texture_storage_2d_array']: r#255
[#393 'texture_storage_3d']: r#255
[#393 'true']: r#255
[#393 'u32']: r#255
[#393 'vec2']: r#255
[#393 'vec3']: r#255
[#393 'vec4']: r#255
[#393 '~']: r#255
[#393 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#255
[#394 '!']: r#256
[#394 '&']: r#256
[#394 '(']: r#256
[#394 '*']: r#256
[#394 '-']: r#256
[#394 'array']: r#256
[#394 'bitcast']: r#256
[#394 'bool']: r#256
[#394 'f16']: r#256
[#394 'f32']: r#256
[#394 'false']: r#256
[#394 'i32']: r#256
[#394 'mat2x2']: r#256
[#394 'mat2x3']: r#256
[#394 'mat2x4']: r#256
[#394 'mat3x2']: r#256
[#394 'mat3x3']: r#256
[#394 'mat3x4']: r#256
[#394 'mat4x2']: r#256
[#394 'mat4x3']: r#256
[#394 'mat4x4']: r#256
[#394 'ptr']: r#256
[#394 'sampler']: r#256
[#394 'sampler_comparison']: r#256
[#394 'texture_1d']: r#256
[#394 'texture_2d']: r#256
[#394 'texture_2d_array']: r#256
[#394 'texture_3d']: r#256
[#394 'texture_cube']: r#256
[#394 'texture_cube_array']: r#256
[#394 'texture_depth_2d']: r#256
[#394 'texture_depth_2d_array']: r#256
[#394 'texture_depth_cube']: r#256
[#394 'texture_depth_cube_array']: r#256
[#394 'texture_depth_multisampled_2d']: r#256
[#394 'texture_multisampled_2d']: r#256
[#394 'texture_storage_1d']: r#256
[#394 'texture_storage_2d']: r#256
[#394 'texture_storage_2d_array']: r#256
[#394 'texture_storage_3d']: r#256
[#394 'true']: r#256
[#394 'u32']: r#256
[#394 'vec2']: r#256
[#394 'vec3']: r#256
[#394 'vec4']: r#256
[#394 '~']: r#256
[#394 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#256
[#395 '!']: r#257
[#395 '&']: r#257
[#395 '(']: r#257
[#395 '*']: r#257
[#395 '-']: r#257
[#395 'array']: r#257
[#395 'bitcast']: r#257
[#395 'bool']: r#257
[#395 'f16']: r#257
[#395 'f32']: r#257
[#395 'false']: r#257
[#395 'i32']: r#257
[#395 'mat2x2']: r#257
[#395 'mat2x3']: r#257
[#395 'mat2x4']: r#257
[#395 'mat3x2']: r#257
[#395 'mat3x3']: r#257
[#395 'mat3x4']: r#257
[#395 'mat4x2']: r#257
[#395 'mat4x3']: r#257
[#395 'mat4x4']: r#257
[#395 'ptr']: r#257
[#395 'sampler']: r#257
[#395 'sampler_comparison']: r#257
[#395 'texture_1d']: r#257
[#395 'texture_2d']: r#257
[#395 'texture_2d_array']: r#257
[#395 'texture_3d']: r#257
[#395 'texture_cube']: r#257
[#395 'texture_cube_array']: r#257
[#395 'texture_depth_2d']: r#257
[#395 'texture_depth_2d_array']: r#257
[#395 'texture_depth_cube']: r#257
[#395 'texture_depth_cube_array']: r#257
[#395 'texture_depth_multisampled_2d']: r#257
[#395 'texture_multisampled_2d']: r#257
[#395 'texture_storage_1d']: r#257
[#395 'texture_storage_2d']: r#257
[#395 'texture_storage_2d_array']: r#257
[#395 'texture_storage_3d']: r#257
[#395 'true']: r#257
[#395 'u32']: r#257
[#395 'vec2']: r#257
[#395 'vec3']: r#257
[#395 'vec4']: r#257
[#395 '~']: r#257
[#395 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#257
[#396 '!']: r#258
[#396 '&']: r#258
[#396 '(']: r#258
[#396 '*']: r#258
[#396 '-']: r#258
[#396 'array']: r#258
[#396 'bitcast']: r#258
[#396 'bool']: r#258
[#396 'f16']: r#258
[#396 'f32']: r#258
[#396 'false']: r#258
[#396 'i32']: r#258
[#396 'mat2x2']: r#258
[#396 'mat2x3']: r#258
[#396 'mat2x4']: r#258
[#396 'mat3x2']: r#258
[#396 'mat3x3']: r#258
[#396 'mat3x4']: r#258
[#396 'mat4x2']: r#258
[#396 'mat4x3']: r#258
[#396 'mat4x4']: r#258
[#396 'ptr']: r#258
[#396 'sampler']: r#258
[#396 'sampler_comparison']: r#258
[#396 'texture_1d']: r#258
[#396 'texture_2d']: r#258
[#396 'texture_2d_array']: r#258
[#396 'texture_3d']: r#258
[#396 'texture_cube']: r#258
[#396 'texture_cube_array']: r#258
[#396 'texture_depth_2d']: r#258
[#396 'texture_depth_2d_array']: r#258
[#396 'texture_depth_cube']: r#258
[#396 'texture_depth_cube_array']: r#258
[#396 'texture_depth_multisampled_2d']: r#258
[#396 'texture_multisampled_2d']: r#258
[#396 'texture_storage_1d']: r#258
[#396 'texture_storage_2d']: r#258
[#396 'texture_storage_2d_array']: r#258
[#396 'texture_storage_3d']: r#258
[#396 'true']: r#258
[#396 'u32']: r#258
[#396 'vec2']: r#258
[#396 'vec3']: r#258
[#396 'vec4']: r#258
[#396 '~']: r#258
[#396 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#258
[#397 '!']: r#259
[#397 '&']: r#259
[#397 '(']: r#259
[#397 '*']: r#259
[#397 '-']: r#259
[#397 'array']: r#259
[#397 'bitcast']: r#259
[#397 'bool']: r#259
[#397 'f16']: r#259
[#397 'f32']: r#259
[#397 'false']: r#259
[#397 'i32']: r#259
[#397 'mat2x2']: r#259
[#397 'mat2x3']: r#259
[#397 'mat2x4']: r#259
[#397 'mat3x2']: r#259
[#397 'mat3x3']: r#259
[#397 'mat3x4']: r#259
[#397 'mat4x2']: r#259
[#397 'mat4x3']: r#259
[#397 'mat4x4']: r#259
[#397 'ptr']: r#259
[#397 'sampler']: r#259
[#397 'sampler_comparison']: r#259
[#397 'texture_1d']: r#259
[#397 'texture_2d']: r#259
[#397 'texture_2d_array']: r#259
[#397 'texture_3d']: r#259
[#397 'texture_cube']: r#259
[#397 'texture_cube_array']: r#259
[#397 'texture_depth_2d']: r#259
[#397 'texture_depth_2d_array']: r#259
[#397 'texture_depth_cube']: r#259
[#397 'texture_depth_cube_array']: r#259
[#397 'texture_depth_multisampled_2d']: r#259
[#397 'texture_multisampled_2d']: r#259
[#397 'texture_storage_1d']: r#259
[#397 'texture_storage_2d']: r#259
[#397 'texture_storage_2d_array']: r#259
[#397 'texture_storage_3d']: r#259
[#397 'true']: r#259
[#397 'u32']: r#259
[#397 'vec2']: r#259
[#397 'vec3']: r#259
[#397 'vec4']: r#259
[#397 '~']: r#259
[#397 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#259
[#398 '=']: s#160
[#399 ':']: s#162
[#399 '=']: r#260
[#400 '=']: r#261
[#401 '=']: s#160
[#402 ':']: s#162
[#402 '=']: r#262
[#403 '=']: r#263
[#404 ')']: r#264
[#404 ';']: r#264
[#405 '{']: s#170
[#406 '&']: s#60
[#406 '*']: s#59
[#406 'const']: s#321
[#406 'let']: s#320
[#406 'var']: s#147
[#406 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#407 '&']: s#60
[#407 '*']: s#59
[#407 ';']: s#19
[#407 'break']: s#322
[#407 'const']: s#321
[#407 'continue']: s#323
[#407 'discard']: s#306
[#407 'for']: s#316
[#407 'if']: s#313
[#407 'let']: s#320
[#407 'loop']: s#315
[#407 'return']: s#312
[#407 'staticAssert']: s#26
[#407 'switch']: s#314
[#407 'var']: s#147
[#407 'while']: s#317
[#407 '{']: s#170
[#407 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#408 '{']: s#170
[#409 '{']: s#170
[#410 ';']: r#265
[#411 ';']: r#266
[#412 '&']: r#267
[#412 '(']: r#267
[#412 '*']: r#267
[#412 ';']: r#267
[#412 'break']: r#267
[#412 'const']: r#267
[#412 'continue']: r#267
[#412 'continuing']: r#267
[#412 'discard']: r#267
[#412 'fallthrough']: r#267
[#412 'for']: r#267
[#412 'if']: r#267
[#412 'let']: r#267
[#412 'loop']: r#267
[#412 'return']: r#267
[#412 'staticAssert']: r#267
[#412 'switch']: r#267
[#412 'var']: r#267
[#412 'while']: r#267
[#412 '{']: r#267
[#412 '}']: r#267
[#412 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#267
[#413 '&']: r#268
[#413 '(']: r#268
[#413 '*']: r#268
[#413 ';']: r#268
[#413 'break']: r#268
[#413 'const']: r#268
[#413 'continue']: r#268
[#413 'continuing']: r#268
[#413 'discard']: r#268
[#413 'fallthrough']: r#268
[#413 'for']: r#268
[#413 'if']: r#268
[#413 'let']: r#268
[#413 'loop']: r#268
[#413 'return']: r#268
[#413 'staticAssert']: r#268
[#413 'switch']: r#268
[#413 'var']: r#268
[#413 'while']: r#268
[#413 '{']: r#268
[#413 '}']: r#268
[#413 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#268
[#414 '&']: r#269
[#414 '(']: r#269
[#414 '*']: r#269
[#414 ';']: r#269
[#414 'break']: r#269
[#414 'const']: r#269
[#414 'continue']: r#269
[#414 'continuing']: r#269
[#414 'discard']: r#269
[#414 'fallthrough']: r#269
[#414 'for']: r#269
[#414 'if']: r#269
[#414 'let']: r#269
[#414 'loop']: r#269
[#414 'return']: r#269
[#414 'staticAssert']: r#269
[#414 'switch']: r#269
[#414 'var']: r#269
[#414 'while']: r#269
[#414 '{']: r#269
[#414 '}']: r#269
[#414 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#269
[#415 '&']: r#270
[#415 '(']: r#270
[#415 '*']: r#270
[#415 ';']: r#270
[#415 'break']: r#270
[#415 'const']: r#270
[#415 'continue']: r#270
[#415 'continuing']: r#270
[#415 'discard']: r#270
[#415 'fallthrough']: r#270
[#415 'for']: r#270
[#415 'if']: r#270
[#415 'let']: r#270
[#415 'loop']: r#270
[#415 'return']: r#270
[#415 'staticAssert']: r#270
[#415 'switch']: r#270
[#415 'var']: r#270
[#415 'while']: r#270
[#415 '{']: r#270
[#415 '}']: r#270
[#415 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#270
[#416 '&']: r#271
[#416 '(']: r#271
[#416 '*']: r#271
[#416 ';']: r#271
[#416 'break']: r#271
[#416 'const']: r#271
[#416 'continue']: r#271
[#416 'continuing']: r#271
[#416 'discard']: r#271
[#416 'fallthrough']: r#271
[#416 'for']: r#271
[#416 'if']: r#271
[#416 'let']: r#271
[#416 'loop']: r#271
[#416 'return']: r#271
[#416 'staticAssert']: r#271
[#416 'switch']: r#271
[#416 'var']: r#271
[#416 'while']: r#271
[#416 '{']: r#271
[#416 '}']: r#271
[#416 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#271
[#417 '&']: r#272
[#417 '(']: r#272
[#417 '*']: r#272
[#417 ';']: r#272
[#417 'break']: r#272
[#417 'const']: r#272
[#417 'continue']: r#272
[#417 'continuing']: r#272
[#417 'discard']: r#272
[#417 'fallthrough']: r#272
[#417 'for']: r#272
[#417 'if']: r#272
[#417 'let']: r#272
[#417 'loop']: r#272
[#417 'return']: r#272
[#417 'staticAssert']: r#272
[#417 'switch']: r#272
[#417 'var']: r#272
[#417 'while']: r#272
[#417 '{']: r#272
[#417 '}']: r#272
[#417 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#272
[#418 '&']: r#273
[#418 '(']: r#273
[#418 '*']: r#273
[#418 ';']: r#273
[#418 'break']: r#273
[#418 'const']: r#273
[#418 'continue']: r#273
[#418 'continuing']: r#273
[#418 'discard']: r#273
[#418 'fallthrough']: r#273
[#418 'for']: r#273
[#418 'if']: r#273
[#418 'let']: r#273
[#418 'loop']: r#273
[#418 'return']: r#273
[#418 'staticAssert']: r#273
[#418 'switch']: r#273
[#418 'var']: r#273
[#418 'while']: r#273
[#418 '{']: r#273
[#418 '}']: r#273
[#418 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#273
[#419 '&']: r#274
[#419 '(']: r#274
[#419 '*']: r#274
[#419 ';']: r#274
[#419 'break']: r#274
[#419 'const']: r#274
[#419 'continue']: r#274
[#419 'continuing']: r#274
[#419 'discard']: r#274
[#419 'fallthrough']: r#274
[#419 'for']: r#274
[#419 'if']: r#274
[#419 'let']: r#274
[#419 'loop']: r#274
[#419 'return']: r#274
[#419 'staticAssert']: r#274
[#419 'switch']: r#274
[#419 'var']: r#274
[#419 'while']: r#274
[#419 '{']: r#274
[#419 '}']: r#274
[#419 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#274
[#420 '&']: r#275
[#420 '(']: r#275
[#420 '*']: r#275
[#420 ';']: r#275
[#420 'break']: r#275
[#420 'const']: r#275
[#420 'continue']: r#275
[#420 'continuing']: r#275
[#420 'discard']: r#275
[#420 'fallthrough']: r#275
[#420 'for']: r#275
[#420 'if']: r#275
[#420 'let']: r#275
[#420 'loop']: r#275
[#420 'return']: r#275
[#420 'staticAssert']: r#275
[#420 'switch']: r#275
[#420 'var']: r#275
[#420 'while']: r#275
[#420 '{']: r#275
[#420 '}']: r#275
[#420 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#275
[#421 '&']: r#276
[#421 '(']: r#276
[#421 '*']: r#276
[#421 ';']: r#276
[#421 'break']: r#276
[#421 'const']: r#276
[#421 'continue']: r#276
[#421 'continuing']: r#276
[#421 'discard']: r#276
[#421 'fallthrough']: r#276
[#421 'for']: r#276
[#421 'if']: r#276
[#421 'let']: r#276
[#421 'loop']: r#276
[#421 'return']: r#276
[#421 'staticAssert']: r#276
[#421 'switch']: r#276
[#421 'var']: r#276
[#421 'while']: r#276
[#421 '{']: r#276
[#421 '}']: r#276
[#421 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#276
[#422 '}']: r#277
[#423 '&']: r#278
[#423 '(']: r#278
[#423 '*']: r#278
[#423 ';']: r#278
[#423 '@']: r#278
[#423 'break']: r#278
[#423 'const']: r#278
[#423 'continue']: r#278
[#423 'continuing']: r#278
[#423 'discard']: r#278
[#423 'else']: r#278
[#423 'fallthrough']: r#278
[#423 'fn']: r#278
[#423 'for']: r#278
[#423 'if']: r#278
[#423 'let']: r#278
[#423 'loop']: r#278
[#423 'override']: r#278
[#423 'return']: r#278
[#423 'staticAssert']: r#278
[#423 'struct']: r#278
[#423 'switch']: r#278
[#423 'type']: r#278
[#423 'var']: r#278
[#423 'while']: r#278
[#423 '{']: r#278
[#423 '}']: r#278
[#423 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#278
[#423 EndOfText]: r#278
[#424 '&']: r#279
[#424 '(']: r#279
[#424 '*']: r#279
[#424 ';']: r#279
[#424 '@']: r#279
[#424 'break']: r#279
[#424 'case']: r#279
[#424 'const']: r#279
[#424 'continue']: r#279
[#424 'continuing']: r#279
[#424 'default']: r#279
[#424 'discard']: r#279
[#424 'else']: r#279
[#424 'fallthrough']: r#279
[#424 'fn']: r#279
[#424 'for']: r#279
[#424 'if']: r#279
[#424 'let']: r#279
[#424 'loop']: r#279
[#424 'override']: r#279
[#424 'return']: r#279
[#424 'staticAssert']: r#279
[#424 'struct']: r#279
[#424 'switch']: r#279
[#424 'type']: r#279
[#424 'var']: r#279
[#424 'while']: r#279
[#424 '{']: r#279
[#424 '}']: r#279
[#424 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#279
[#424 EndOfText]: r#279
[#425 'read']: s#457
[#425 'read_write']: s#459
[#425 'write']: s#458
[#426 '(']: r#280
[#426 ')']: r#280
[#426 ',']: r#280
[#426 ';']: r#280
[#426 '=']: r#280
[#426 '>']: r#280
[#426 '{']: r#280
[#426 '}']: r#280
[#427 '(']: r#281
[#427 ')']: r#281
[#427 ',']: r#281
[#427 ';']: r#281
[#427 '=']: r#281
[#427 '>']: r#281
[#427 '{']: r#281
[#427 '}']: r#281
[#428 '>']: s#217
[#429 '!']: s#57
[#429 '&']: s#60
[#429 '(']: s#100
[#429 '*']: s#59
[#429 '-']: s#56
[#429 'array']: s#106
[#429 'bitcast']: s#65
[#429 'bool']: s#73
[#429 'f16']: s#102
[#429 'f32']: s#101
[#429 'false']: s#99
[#429 'i32']: s#103
[#429 'mat2x2']: s#84
[#429 'mat2x3']: s#85
[#429 'mat2x4']: s#86
[#429 'mat3x2']: s#87
[#429 'mat3x3']: s#88
[#429 'mat3x4']: s#89
[#429 'mat4x2']: s#90
[#429 'mat4x3']: s#91
[#429 'mat4x4']: s#92
[#429 'ptr']: s#105
[#429 'sampler']: s#120
[#429 'sampler_comparison']: s#121
[#429 'texture_1d']: s#127
[#429 'texture_2d']: s#128
[#429 'texture_2d_array']: s#129
[#429 'texture_3d']: s#130
[#429 'texture_cube']: s#131
[#429 'texture_cube_array']: s#132
[#429 'texture_depth_2d']: s#122
[#429 'texture_depth_2d_array']: s#123
[#429 'texture_depth_cube']: s#124
[#429 'texture_depth_cube_array']: s#125
[#429 'texture_depth_multisampled_2d']: s#126
[#429 'texture_multisampled_2d']: s#133
[#429 'texture_storage_1d']: s#134
[#429 'texture_storage_2d']: s#135
[#429 'texture_storage_2d_array']: s#136
[#429 'texture_storage_3d']: s#137
[#429 'true']: s#98
[#429 'u32']: s#104
[#429 'vec2']: s#81
[#429 'vec3']: s#82
[#429 'vec4']: s#83
[#429 '~']: s#58
[#429 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#429 /0[fh]/]: s#115
[#429 /0[iu]?/]: s#94
[#429 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#429 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#429 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#429 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#429 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#429 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#429 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#429 /[1-9][0-9]*[fh]/]: s#116
[#429 /[1-9][0-9]*[iu]?/]: s#95
[#430 'array']: s#106
[#430 'bool']: s#73
[#430 'f16']: s#102
[#430 'f32']: s#101
[#430 'i32']: s#103
[#430 'ptr']: s#105
[#430 'sampler']: s#120
[#430 'sampler_comparison']: s#121
[#430 'texture_1d']: s#127
[#430 'texture_2d']: s#128
[#430 'texture_2d_array']: s#129
[#430 'texture_3d']: s#130
[#430 'texture_cube']: s#131
[#430 'texture_cube_array']: s#132
[#430 'texture_depth_2d']: s#122
[#430 'texture_depth_2d_array']: s#123
[#430 'texture_depth_cube']: s#124
[#430 'texture_depth_cube_array']: s#125
[#430 'texture_depth_multisampled_2d']: s#126
[#430 'texture_multisampled_2d']: s#133
[#430 'texture_storage_1d']: s#134
[#430 'texture_storage_2d']: s#135
[#430 'texture_storage_2d_array']: s#136
[#430 'texture_storage_3d']: s#137
[#430 'u32']: s#104
[#430 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#431 '(']: s#100
[#432 '!']: r#282
[#432 '&']: r#282
[#432 '(']: r#282
[#432 '*']: r#282
[#432 '-']: r#282
[#432 'array']: r#282
[#432 'bitcast']: r#282
[#432 'bool']: r#282
[#432 'f16']: r#282
[#432 'f32']: r#282
[#432 'false']: r#282
[#432 'i32']: r#282
[#432 'mat2x2']: r#282
[#432 'mat2x3']: r#282
[#432 'mat2x4']: r#282
[#432 'mat3x2']: r#282
[#432 'mat3x3']: r#282
[#432 'mat3x4']: r#282
[#432 'mat4x2']: r#282
[#432 'mat4x3']: r#282
[#432 'mat4x4']: r#282
[#432 'ptr']: r#282
[#432 'sampler']: r#282
[#432 'sampler_comparison']: r#282
[#432 'texture_1d']: r#282
[#432 'texture_2d']: r#282
[#432 'texture_2d_array']: r#282
[#432 'texture_3d']: r#282
[#432 'texture_cube']: r#282
[#432 'texture_cube_array']: r#282
[#432 'texture_depth_2d']: r#282
[#432 'texture_depth_2d_array']: r#282
[#432 'texture_depth_cube']: r#282
[#432 'texture_depth_cube_array']: r#282
[#432 'texture_depth_multisampled_2d']: r#282
[#432 'texture_multisampled_2d']: r#282
[#432 'texture_storage_1d']: r#282
[#432 'texture_storage_2d']: r#282
[#432 'texture_storage_2d_array']: r#282
[#432 'texture_storage_3d']: r#282
[#432 'true']: r#282
[#432 'u32']: r#282
[#432 'vec2']: r#282
[#432 'vec3']: r#282
[#432 'vec4']: r#282
[#432 '~']: r#282
[#432 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#282
[#433 '!']: r#283
[#433 '&']: r#283
[#433 '(']: r#283
[#433 '*']: r#283
[#433 '-']: r#283
[#433 'array']: r#283
[#433 'bitcast']: r#283
[#433 'bool']: r#283
[#433 'f16']: r#283
[#433 'f32']: r#283
[#433 'false']: r#283
[#433 'i32']: r#283
[#433 'mat2x2']: r#283
[#433 'mat2x3']: r#283
[#433 'mat2x4']: r#283
[#433 'mat3x2']: r#283
[#433 'mat3x3']: r#283
[#433 'mat3x4']: r#283
[#433 'mat4x2']: r#283
[#433 'mat4x3']: r#283
[#433 'mat4x4']: r#283
[#433 'ptr']: r#283
[#433 'sampler']: r#283
[#433 'sampler_comparison']: r#283
[#433 'texture_1d']: r#283
[#433 'texture_2d']: r#283
[#433 'texture_2d_array']: r#283
[#433 'texture_3d']: r#283
[#433 'texture_cube']: r#283
[#433 'texture_cube_array']: r#283
[#433 'texture_depth_2d']: r#283
[#433 'texture_depth_2d_array']: r#283
[#433 'texture_depth_cube']: r#283
[#433 'texture_depth_cube_array']: r#283
[#433 'texture_depth_multisampled_2d']: r#283
[#433 'texture_multisampled_2d']: r#283
[#433 'texture_storage_1d']: r#283
[#433 'texture_storage_2d']: r#283
[#433 'texture_storage_2d_array']: r#283
[#433 'texture_storage_3d']: r#283
[#433 'true']: r#283
[#433 'u32']: r#283
[#433 'vec2']: r#283
[#433 'vec3']: r#283
[#433 'vec4']: r#283
[#433 '~']: r#283
[#433 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#283
[#434 ',']: s#350
[#435 '!=']: r#284
[#435 '%']: r#284
[#435 '&&']: r#284
[#435 '&']: r#284
[#435 ')']: r#284
[#435 '*']: r#284
[#435 '+']: r#284
[#435 ',']: r#284
[#435 '-']: r#284
[#435 '.']: r#284
[#435 '/']: r#284
[#435 ':']: r#284
[#435 ';']: r#284
[#435 '<']: r#284
[#435 '<<']: r#284
[#435 '<=']: r#284
[#435 '==']: r#284
[#435 '>']: r#284
[#435 '>=']: r#284
[#435 '>>']: r#284
[#435 '[']: r#284
[#435 ']']: r#284
[#435 '^']: r#284
[#435 '{']: r#284
[#435 '|']: r#284
[#435 '||']: r#284
[#436 '.']: s#188
[#436 '[']: s#187
[#437 '!=']: r#285
[#437 '%']: r#285
[#437 '%=']: r#285
[#437 '&&']: r#285
[#437 '&']: r#285
[#437 '&=']: r#285
[#437 ')']: r#285
[#437 '*']: r#285
[#437 '*=']: r#285
[#437 '+']: r#285
[#437 '++']: r#285
[#437 '+=']: r#285
[#437 ',']: r#285
[#437 '-']: r#285
[#437 '--']: r#285
[#437 '-=']: r#285
[#437 '.']: r#285
[#437 '/']: r#285
[#437 '/=']: r#285
[#437 ':']: r#285
[#437 ';']: r#285
[#437 '<']: r#285
[#437 '<<']: r#285
[#437 '<<=']: r#285
[#437 '<=']: r#285
[#437 '=']: r#285
[#437 '==']: r#285
[#437 '>']: r#285
[#437 '>=']: r#285
[#437 '>>']: r#285
[#437 '>>=']: r#285
[#437 '[']: r#285
[#437 ']']: r#285
[#437 '^']: r#285
[#437 '^=']: r#285
[#437 '{']: r#285
[#437 '|']: r#285
[#437 '|=']: r#285
[#437 '||']: r#285
[#438 '!=']: r#286
[#438 '%']: r#286
[#438 '%=']: r#286
[#438 '&&']: r#286
[#438 '&']: r#286
[#438 '&=']: r#286
[#438 ')']: r#286
[#438 '*']: r#286
[#438 '*=']: r#286
[#438 '+']: r#286
[#438 '++']: r#286
[#438 '+=']: r#286
[#438 ',']: r#286
[#438 '-']: r#286
[#438 '--']: r#286
[#438 '-=']: r#286
[#438 '/']: r#286
[#438 '/=']: r#286
[#438 ':']: r#286
[#438 ';']: r#286
[#438 '<']: r#286
[#438 '<<']: r#286
[#438 '<<=']: r#286
[#438 '<=']: r#286
[#438 '=']: r#286
[#438 '==']: r#286
[#438 '>']: r#286
[#438 '>=']: r#286
[#438 '>>']: r#286
[#438 '>>=']: r#286
[#438 ']']: r#286
[#438 '^']: r#286
[#438 '^=']: r#286
[#438 '{']: r#286
[#438 '|']: r#286
[#438 '|=']: r#286
[#438 '||']: r#286
[#439 '!=']: r#287
[#439 '%']: r#287
[#439 '%=']: r#287
[#439 '&&']: r#287
[#439 '&']: r#287
[#439 '&=']: r#287
[#439 ')']: r#287
[#439 '*']: r#287
[#439 '*=']: r#287
[#439 '+']: r#287
[#439 '++']: r#287
[#439 '+=']: r#287
[#439 ',']: r#287
[#439 '-']: r#287
[#439 '--']: r#287
[#439 '-=']: r#287
[#439 '/']: r#287
[#439 '/=']: r#287
[#439 ':']: r#287
[#439 ';']: r#287
[#439 '<']: r#287
[#439 '<<']: r#287
[#439 '<<=']: r#287
[#439 '<=']: r#287
[#439 '=']: r#287
[#439 '==']: r#287
[#439 '>']: r#287
[#439 '>=']: r#287
[#439 '>>']: r#287
[#439 '>>=']: r#287
[#439 ']']: r#287
[#439 '^']: r#287
[#439 '^=']: r#287
[#439 '{']: r#287
[#439 '|']: r#287
[#439 '|=']: r#287
[#439 '||']: r#287
[#440 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#288
[#441 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#289
[#442 ',']: s#350
[#443 ')']: s#265
[#444 ')']: r#290
[#445 '!=']: r#291
[#445 '%']: r#291
[#445 '%=']: r#291
[#445 '&&']: r#291
[#445 '&']: r#291
[#445 '&=']: r#291
[#445 ')']: r#291
[#445 '*']: r#291
[#445 '*=']: r#291
[#445 '+']: r#291
[#445 '++']: r#291
[#445 '+=']: r#291
[#445 ',']: r#291
[#445 '-']: r#291
[#445 '--']: r#291
[#445 '-=']: r#291
[#445 '/']: r#291
[#445 '/=']: r#291
[#445 ':']: r#291
[#445 ';']: r#291
[#445 '<']: r#291
[#445 '<<']: r#291
[#445 '<<=']: r#291
[#445 '<=']: r#291
[#445 '=']: r#291
[#445 '==']: r#291
[#445 '>']: r#291
[#445 '>=']: r#291
[#445 '>>']: r#291
[#445 '>>=']: r#291
[#445 ']']: r#291
[#445 '^']: r#291
[#445 '^=']: r#291
[#445 '{']: r#291
[#445 '|']: r#291
[#445 '|=']: r#291
[#445 '||']: r#291
[#446 '!=']: r#292
[#446 '%']: r#292
[#446 '%=']: r#292
[#446 '&&']: r#292
[#446 '&']: r#292
[#446 '&=']: r#292
[#446 ')']: r#292
[#446 '*']: r#292
[#446 '*=']: r#292
[#446 '+']: r#292
[#446 '++']: r#292
[#446 '+=']: r#292
[#446 ',']: r#292
[#446 '-']: r#292
[#446 '--']: r#292
[#446 '-=']: r#292
[#446 '/']: r#292
[#446 '/=']: r#292
[#446 ':']: r#292
[#446 ';']: r#292
[#446 '<']: r#292
[#446 '<<']: r#292
[#446 '<<=']: r#292
[#446 '<=']: r#292
[#446 '=']: r#292
[#446 '==']: r#292
[#446 '>']: r#292
[#446 '>=']: r#292
[#446 '>>']: r#292
[#446 '>>=']: r#292
[#446 ']']: r#292
[#446 '^']: r#292
[#446 '^=']: r#292
[#446 '{']: r#292
[#446 '|']: r#292
[#446 '|=']: r#292
[#446 '||']: r#292
[#447 ')']: r#293
[#448 ')']: r#294
[#449 '!=']: r#295
[#449 '%']: r#295
[#449 '&&']: r#295
[#449 '&']: r#295
[#449 ')']: r#295
[#449 '*']: r#295
[#449 '+']: r#295
[#449 ',']: r#295
[#449 '-']: r#295
[#449 '.']: r#295
[#449 '/']: r#295
[#449 ':']: r#295
[#449 ';']: r#295
[#449 '<']: r#295
[#449 '<<']: r#295
[#449 '<=']: r#295
[#449 '==']: r#295
[#449 '>']: r#295
[#449 '>=']: r#295
[#449 '>>']: r#295
[#449 '[']: r#295
[#449 ']']: r#295
[#449 '^']: r#295
[#449 '{']: r#295
[#449 '|']: r#295
[#449 '||']: r#295
[#450 ',']: s#350
[#451 '>']: r#296
[#452 '+']: s#205
[#452 '-']: s#56
[#452 '>']: r#297
[#453 '>']: r#298
[#454 '%']: r#26
[#454 '&']: r#23
[#454 '*']: r#26
[#454 '+']: r#26
[#454 '-']: r#26
[#454 '/']: r#26
[#454 '>']: r#26
[#454 '^']: r#25
[#454 '|']: r#24
[#455 '(']: r#299
[#455 ')']: r#299
[#455 ',']: r#299
[#455 ';']: r#299
[#455 '=']: r#299
[#455 '>']: r#299
[#455 '{']: r#299
[#455 '}']: r#299
[#456 '>']: s#217
[#457 '>']: r#300
[#458 '>']: r#301
[#459 '>']: r#302
[#460 'else']: s#511
[#461 'case']: s#508
[#461 'default']: s#509
[#462 'continuing']: s#504
[#463 'continuing']: r#303
[#463 '}']: r#303
[#464 '&']: s#60
[#464 '*']: s#59
[#464 ';']: s#19
[#464 'break']: s#322
[#464 'const']: s#321
[#464 'continue']: s#323
[#464 'discard']: s#306
[#464 'for']: s#316
[#464 'if']: s#313
[#464 'let']: s#320
[#464 'loop']: s#315
[#464 'return']: s#312
[#464 'staticAssert']: s#26
[#464 'switch']: s#314
[#464 'var']: s#147
[#464 'while']: s#317
[#464 '{']: s#170
[#464 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#465 ')']: s#265
[#466 ';']: s#19
[#467 ';']: r#304
[#468 ';']: r#305
[#469 ';']: r#306
[#470 ';']: r#307
[#471 ';']: r#308
[#472 ';']: r#309
[#473 '&']: r#310
[#473 '(']: r#310
[#473 '*']: r#310
[#473 ';']: r#310
[#473 'break']: r#310
[#473 'const']: r#310
[#473 'continue']: r#310
[#473 'continuing']: r#310
[#473 'discard']: r#310
[#473 'fallthrough']: r#310
[#473 'for']: r#310
[#473 'if']: r#310
[#473 'let']: r#310
[#473 'loop']: r#310
[#473 'return']: r#310
[#473 'staticAssert']: r#310
[#473 'switch']: r#310
[#473 'var']: r#310
[#473 'while']: r#310
[#473 '{']: r#310
[#473 '}']: r#310
[#473 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#310
[#474 '!']: s#57
[#474 '&']: s#60
[#474 '(']: s#100
[#474 '*']: s#59
[#474 '-']: s#56
[#474 'array']: s#106
[#474 'bitcast']: s#65
[#474 'bool']: s#73
[#474 'f16']: s#102
[#474 'f32']: s#101
[#474 'false']: s#99
[#474 'i32']: s#103
[#474 'mat2x2']: s#84
[#474 'mat2x3']: s#85
[#474 'mat2x4']: s#86
[#474 'mat3x2']: s#87
[#474 'mat3x3']: s#88
[#474 'mat3x4']: s#89
[#474 'mat4x2']: s#90
[#474 'mat4x3']: s#91
[#474 'mat4x4']: s#92
[#474 'ptr']: s#105
[#474 'sampler']: s#120
[#474 'sampler_comparison']: s#121
[#474 'texture_1d']: s#127
[#474 'texture_2d']: s#128
[#474 'texture_2d_array']: s#129
[#474 'texture_3d']: s#130
[#474 'texture_cube']: s#131
[#474 'texture_cube_array']: s#132
[#474 'texture_depth_2d']: s#122
[#474 'texture_depth_2d_array']: s#123
[#474 'texture_depth_cube']: s#124
[#474 'texture_depth_cube_array']: s#125
[#474 'texture_depth_multisampled_2d']: s#126
[#474 'texture_multisampled_2d']: s#133
[#474 'texture_storage_1d']: s#134
[#474 'texture_storage_2d']: s#135
[#474 'texture_storage_2d_array']: s#136
[#474 'texture_storage_3d']: s#137
[#474 'true']: s#98
[#474 'u32']: s#104
[#474 'vec2']: s#81
[#474 'vec3']: s#82
[#474 'vec4']: s#83
[#474 '~']: s#58
[#474 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#474 /0[fh]/]: s#115
[#474 /0[iu]?/]: s#94
[#474 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#474 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#474 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#474 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#474 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#474 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#474 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#474 /[1-9][0-9]*[fh]/]: s#116
[#474 /[1-9][0-9]*[iu]?/]: s#95
[#475 '!']: s#57
[#475 '&']: s#60
[#475 '(']: s#100
[#475 '*']: s#59
[#475 '-']: s#56
[#475 'array']: s#106
[#475 'bitcast']: s#65
[#475 'bool']: s#73
[#475 'f16']: s#102
[#475 'f32']: s#101
[#475 'false']: s#99
[#475 'i32']: s#103
[#475 'mat2x2']: s#84
[#475 'mat2x3']: s#85
[#475 'mat2x4']: s#86
[#475 'mat3x2']: s#87
[#475 'mat3x3']: s#88
[#475 'mat3x4']: s#89
[#475 'mat4x2']: s#90
[#475 'mat4x3']: s#91
[#475 'mat4x4']: s#92
[#475 'ptr']: s#105
[#475 'sampler']: s#120
[#475 'sampler_comparison']: s#121
[#475 'texture_1d']: s#127
[#475 'texture_2d']: s#128
[#475 'texture_2d_array']: s#129
[#475 'texture_3d']: s#130
[#475 'texture_cube']: s#131
[#475 'texture_cube_array']: s#132
[#475 'texture_depth_2d']: s#122
[#475 'texture_depth_2d_array']: s#123
[#475 'texture_depth_cube']: s#124
[#475 'texture_depth_cube_array']: s#125
[#475 'texture_depth_multisampled_2d']: s#126
[#475 'texture_multisampled_2d']: s#133
[#475 'texture_storage_1d']: s#134
[#475 'texture_storage_2d']: s#135
[#475 'texture_storage_2d_array']: s#136
[#475 'texture_storage_3d']: s#137
[#475 'true']: s#98
[#475 'u32']: s#104
[#475 'vec2']: s#81
[#475 'vec3']: s#82
[#475 'vec4']: s#83
[#475 '~']: s#58
[#475 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#475 /0[fh]/]: s#115
[#475 /0[iu]?/]: s#94
[#475 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#475 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#475 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#475 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#475 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#475 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#475 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#475 /[1-9][0-9]*[fh]/]: s#116
[#475 /[1-9][0-9]*[iu]?/]: s#95
[#476 ')']: r#311
[#476 ';']: r#311
[#477 ')']: s#265
[#478 '%=']: r#312
[#478 '&=']: r#312
[#478 ')']: r#312
[#478 '*=']: r#312
[#478 '++']: r#312
[#478 '+=']: r#312
[#478 '--']: r#312
[#478 '-=']: r#312
[#478 '/=']: r#312
[#478 '<<=']: r#312
[#478 '=']: r#312
[#478 '>>=']: r#312
[#478 '^=']: r#312
[#478 '|=']: r#312
[#479 '%=']: r#313
[#479 '&=']: r#313
[#479 ')']: r#313
[#479 '*=']: r#313
[#479 '++']: r#313
[#479 '+=']: r#313
[#479 '--']: r#313
[#479 '-=']: r#313
[#479 '/=']: r#313
[#479 '<<=']: r#313
[#479 '=']: r#313
[#479 '>>=']: r#313
[#479 '^=']: r#313
[#479 '|=']: r#313
[#480 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#314
[#481 ')']: r#315
[#481 ',']: r#315
[#482 '@']: r#316
[#482 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#316
[#483 '@']: r#317
[#483 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#317
[#484 ',']: s#350
[#485 '->']: s#493
[#486 '}']: s#424
[#487 '}']: r#318
[#488 '>']: r#319
[#489 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#320
[#490 ';']: r#321
[#490 '@']: r#321
[#490 'const']: r#321
[#490 'fn']: r#321
[#490 'override']: r#321
[#490 'staticAssert']: r#321
[#490 'struct']: r#321
[#490 'type']: r#321
[#490 'var']: r#321
[#490 EndOfText]: r#321
[#491 '{']: r#322
[#492 '@']: s#32
[#493 '@']: r#323
[#493 'array']: r#323
[#493 'bool']: r#323
[#493 'f16']: r#323
[#493 'f32']: r#323
[#493 'i32']: r#323
[#493 'ptr']: r#323
[#493 'sampler']: r#323
[#493 'sampler_comparison']: r#323
[#493 'texture_1d']: r#323
[#493 'texture_2d']: r#323
[#493 'texture_2d_array']: r#323
[#493 'texture_3d']: r#323
[#493 'texture_cube']: r#323
[#493 'texture_cube_array']: r#323
[#493 'texture_depth_2d']: r#323
[#493 'texture_depth_2d_array']: r#323
[#493 'texture_depth_cube']: r#323
[#493 'texture_depth_cube_array']: r#323
[#493 'texture_depth_multisampled_2d']: r#323
[#493 'texture_multisampled_2d']: r#323
[#493 'texture_storage_1d']: r#323
[#493 'texture_storage_2d']: r#323
[#493 'texture_storage_2d_array']: r#323
[#493 'texture_storage_3d']: r#323
[#493 'u32']: r#323
[#493 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#323
[#494 ')']: r#324
[#495 ')']: r#325
[#496 '%=']: r#326
[#496 '&=']: r#326
[#496 ')']: r#326
[#496 '*=']: r#326
[#496 '++']: r#326
[#496 '+=']: r#326
[#496 '--']: r#326
[#496 '-=']: r#326
[#496 '.']: r#326
[#496 '/=']: r#326
[#496 '<<=']: r#326
[#496 '=']: r#326
[#496 '>>=']: r#326
[#496 '[']: r#326
[#496 '^=']: r#326
[#496 '|=']: r#326
[#497 ';']: r#327
[#498 ';']: r#328
[#499 '!']: s#57
[#499 '&']: s#60
[#499 '(']: s#100
[#499 '*']: s#59
[#499 '-']: s#56
[#499 'array']: s#106
[#499 'bitcast']: s#65
[#499 'bool']: s#73
[#499 'f16']: s#102
[#499 'f32']: s#101
[#499 'false']: s#99
[#499 'i32']: s#103
[#499 'mat2x2']: s#84
[#499 'mat2x3']: s#85
[#499 'mat2x4']: s#86
[#499 'mat3x2']: s#87
[#499 'mat3x3']: s#88
[#499 'mat3x4']: s#89
[#499 'mat4x2']: s#90
[#499 'mat4x3']: s#91
[#499 'mat4x4']: s#92
[#499 'ptr']: s#105
[#499 'sampler']: s#120
[#499 'sampler_comparison']: s#121
[#499 'texture_1d']: s#127
[#499 'texture_2d']: s#128
[#499 'texture_2d_array']: s#129
[#499 'texture_3d']: s#130
[#499 'texture_cube']: s#131
[#499 'texture_cube_array']: s#132
[#499 'texture_depth_2d']: s#122
[#499 'texture_depth_2d_array']: s#123
[#499 'texture_depth_cube']: s#124
[#499 'texture_depth_cube_array']: s#125
[#499 'texture_depth_multisampled_2d']: s#126
[#499 'texture_multisampled_2d']: s#133
[#499 'texture_storage_1d']: s#134
[#499 'texture_storage_2d']: s#135
[#499 'texture_storage_2d_array']: s#136
[#499 'texture_storage_3d']: s#137
[#499 'true']: s#98
[#499 'u32']: s#104
[#499 'vec2']: s#81
[#499 'vec3']: s#82
[#499 'vec4']: s#83
[#499 '~']: s#58
[#499 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#499 /0[fh]/]: s#115
[#499 /0[iu]?/]: s#94
[#499 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#499 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#499 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#499 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#499 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#499 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#499 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#499 /[1-9][0-9]*[fh]/]: s#116
[#499 /[1-9][0-9]*[iu]?/]: s#95
[#500 '{']: s#170
[#501 'continuing']: r#329
[#501 '}']: r#329
[#502 '}']: s#424
[#503 '}']: r#330
[#504 '{']: s#170
[#505 '}']: s#424
[#506 '}']: r#331
[#507 'case']: s#508
[#507 'default']: s#509
[#508 '!']: s#57
[#508 '&']: s#60
[#508 '(']: s#100
[#508 '*']: s#59
[#508 '-']: s#56
[#508 'array']: s#106
[#508 'bitcast']: s#65
[#508 'bool']: s#73
[#508 'f16']: s#102
[#508 'f32']: s#101
[#508 'false']: s#99
[#508 'i32']: s#103
[#508 'mat2x2']: s#84
[#508 'mat2x3']: s#85
[#508 'mat2x4']: s#86
[#508 'mat3x2']: s#87
[#508 'mat3x3']: s#88
[#508 'mat3x4']: s#89
[#508 'mat4x2']: s#90
[#508 'mat4x3']: s#91
[#508 'mat4x4']: s#92
[#508 'ptr']: s#105
[#508 'sampler']: s#120
[#508 'sampler_comparison']: s#121
[#508 'texture_1d']: s#127
[#508 'texture_2d']: s#128
[#508 'texture_2d_array']: s#129
[#508 'texture_3d']: s#130
[#508 'texture_cube']: s#131
[#508 'texture_cube_array']: s#132
[#508 'texture_depth_2d']: s#122
[#508 'texture_depth_2d_array']: s#123
[#508 'texture_depth_cube']: s#124
[#508 'texture_depth_cube_array']: s#125
[#508 'texture_depth_multisampled_2d']: s#126
[#508 'texture_multisampled_2d']: s#133
[#508 'texture_storage_1d']: s#134
[#508 'texture_storage_2d']: s#135
[#508 'texture_storage_2d_array']: s#136
[#508 'texture_storage_3d']: s#137
[#508 'true']: s#98
[#508 'u32']: s#104
[#508 'vec2']: s#81
[#508 'vec3']: s#82
[#508 'vec4']: s#83
[#508 '~']: s#58
[#508 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#508 /0[fh]/]: s#115
[#508 /0[iu]?/]: s#94
[#508 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#508 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#508 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#508 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#508 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#508 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#508 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#508 /[1-9][0-9]*[fh]/]: s#116
[#508 /[1-9][0-9]*[iu]?/]: s#95
[#509 ':']: s#162
[#510 '&']: r#332
[#510 '(']: r#332
[#510 '*']: r#332
[#510 ';']: r#332
[#510 'break']: r#332
[#510 'const']: r#332
[#510 'continue']: r#332
[#510 'continuing']: r#332
[#510 'discard']: r#332
[#510 'fallthrough']: r#332
[#510 'for']: r#332
[#510 'if']: r#332
[#510 'let']: r#332
[#510 'loop']: r#332
[#510 'return']: r#332
[#510 'staticAssert']: r#332
[#510 'switch']: r#332
[#510 'var']: r#332
[#510 'while']: r#332
[#510 '{']: r#332
[#510 '}']: r#332
[#510 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#332
[#511 'if']: s#313
[#511 '{']: s#170
[#512 '(']: r#333
[#512 ')']: r#333
[#512 ',']: r#333
[#512 ';']: r#333
[#512 '=']: r#333
[#512 '>']: r#333
[#512 '{']: r#333
[#512 '}']: r#333
[#513 '>']: s#217
[#514 'read']: s#457
[#514 'read_write']: s#459
[#514 'write']: s#458
[#515 '@']: r#334
[#515 'array']: r#334
[#515 'bool']: r#334
[#515 'f16']: r#334
[#515 'f32']: r#334
[#515 'fn']: r#334
[#515 'i32']: r#334
[#515 'override']: r#334
[#515 'ptr']: r#334
[#515 'sampler']: r#334
[#515 'sampler_comparison']: r#334
[#515 'texture_1d']: r#334
[#515 'texture_2d']: r#334
[#515 'texture_2d_array']: r#334
[#515 'texture_3d']: r#334
[#515 'texture_cube']: r#334
[#515 'texture_cube_array']: r#334
[#515 'texture_depth_2d']: r#334
[#515 'texture_depth_2d_array']: r#334
[#515 'texture_depth_cube']: r#334
[#515 'texture_depth_cube_array']: r#334
[#515 'texture_depth_multisampled_2d']: r#334
[#515 'texture_multisampled_2d']: r#334
[#515 'texture_storage_1d']: r#334
[#515 'texture_storage_2d']: r#334
[#515 'texture_storage_2d_array']: r#334
[#515 'texture_storage_3d']: r#334
[#515 'u32']: r#334
[#515 'var']: r#334
[#515 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#334
[#516 '>']: r#335
[#517 '(']: r#336
[#517 ')']: r#336
[#517 ',']: r#336
[#517 ';']: r#336
[#517 '=']: r#336
[#517 '>']: r#336
[#517 '{']: r#336
[#517 '}']: r#336
[#518 '&']: r#337
[#518 '(']: r#337
[#518 '*']: r#337
[#518 ';']: r#337
[#518 'break']: r#337
[#518 'const']: r#337
[#518 'continue']: r#337
[#518 'continuing']: r#337
[#518 'discard']: r#337
[#518 'fallthrough']: r#337
[#518 'for']: r#337
[#518 'if']: r#337
[#518 'let']: r#337
[#518 'loop']: r#337
[#518 'return']: r#337
[#518 'staticAssert']: r#337
[#518 'switch']: r#337
[#518 'var']: r#337
[#518 'while']: r#337
[#518 '{']: r#337
[#518 '}']: r#337
[#518 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#337
[#519 '&']: r#338
[#519 '(']: r#338
[#519 '*']: r#338
[#519 ';']: r#338
[#519 'break']: r#338
[#519 'const']: r#338
[#519 'continue']: r#338
[#519 'continuing']: r#338
[#519 'discard']: r#338
[#519 'fallthrough']: r#338
[#519 'for']: r#338
[#519 'if']: r#338
[#519 'let']: r#338
[#519 'loop']: r#338
[#519 'return']: r#338
[#519 'staticAssert']: r#338
[#519 'switch']: r#338
[#519 'var']: r#338
[#519 'while']: r#338
[#519 '{']: r#338
[#519 '}']: r#338
[#519 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#338
[#520 '&']: r#339
[#520 '(']: r#339
[#520 '*']: r#339
[#520 ';']: r#339
[#520 'break']: r#339
[#520 'const']: r#339
[#520 'continue']: r#339
[#520 'continuing']: r#339
[#520 'discard']: r#339
[#520 'fallthrough']: r#339
[#520 'for']: r#339
[#520 'if']: r#339
[#520 'let']: r#339
[#520 'loop']: r#339
[#520 'return']: r#339
[#520 'staticAssert']: r#339
[#520 'switch']: r#339
[#520 'var']: r#339
[#520 'while']: r#339
[#520 '{']: r#339
[#520 '}']: r#339
[#520 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#339
[#521 '{']: s#170
[#522 '{']: r#340
[#523 ':']: s#162
[#524 ',']: s#350
[#525 '}']: r#341
[#526 '&']: r#342
[#526 '(']: r#342
[#526 '*']: r#342
[#526 ';']: r#342
[#526 'break']: r#342
[#526 'const']: r#342
[#526 'continue']: r#342
[#526 'continuing']: r#342
[#526 'discard']: r#342
[#526 'fallthrough']: r#342
[#526 'for']: r#342
[#526 'if']: r#342
[#526 'let']: r#342
[#526 'loop']: r#342
[#526 'return']: r#342
[#526 'staticAssert']: r#342
[#526 'switch']: r#342
[#526 'var']: r#342
[#526 'while']: r#342
[#526 '{']: r#342
[#526 '}']: r#342
[#526 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#342
[#527 '}']: r#343
[#528 '&']: s#60
[#528 '*']: s#59
[#528 ';']: s#19
[#528 'break']: s#322
[#528 'const']: s#321
[#528 'continue']: s#323
[#528 'discard']: s#306
[#528 'for']: s#316
[#528 'if']: s#313
[#528 'let']: s#320
[#528 'loop']: s#315
[#528 'return']: s#312
[#528 'staticAssert']: s#26
[#528 'switch']: s#314
[#528 'var']: s#147
[#528 'while']: s#317
[#528 '{']: s#170
[#528 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#529 '&']: r#344
[#529 '(']: r#344
[#529 '*']: r#344
[#529 ';']: r#344
[#529 'break']: r#344
[#529 'const']: r#344
[#529 'continue']: r#344
[#529 'continuing']: r#344
[#529 'discard']: r#344
[#529 'fallthrough']: r#344
[#529 'for']: r#344
[#529 'if']: r#344
[#529 'let']: r#344
[#529 'loop']: r#344
[#529 'return']: r#344
[#529 'staticAssert']: r#344
[#529 'switch']: r#344
[#529 'var']: r#344
[#529 'while']: r#344
[#529 '{']: r#344
[#529 '}']: r#344
[#529 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#344
[#530 '&']: r#345
[#530 '(']: r#345
[#530 '*']: r#345
[#530 ';']: r#345
[#530 'break']: r#345
[#530 'const']: r#345
[#530 'continue']: r#345
[#530 'continuing']: r#345
[#530 'discard']: r#345
[#530 'fallthrough']: r#345
[#530 'for']: r#345
[#530 'if']: r#345
[#530 'let']: r#345
[#530 'loop']: r#345
[#530 'return']: r#345
[#530 'staticAssert']: r#345
[#530 'switch']: r#345
[#530 'var']: r#345
[#530 'while']: r#345
[#530 '{']: r#345
[#530 '}']: r#345
[#530 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#345
[#531 ';']: s#19
[#532 ';']: r#346
[#533 'array']: s#106
[#533 'bool']: s#73
[#533 'f16']: s#102
[#533 'f32']: s#101
[#533 'i32']: s#103
[#533 'ptr']: s#105
[#533 'sampler']: s#120
[#533 'sampler_comparison']: s#121
[#533 'texture_1d']: s#127
[#533 'texture_2d']: s#128
[#533 'texture_2d_array']: s#129
[#533 'texture_3d']: s#130
[#533 'texture_cube']: s#131
[#533 'texture_cube_array']: s#132
[#533 'texture_depth_2d']: s#122
[#533 'texture_depth_2d_array']: s#123
[#533 'texture_depth_cube']: s#124
[#533 'texture_depth_cube_array']: s#125
[#533 'texture_depth_multisampled_2d']: s#126
[#533 'texture_multisampled_2d']: s#133
[#533 'texture_storage_1d']: s#134
[#533 'texture_storage_2d']: s#135
[#533 'texture_storage_2d_array']: s#136
[#533 'texture_storage_3d']: s#137
[#533 'u32']: s#104
[#533 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#534 'array']: r#347
[#534 'bool']: r#347
[#534 'f16']: r#347
[#534 'f32']: r#347
[#534 'i32']: r#347
[#534 'ptr']: r#347
[#534 'sampler']: r#347
[#534 'sampler_comparison']: r#347
[#534 'texture_1d']: r#347
[#534 'texture_2d']: r#347
[#534 'texture_2d_array']: r#347
[#534 'texture_3d']: r#347
[#534 'texture_cube']: r#347
[#534 'texture_cube_array']: r#347
[#534 'texture_depth_2d']: r#347
[#534 'texture_depth_2d_array']: r#347
[#534 'texture_depth_cube']: r#347
[#534 'texture_depth_cube_array']: r#347
[#534 'texture_depth_multisampled_2d']: r#347
[#534 'texture_multisampled_2d']: r#347
[#534 'texture_storage_1d']: r#347
[#534 'texture_storage_2d']: r#347
[#534 'texture_storage_2d_array']: r#347
[#534 'texture_storage_3d']: r#347
[#534 'u32']: r#347
[#534 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#347
[#535 '@']: s#32
[#536 'array']: r#348
[#536 'bool']: r#348
[#536 'f16']: r#348
[#536 'f32']: r#348
[#536 'i32']: r#348
[#536 'ptr']: r#348
[#536 'sampler']: r#348
[#536 'sampler_comparison']: r#348
[#536 'texture_1d']: r#348
[#536 'texture_2d']: r#348
[#536 'texture_2d_array']: r#348
[#536 'texture_3d']: r#348
[#536 'texture_cube']: r#348
[#536 'texture_cube_array']: r#348
[#536 'texture_depth_2d']: r#348
[#536 'texture_depth_2d_array']: r#348
[#536 'texture_depth_cube']: r#348
[#536 'texture_depth_cube_array']: r#348
[#536 'texture_depth_multisampled_2d']: r#348
[#536 'texture_multisampled_2d']: r#348
[#536 'texture_storage_1d']: r#348
[#536 'texture_storage_2d']: r#348
[#536 'texture_storage_2d_array']: r#348
[#536 'texture_storage_3d']: r#348
[#536 'u32']: r#348
[#536 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#348
[#537 '{']: r#349
[#538 '&']: s#60
[#538 '*']: s#59
[#538 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#539 'break']: s#561
[#540 'break']: r#350
[#540 '}']: r#350
[#541 '&']: s#60
[#541 '*']: s#59
[#541 ';']: s#19
[#541 'break']: s#322
[#541 'const']: s#321
[#541 'continue']: s#323
[#541 'discard']: s#306
[#541 'for']: s#316
[#541 'if']: s#313
[#541 'let']: s#320
[#541 'loop']: s#315
[#541 'return']: s#312
[#541 'staticAssert']: s#26
[#541 'switch']: s#314
[#541 'var']: s#147
[#541 'while']: s#317
[#541 '{']: s#170
[#541 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#542 ',']: s#350
[#543 ',']: r#351
[#543 ':']: r#351
[#543 '{']: r#351
[#544 ',']: s#350
[#545 '!']: s#57
[#545 '&']: s#60
[#545 '(']: s#100
[#545 '*']: s#59
[#545 '-']: s#56
[#545 'array']: s#106
[#545 'bitcast']: s#65
[#545 'bool']: s#73
[#545 'f16']: s#102
[#545 'f32']: s#101
[#545 'false']: s#99
[#545 'i32']: s#103
[#545 'mat2x2']: s#84
[#545 'mat2x3']: s#85
[#545 'mat2x4']: s#86
[#545 'mat3x2']: s#87
[#545 'mat3x3']: s#88
[#545 'mat3x4']: s#89
[#545 'mat4x2']: s#90
[#545 'mat4x3']: s#91
[#545 'mat4x4']: s#92
[#545 'ptr']: s#105
[#545 'sampler']: s#120
[#545 'sampler_comparison']: s#121
[#545 'texture_1d']: s#127
[#545 'texture_2d']: s#128
[#545 'texture_2d_array']: s#129
[#545 'texture_3d']: s#130
[#545 'texture_cube']: s#131
[#545 'texture_cube_array']: s#132
[#545 'texture_depth_2d']: s#122
[#545 'texture_depth_2d_array']: s#123
[#545 'texture_depth_cube']: s#124
[#545 'texture_depth_cube_array']: s#125
[#545 'texture_depth_multisampled_2d']: s#126
[#545 'texture_multisampled_2d']: s#133
[#545 'texture_storage_1d']: s#134
[#545 'texture_storage_2d']: s#135
[#545 'texture_storage_2d_array']: s#136
[#545 'texture_storage_3d']: s#137
[#545 'true']: s#98
[#545 'u32']: s#104
[#545 'vec2']: s#81
[#545 'vec3']: s#82
[#545 'vec4']: s#83
[#545 '~']: s#58
[#545 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#545 /0[fh]/]: s#115
[#545 /0[iu]?/]: s#94
[#545 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#545 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#545 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#545 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#545 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#545 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#545 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#545 /[1-9][0-9]*[fh]/]: s#116
[#545 /[1-9][0-9]*[iu]?/]: s#95
[#546 '{']: s#170
[#547 '{']: r#352
[#548 'case']: r#353
[#548 'default']: r#353
[#548 '}']: r#353
[#549 '&']: s#60
[#549 '*']: s#59
[#549 ';']: s#19
[#549 'break']: s#322
[#549 'const']: s#321
[#549 'continue']: s#323
[#549 'discard']: s#306
[#549 'for']: s#316
[#549 'if']: s#313
[#549 'let']: s#320
[#549 'loop']: s#315
[#549 'return']: s#312
[#549 'staticAssert']: s#26
[#549 'switch']: s#314
[#549 'var']: s#147
[#549 'while']: s#317
[#549 '{']: s#170
[#549 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#550 'fallthrough']: s#573
[#551 'fallthrough']: r#354
[#551 '}']: r#354
[#552 '&']: s#60
[#552 '*']: s#59
[#552 ';']: s#19
[#552 'break']: s#322
[#552 'const']: s#321
[#552 'continue']: s#323
[#552 'discard']: s#306
[#552 'for']: s#316
[#552 'if']: s#313
[#552 'let']: s#320
[#552 'loop']: s#315
[#552 'return']: s#312
[#552 'staticAssert']: s#26
[#552 'switch']: s#314
[#552 'var']: s#147
[#552 'while']: s#317
[#552 '{']: s#170
[#552 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#553 'case']: r#355
[#553 'default']: r#355
[#553 '}']: r#355
[#554 ',']: r#356
[#554 ':']: r#356
[#554 '{']: r#356
[#555 ',']: r#357
[#555 ':']: r#357
[#555 '{']: r#357
[#556 ':']: r#358
[#556 '{']: r#358
[#557 ':']: r#359
[#557 '{']: r#359
[#558 'break']: r#360
[#558 '}']: r#360
[#559 '}']: s#424
[#560 '}']: r#361
[#561 'if']: s#568
[#562 ')']: r#362
[#563 ')']: r#363
[#564 ')']: r#364
[#565 ')']: r#365
[#566 ')']: r#366
[#567 ')']: r#367
[#568 '!']: s#57
[#568 '&']: s#60
[#568 '(']: s#100
[#568 '*']: s#59
[#568 '-']: s#56
[#568 'array']: s#106
[#568 'bitcast']: s#65
[#568 'bool']: s#73
[#568 'f16']: s#102
[#568 'f32']: s#101
[#568 'false']: s#99
[#568 'i32']: s#103
[#568 'mat2x2']: s#84
[#568 'mat2x3']: s#85
[#568 'mat2x4']: s#86
[#568 'mat3x2']: s#87
[#568 'mat3x3']: s#88
[#568 'mat3x4']: s#89
[#568 'mat4x2']: s#90
[#568 'mat4x3']: s#91
[#568 'mat4x4']: s#92
[#568 'ptr']: s#105
[#568 'sampler']: s#120
[#568 'sampler_comparison']: s#121
[#568 'texture_1d']: s#127
[#568 'texture_2d']: s#128
[#568 'texture_2d_array']: s#129
[#568 'texture_3d']: s#130
[#568 'texture_cube']: s#131
[#568 'texture_cube_array']: s#132
[#568 'texture_depth_2d']: s#122
[#568 'texture_depth_2d_array']: s#123
[#568 'texture_depth_cube']: s#124
[#568 'texture_depth_cube_array']: s#125
[#568 'texture_depth_multisampled_2d']: s#126
[#568 'texture_multisampled_2d']: s#133
[#568 'texture_storage_1d']: s#134
[#568 'texture_storage_2d']: s#135
[#568 'texture_storage_2d_array']: s#136
[#568 'texture_storage_3d']: s#137
[#568 'true']: s#98
[#568 'u32']: s#104
[#568 'vec2']: s#81
[#568 'vec3']: s#82
[#568 'vec4']: s#83
[#568 '~']: s#58
[#568 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#7
[#568 /0[fh]/]: s#115
[#568 /0[iu]?/]: s#94
[#568 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#568 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#568 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#568 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#568 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#112
[#568 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#114
[#568 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#113
[#568 /[1-9][0-9]*[fh]/]: s#116
[#568 /[1-9][0-9]*[iu]?/]: s#95
[#569 '}']: r#368
[#570 'fallthrough']: r#369
[#570 '}']: r#369
[#571 '}']: s#424
[#572 '}']: r#370
[#573 ';']: s#19
[#574 '}']: r#371
[#575 'case']: r#372
[#575 'default']: r#372
[#575 '}']: r#372
[#576 ';']: s#19
[#577 '}']: r#373

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attr]: #31
[#2 attribute]: #30
[#2 function_decl]: #17
[#2 function_decl/0.0]: #25
[#2 function_decl/0.0/0]: #29
[#2 global_constant_decl]: #14
[#2 global_constant_decl/1.0]: #22
[#2 global_constant_decl/1.0/0]: #28
[#2 global_decl]: #11
[#2 global_variable_decl]: #13
[#2 global_variable_decl/0.0]: #20
[#2 global_variable_decl/0.0/0]: #27
[#2 semicolon]: #12
[#2 static_assert_statement]: #18
[#2 struct_decl]: #16
[#2 translation_unit/0.1]: #9
[#2 translation_unit/0.1/0]: #10
[#2 type_alias_decl]: #15
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #8
[#5 ident]: #6
[#6 semicolon]: #153
[#11 attr]: #31
[#11 attribute]: #30
[#11 function_decl]: #17
[#11 function_decl/0.0]: #25
[#11 function_decl/0.0/0]: #29
[#11 global_constant_decl]: #14
[#11 global_constant_decl/1.0]: #22
[#11 global_constant_decl/1.0/0]: #28
[#11 global_decl]: #11
[#11 global_variable_decl]: #13
[#11 global_variable_decl/0.0]: #20
[#11 global_variable_decl/0.0/0]: #27
[#11 semicolon]: #12
[#11 static_assert_statement]: #18
[#11 struct_decl]: #16
[#11 translation_unit/0.1/0]: #152
[#11 type_alias_decl]: #15
[#13 semicolon]: #151
[#14 semicolon]: #150
[#15 semicolon]: #149
[#18 semicolon]: #148
[#20 variable_decl]: #146
[#21 global_constant_decl/0.1]: #143
[#21 ident]: #144
[#21 variable_ident_decl]: #145
[#23 ident]: #141
[#24 ident]: #140
[#25 function_header]: #138
[#26 additive_expression]: #46
[#26 and]: #54
[#26 array_type_decl]: #79
[#26 bang]: #51
[#26 binary_and_expression]: #43
[#26 binary_or_expression]: #44
[#26 binary_xor_expression]: #45
[#26 bitwise_expression]: #41
[#26 bool_literal]: #71
[#26 callable]: #62
[#26 const_literal]: #63
[#26 decimal_float_literal]: #96
[#26 depth_texture_type]: #108
[#26 expression]: #37
[#26 float16]: #75
[#26 float32]: #74
[#26 float_literal]: #70
[#26 hex_float_literal]: #97
[#26 ident]: #61
[#26 int32]: #76
[#26 int_literal]: #69
[#26 mat_prefix]: #68
[#26 minus]: #50
[#26 multiplicative_expression]: #48
[#26 multisampled_texture_type]: #110
[#26 paren_expression]: #64
[#26 paren_left]: #72
[#26 pointer]: #78
[#26 primary_expression]: #55
[#26 relational_expression]: #38
[#26 sampled_texture_type]: #109
[#26 sampler_type]: #107
[#26 shift_expression]: #42
[#26 short_circuit_and_expression]: #40
[#26 short_circuit_or_expression]: #39
[#26 singular_expression]: #49
[#26 star]: #53
[#26 storage_texture_type]: #111
[#26 texture_sampler_types]: #80
[#26 tilde]: #52
[#26 type_decl_without_ident]: #66
[#26 uint32]: #77
[#26 unary_expression]: #47
[#26 vec_prefix]: #67
[#30 attr]: #31
[#30 attribute]: #30
[#30 function_decl/0.0/0]: #36
[#30 global_constant_decl/1.0/0]: #35
[#30 global_variable_decl/0.0/0]: #34
[#31 ident]: #33
[#33 paren_left]: #226
[#39 or_or]: #224
[#40 and_and]: #222
[#42 equal_equal]: #215
[#42 greater_than]: #212
[#42 greater_than_equal]: #214
[#42 less_than]: #211
[#42 less_than_equal]: #213
[#42 not_equal]: #216
[#43 and]: #210
[#44 or]: #208
[#45 xor]: #206
[#46 minus]: #204
[#46 plus]: #203
[#47 shift_left]: #199
[#47 shift_right]: #200
[#48 forward_slash]: #195
[#48 modulo]: #196
[#48 star]: #194
[#50 and]: #54
[#50 array_type_decl]: #79
[#50 bang]: #51
[#50 bool_literal]: #71
[#50 callable]: #62
[#50 const_literal]: #63
[#50 decimal_float_literal]: #96
[#50 depth_texture_type]: #108
[#50 float16]: #75
[#50 float32]: #74
[#50 float_literal]: #70
[#50 hex_float_literal]: #97
[#50 ident]: #61
[#50 int32]: #76
[#50 int_literal]: #69
[#50 mat_prefix]: #68
[#50 minus]: #50
[#50 multisampled_texture_type]: #110
[#50 paren_expression]: #64
[#50 paren_left]: #72
[#50 pointer]: #78
[#50 primary_expression]: #55
[#50 sampled_texture_type]: #109
[#50 sampler_type]: #107
[#50 singular_expression]: #49
[#50 star]: #53
[#50 storage_texture_type]: #111
[#50 texture_sampler_types]: #80
[#50 tilde]: #52
[#50 type_decl_without_ident]: #66
[#50 uint32]: #77
[#50 unary_expression]: #193
[#50 vec_prefix]: #67
[#51 and]: #54
[#51 array_type_decl]: #79
[#51 bang]: #51
[#51 bool_literal]: #71
[#51 callable]: #62
[#51 const_literal]: #63
[#51 decimal_float_literal]: #96
[#51 depth_texture_type]: #108
[#51 float16]: #75
[#51 float32]: #74
[#51 float_literal]: #70
[#51 hex_float_literal]: #97
[#51 ident]: #61
[#51 int32]: #76
[#51 int_literal]: #69
[#51 mat_prefix]: #68
[#51 minus]: #50
[#51 multisampled_texture_type]: #110
[#51 paren_expression]: #64
[#51 paren_left]: #72
[#51 pointer]: #78
[#51 primary_expression]: #55
[#51 sampled_texture_type]: #109
[#51 sampler_type]: #107
[#51 singular_expression]: #49
[#51 star]: #53
[#51 storage_texture_type]: #111
[#51 texture_sampler_types]: #80
[#51 tilde]: #52
[#51 type_decl_without_ident]: #66
[#51 uint32]: #77
[#51 unary_expression]: #192
[#51 vec_prefix]: #67
[#52 and]: #54
[#52 array_type_decl]: #79
[#52 bang]: #51
[#52 bool_literal]: #71
[#52 callable]: #62
[#52 const_literal]: #63
[#52 decimal_float_literal]: #96
[#52 depth_texture_type]: #108
[#52 float16]: #75
[#52 float32]: #74
[#52 float_literal]: #70
[#52 hex_float_literal]: #97
[#52 ident]: #61
[#52 int32]: #76
[#52 int_literal]: #69
[#52 mat_prefix]: #68
[#52 minus]: #50
[#52 multisampled_texture_type]: #110
[#52 paren_expression]: #64
[#52 paren_left]: #72
[#52 pointer]: #78
[#52 primary_expression]: #55
[#52 sampled_texture_type]: #109
[#52 sampler_type]: #107
[#52 singular_expression]: #49
[#52 star]: #53
[#52 storage_texture_type]: #111
[#52 texture_sampler_types]: #80
[#52 tilde]: #52
[#52 type_decl_without_ident]: #66
[#52 uint32]: #77
[#52 unary_expression]: #191
[#52 vec_prefix]: #67
[#53 and]: #54
[#53 array_type_decl]: #79
[#53 bang]: #51
[#53 bool_literal]: #71
[#53 callable]: #62
[#53 const_literal]: #63
[#53 decimal_float_literal]: #96
[#53 depth_texture_type]: #108
[#53 float16]: #75
[#53 float32]: #74
[#53 float_literal]: #70
[#53 hex_float_literal]: #97
[#53 ident]: #61
[#53 int32]: #76
[#53 int_literal]: #69
[#53 mat_prefix]: #68
[#53 minus]: #50
[#53 multisampled_texture_type]: #110
[#53 paren_expression]: #64
[#53 paren_left]: #72
[#53 pointer]: #78
[#53 primary_expression]: #55
[#53 sampled_texture_type]: #109
[#53 sampler_type]: #107
[#53 singular_expression]: #49
[#53 star]: #53
[#53 storage_texture_type]: #111
[#53 texture_sampler_types]: #80
[#53 tilde]: #52
[#53 type_decl_without_ident]: #66
[#53 uint32]: #77
[#53 unary_expression]: #190
[#53 vec_prefix]: #67
[#54 and]: #54
[#54 array_type_decl]: #79
[#54 bang]: #51
[#54 bool_literal]: #71
[#54 callable]: #62
[#54 const_literal]: #63
[#54 decimal_float_literal]: #96
[#54 depth_texture_type]: #108
[#54 float16]: #75
[#54 float32]: #74
[#54 float_literal]: #70
[#54 hex_float_literal]: #97
[#54 ident]: #61
[#54 int32]: #76
[#54 int_literal]: #69
[#54 mat_prefix]: #68
[#54 minus]: #50
[#54 multisampled_texture_type]: #110
[#54 paren_expression]: #64
[#54 paren_left]: #72
[#54 pointer]: #78
[#54 primary_expression]: #55
[#54 sampled_texture_type]: #109
[#54 sampler_type]: #107
[#54 singular_expression]: #49
[#54 star]: #53
[#54 storage_texture_type]: #111
[#54 texture_sampler_types]: #80
[#54 tilde]: #52
[#54 type_decl_without_ident]: #66
[#54 uint32]: #77
[#54 unary_expression]: #189
[#54 vec_prefix]: #67
[#55 bracket_left]: #185
[#55 period]: #186
[#55 postfix_expression]: #184
[#55 singular_expression/0.1]: #183
[#62 argument_expression_list]: #181
[#62 paren_left]: #182
[#65 less_than]: #180
[#72 additive_expression]: #46
[#72 and]: #54
[#72 array_type_decl]: #79
[#72 bang]: #51
[#72 binary_and_expression]: #43
[#72 binary_or_expression]: #44
[#72 binary_xor_expression]: #45
[#72 bitwise_expression]: #41
[#72 bool_literal]: #71
[#72 callable]: #62
[#72 const_literal]: #63
[#72 decimal_float_literal]: #96
[#72 depth_texture_type]: #108
[#72 expression]: #179
[#72 float16]: #75
[#72 float32]: #74
[#72 float_literal]: #70
[#72 hex_float_literal]: #97
[#72 ident]: #61
[#72 int32]: #76
[#72 int_literal]: #69
[#72 mat_prefix]: #68
[#72 minus]: #50
[#72 multiplicative_expression]: #48
[#72 multisampled_texture_type]: #110
[#72 paren_expression]: #64
[#72 paren_left]: #72
[#72 pointer]: #78
[#72 primary_expression]: #55
[#72 relational_expression]: #38
[#72 sampled_texture_type]: #109
[#72 sampler_type]: #107
[#72 shift_expression]: #42
[#72 short_circuit_and_expression]: #40
[#72 short_circuit_or_expression]: #39
[#72 singular_expression]: #49
[#72 star]: #53
[#72 storage_texture_type]: #111
[#72 texture_sampler_types]: #80
[#72 tilde]: #52
[#72 type_decl_without_ident]: #66
[#72 uint32]: #77
[#72 unary_expression]: #47
[#72 vec_prefix]: #67
[#78 less_than]: #178
[#106 less_than]: #177
[#109 less_than]: #176
[#110 less_than]: #175
[#111 less_than]: #174
[#138 brace_left]: #173
[#138 compound_statement]: #172
[#139 ident]: #171
[#140 brace_left]: #169
[#140 struct_body_decl]: #168
[#141 equal]: #167
[#142 global_constant_decl/1.2]: #164
[#142 ident]: #165
[#142 variable_ident_decl]: #166
[#143 equal]: #163
[#144 colon]: #161
[#146 equal]: #159
[#146 global_variable_decl/0.2]: #158
[#147 less_than]: #156
[#147 variable_decl/0.1]: #154
[#147 variable_qualifier]: #155
[#154 ident]: #346
[#154 variable_decl/0.2]: #345
[#154 variable_ident_decl]: #347
[#156 address_space]: #344
[#159 additive_expression]: #46
[#159 and]: #54
[#159 array_type_decl]: #79
[#159 bang]: #51
[#159 binary_and_expression]: #43
[#159 binary_or_expression]: #44
[#159 binary_xor_expression]: #45
[#159 bitwise_expression]: #41
[#159 bool_literal]: #71
[#159 callable]: #62
[#159 const_literal]: #63
[#159 decimal_float_literal]: #96
[#159 depth_texture_type]: #108
[#159 expression]: #343
[#159 float16]: #75
[#159 float32]: #74
[#159 float_literal]: #70
[#159 hex_float_literal]: #97
[#159 ident]: #61
[#159 int32]: #76
[#159 int_literal]: #69
[#159 mat_prefix]: #68
[#159 minus]: #50
[#159 multiplicative_expression]: #48
[#159 multisampled_texture_type]: #110
[#159 paren_expression]: #64
[#159 paren_left]: #72
[#159 pointer]: #78
[#159 primary_expression]: #55
[#159 relational_expression]: #38
[#159 sampled_texture_type]: #109
[#159 sampler_type]: #107
[#159 shift_expression]: #42
[#159 short_circuit_and_expression]: #40
[#159 short_circuit_or_expression]: #39
[#159 singular_expression]: #49
[#159 star]: #53
[#159 storage_texture_type]: #111
[#159 texture_sampler_types]: #80
[#159 tilde]: #52
[#159 type_decl_without_ident]: #66
[#159 uint32]: #77
[#159 unary_expression]: #47
[#159 vec_prefix]: #67
[#161 array_type_decl]: #79
[#161 depth_texture_type]: #108
[#161 float16]: #75
[#161 float32]: #74
[#161 ident]: #262
[#161 int32]: #76
[#161 multisampled_texture_type]: #110
[#161 pointer]: #78
[#161 sampled_texture_type]: #109
[#161 sampler_type]: #107
[#161 storage_texture_type]: #111
[#161 texture_sampler_types]: #80
[#161 type_decl]: #342
[#161 type_decl_without_ident]: #263
[#161 uint32]: #77
[#163 additive_expression]: #46
[#163 and]: #54
[#163 array_type_decl]: #79
[#163 bang]: #51
[#163 binary_and_expression]: #43
[#163 binary_or_expression]: #44
[#163 binary_xor_expression]: #45
[#163 bitwise_expression]: #41
[#163 bool_literal]: #71
[#163 callable]: #62
[#163 const_literal]: #63
[#163 decimal_float_literal]: #96
[#163 depth_texture_type]: #108
[#163 expression]: #341
[#163 float16]: #75
[#163 float32]: #74
[#163 float_literal]: #70
[#163 hex_float_literal]: #97
[#163 ident]: #61
[#163 int32]: #76
[#163 int_literal]: #69
[#163 mat_prefix]: #68
[#163 minus]: #50
[#163 multiplicative_expression]: #48
[#163 multisampled_texture_type]: #110
[#163 paren_expression]: #64
[#163 paren_left]: #72
[#163 pointer]: #78
[#163 primary_expression]: #55
[#163 relational_expression]: #38
[#163 sampled_texture_type]: #109
[#163 sampler_type]: #107
[#163 shift_expression]: #42
[#163 short_circuit_and_expression]: #40
[#163 short_circuit_or_expression]: #39
[#163 singular_expression]: #49
[#163 star]: #53
[#163 storage_texture_type]: #111
[#163 texture_sampler_types]: #80
[#163 tilde]: #52
[#163 type_decl_without_ident]: #66
[#163 uint32]: #77
[#163 unary_expression]: #47
[#163 vec_prefix]: #67
[#164 equal]: #340
[#164 global_constant_decl/1.3]: #339
[#165 colon]: #161
[#167 array_type_decl]: #79
[#167 depth_texture_type]: #108
[#167 float16]: #75
[#167 float32]: #74
[#167 ident]: #262
[#167 int32]: #76
[#167 multisampled_texture_type]: #110
[#167 pointer]: #78
[#167 sampled_texture_type]: #109
[#167 sampler_type]: #107
[#167 storage_texture_type]: #111
[#167 texture_sampler_types]: #80
[#167 type_decl]: #338
[#167 type_decl_without_ident]: #263
[#167 uint32]: #77
[#169 attr]: #31
[#169 attribute]: #337
[#169 struct_body_decl/0.1]: #331
[#169 struct_body_decl/0.1/0]: #332
[#169 struct_body_decl/0.1/0/0.0]: #333
[#169 struct_member]: #334
[#169 struct_member/0.0]: #335
[#169 struct_member/0.0/0]: #336
[#171 paren_left]: #330
[#173 and]: #329
[#173 assignment_statement]: #307
[#173 brace_left]: #173
[#173 break_statement]: #304
[#173 compound_statement]: #308
[#173 compound_statement/0.1]: #292
[#173 compound_statement/0.1/0]: #293
[#173 continue_statement]: #305
[#173 decrement_statement]: #310
[#173 for_statement]: #300
[#173 func_call_statement]: #302
[#173 ident]: #318
[#173 if_statement]: #297
[#173 increment_statement]: #309
[#173 lhs_expression]: #324
[#173 lhs_expression/0.0]: #325
[#173 lhs_expression/0.0/0]: #326
[#173 lhs_expression/0.0/0/0.0]: #327
[#173 loop_statement]: #299
[#173 return_statement]: #296
[#173 semicolon]: #295
[#173 star]: #328
[#173 statement]: #294
[#173 static_assert_statement]: #311
[#173 switch_statement]: #298
[#173 variable_decl]: #319
[#173 variable_statement]: #303
[#173 while_statement]: #301
[#174 texel_format]: #275
[#175 array_type_decl]: #79
[#175 depth_texture_type]: #108
[#175 float16]: #75
[#175 float32]: #74
[#175 ident]: #262
[#175 int32]: #76
[#175 multisampled_texture_type]: #110
[#175 pointer]: #78
[#175 sampled_texture_type]: #109
[#175 sampler_type]: #107
[#175 storage_texture_type]: #111
[#175 texture_sampler_types]: #80
[#175 type_decl]: #274
[#175 type_decl_without_ident]: #263
[#175 uint32]: #77
[#176 array_type_decl]: #79
[#176 depth_texture_type]: #108
[#176 float16]: #75
[#176 float32]: #74
[#176 ident]: #262
[#176 int32]: #76
[#176 multisampled_texture_type]: #110
[#176 pointer]: #78
[#176 sampled_texture_type]: #109
[#176 sampler_type]: #107
[#176 storage_texture_type]: #111
[#176 texture_sampler_types]: #80
[#176 type_decl]: #273
[#176 type_decl_without_ident]: #263
[#176 uint32]: #77
[#177 array_type_decl]: #79
[#177 depth_texture_type]: #108
[#177 float16]: #75
[#177 float32]: #74
[#177 ident]: #262
[#177 int32]: #76
[#177 multisampled_texture_type]: #110
[#177 pointer]: #78
[#177 sampled_texture_type]: #109
[#177 sampler_type]: #107
[#177 storage_texture_type]: #111
[#177 texture_sampler_types]: #80
[#177 type_decl]: #272
[#177 type_decl_without_ident]: #263
[#177 uint32]: #77
[#178 address_space]: #266
[#179 paren_right]: #264
[#180 array_type_decl]: #79
[#180 depth_texture_type]: #108
[#180 float16]: #75
[#180 float32]: #74
[#180 ident]: #262
[#180 int32]: #76
[#180 multisampled_texture_type]: #110
[#180 pointer]: #78
[#180 sampled_texture_type]: #109
[#180 sampler_type]: #107
[#180 storage_texture_type]: #111
[#180 texture_sampler_types]: #80
[#180 type_decl]: #261
[#180 type_decl_without_ident]: #263
[#180 uint32]: #77
[#182 additive_expression]: #46
[#182 and]: #54
[#182 argument_expression_list/0.1]: #256
[#182 argument_expression_list/0.1/0.0]: #257
[#182 argument_expression_list/0.1/0.0/0]: #258
[#182 argument_expression_list/0.1/0.0/0/0.0]: #259
[#182 array_type_decl]: #79
[#182 bang]: #51
[#182 binary_and_expression]: #43
[#182 binary_or_expression]: #44
[#182 binary_xor_expression]: #45
[#182 bitwise_expression]: #41
[#182 bool_literal]: #71
[#182 callable]: #62
[#182 const_literal]: #63
[#182 decimal_float_literal]: #96
[#182 depth_texture_type]: #108
[#182 expression]: #260
[#182 float16]: #75
[#182 float32]: #74
[#182 float_literal]: #70
[#182 hex_float_literal]: #97
[#182 ident]: #61
[#182 int32]: #76
[#182 int_literal]: #69
[#182 mat_prefix]: #68
[#182 minus]: #50
[#182 multiplicative_expression]: #48
[#182 multisampled_texture_type]: #110
[#182 paren_expression]: #64
[#182 paren_left]: #72
[#182 pointer]: #78
[#182 primary_expression]: #55
[#182 relational_expression]: #38
[#182 sampled_texture_type]: #109
[#182 sampler_type]: #107
[#182 shift_expression]: #42
[#182 short_circuit_and_expression]: #40
[#182 short_circuit_or_expression]: #39
[#182 singular_expression]: #49
[#182 star]: #53
[#182 storage_texture_type]: #111
[#182 texture_sampler_types]: #80
[#182 tilde]: #52
[#182 type_decl_without_ident]: #66
[#182 uint32]: #77
[#182 unary_expression]: #47
[#182 vec_prefix]: #67
[#185 additive_expression]: #46
[#185 and]: #54
[#185 array_type_decl]: #79
[#185 bang]: #51
[#185 binary_and_expression]: #43
[#185 binary_or_expression]: #44
[#185 binary_xor_expression]: #45
[#185 bitwise_expression]: #41
[#185 bool_literal]: #71
[#185 callable]: #62
[#185 const_literal]: #63
[#185 decimal_float_literal]: #96
[#185 depth_texture_type]: #108
[#185 expression]: #255
[#185 float16]: #75
[#185 float32]: #74
[#185 float_literal]: #70
[#185 hex_float_literal]: #97
[#185 ident]: #61
[#185 int32]: #76
[#185 int_literal]: #69
[#185 mat_prefix]: #68
[#185 minus]: #50
[#185 multiplicative_expression]: #48
[#185 multisampled_texture_type]: #110
[#185 paren_expression]: #64
[#185 paren_left]: #72
[#185 pointer]: #78
[#185 primary_expression]: #55
[#185 relational_expression]: #38
[#185 sampled_texture_type]: #109
[#185 sampler_type]: #107
[#185 shift_expression]: #42
[#185 short_circuit_and_expression]: #40
[#185 short_circuit_or_expression]: #39
[#185 singular_expression]: #49
[#185 star]: #53
[#185 storage_texture_type]: #111
[#185 texture_sampler_types]: #80
[#185 tilde]: #52
[#185 type_decl_without_ident]: #66
[#185 uint32]: #77
[#185 unary_expression]: #47
[#185 vec_prefix]: #67
[#186 ident]: #254
[#194 and]: #54
[#194 array_type_decl]: #79
[#194 bang]: #51
[#194 bool_literal]: #71
[#194 callable]: #62
[#194 const_literal]: #63
[#194 decimal_float_literal]: #96
[#194 depth_texture_type]: #108
[#194 float16]: #75
[#194 float32]: #74
[#194 float_literal]: #70
[#194 hex_float_literal]: #97
[#194 ident]: #61
[#194 int32]: #76
[#194 int_literal]: #69
[#194 mat_prefix]: #68
[#194 minus]: #50
[#194 multisampled_texture_type]: #110
[#194 paren_expression]: #64
[#194 paren_left]: #72
[#194 pointer]: #78
[#194 primary_expression]: #55
[#194 sampled_texture_type]: #109
[#194 sampler_type]: #107
[#194 singular_expression]: #49
[#194 star]: #53
[#194 storage_texture_type]: #111
[#194 texture_sampler_types]: #80
[#194 tilde]: #52
[#194 type_decl_without_ident]: #66
[#194 uint32]: #77
[#194 unary_expression]: #253
[#194 vec_prefix]: #67
[#195 and]: #54
[#195 array_type_decl]: #79
[#195 bang]: #51
[#195 bool_literal]: #71
[#195 callable]: #62
[#195 const_literal]: #63
[#195 decimal_float_literal]: #96
[#195 depth_texture_type]: #108
[#195 float16]: #75
[#195 float32]: #74
[#195 float_literal]: #70
[#195 hex_float_literal]: #97
[#195 ident]: #61
[#195 int32]: #76
[#195 int_literal]: #69
[#195 mat_prefix]: #68
[#195 minus]: #50
[#195 multisampled_texture_type]: #110
[#195 paren_expression]: #64
[#195 paren_left]: #72
[#195 pointer]: #78
[#195 primary_expression]: #55
[#195 sampled_texture_type]: #109
[#195 sampler_type]: #107
[#195 singular_expression]: #49
[#195 star]: #53
[#195 storage_texture_type]: #111
[#195 texture_sampler_types]: #80
[#195 tilde]: #52
[#195 type_decl_without_ident]: #66
[#195 uint32]: #77
[#195 unary_expression]: #252
[#195 vec_prefix]: #67
[#196 and]: #54
[#196 array_type_decl]: #79
[#196 bang]: #51
[#196 bool_literal]: #71
[#196 callable]: #62
[#196 const_literal]: #63
[#196 decimal_float_literal]: #96
[#196 depth_texture_type]: #108
[#196 float16]: #75
[#196 float32]: #74
[#196 float_literal]: #70
[#196 hex_float_literal]: #97
[#196 ident]: #61
[#196 int32]: #76
[#196 int_literal]: #69
[#196 mat_prefix]: #68
[#196 minus]: #50
[#196 multisampled_texture_type]: #110
[#196 paren_expression]: #64
[#196 paren_left]: #72
[#196 pointer]: #78
[#196 primary_expression]: #55
[#196 sampled_texture_type]: #109
[#196 sampler_type]: #107
[#196 singular_expression]: #49
[#196 star]: #53
[#196 storage_texture_type]: #111
[#196 texture_sampler_types]: #80
[#196 tilde]: #52
[#196 type_decl_without_ident]: #66
[#196 uint32]: #77
[#196 unary_expression]: #251
[#196 vec_prefix]: #67
[#199 and]: #54
[#199 array_type_decl]: #79
[#199 bang]: #51
[#199 bool_literal]: #71
[#199 callable]: #62
[#199 const_literal]: #63
[#199 decimal_float_literal]: #96
[#199 depth_texture_type]: #108
[#199 float16]: #75
[#199 float32]: #74
[#199 float_literal]: #70
[#199 hex_float_literal]: #97
[#199 ident]: #61
[#199 int32]: #76
[#199 int_literal]: #69
[#199 mat_prefix]: #68
[#199 minus]: #50
[#199 multisampled_texture_type]: #110
[#199 paren_expression]: #64
[#199 paren_left]: #72
[#199 pointer]: #78
[#199 primary_expression]: #55
[#199 sampled_texture_type]: #109
[#199 sampler_type]: #107
[#199 singular_expression]: #49
[#199 star]: #53
[#199 storage_texture_type]: #111
[#199 texture_sampler_types]: #80
[#199 tilde]: #52
[#199 type_decl_without_ident]: #66
[#199 uint32]: #77
[#199 unary_expression]: #250
[#199 vec_prefix]: #67
[#200 and]: #54
[#200 array_type_decl]: #79
[#200 bang]: #51
[#200 bool_literal]: #71
[#200 callable]: #62
[#200 const_literal]: #63
[#200 decimal_float_literal]: #96
[#200 depth_texture_type]: #108
[#200 float16]: #75
[#200 float32]: #74
[#200 float_literal]: #70
[#200 hex_float_literal]: #97
[#200 ident]: #61
[#200 int32]: #76
[#200 int_literal]: #69
[#200 mat_prefix]: #68
[#200 minus]: #50
[#200 multisampled_texture_type]: #110
[#200 paren_expression]: #64
[#200 paren_left]: #72
[#200 pointer]: #78
[#200 primary_expression]: #55
[#200 sampled_texture_type]: #109
[#200 sampler_type]: #107
[#200 singular_expression]: #49
[#200 star]: #53
[#200 storage_texture_type]: #111
[#200 texture_sampler_types]: #80
[#200 tilde]: #52
[#200 type_decl_without_ident]: #66
[#200 uint32]: #77
[#200 unary_expression]: #249
[#200 vec_prefix]: #67
[#203 and]: #54
[#203 array_type_decl]: #79
[#203 bang]: #51
[#203 bool_literal]: #71
[#203 callable]: #62
[#203 const_literal]: #63
[#203 decimal_float_literal]: #96
[#203 depth_texture_type]: #108
[#203 float16]: #75
[#203 float32]: #74
[#203 float_literal]: #70
[#203 hex_float_literal]: #97
[#203 ident]: #61
[#203 int32]: #76
[#203 int_literal]: #69
[#203 mat_prefix]: #68
[#203 minus]: #50
[#203 multiplicative_expression]: #248
[#203 multisampled_texture_type]: #110
[#203 paren_expression]: #64
[#203 paren_left]: #72
[#203 pointer]: #78
[#203 primary_expression]: #55
[#203 sampled_texture_type]: #109
[#203 sampler_type]: #107
[#203 singular_expression]: #49
[#203 star]: #53
[#203 storage_texture_type]: #111
[#203 texture_sampler_types]: #80
[#203 tilde]: #52
[#203 type_decl_without_ident]: #66
[#203 uint32]: #77
[#203 unary_expression]: #247
[#203 vec_prefix]: #67
[#204 and]: #54
[#204 array_type_decl]: #79
[#204 bang]: #51
[#204 bool_literal]: #71
[#204 callable]: #62
[#204 const_literal]: #63
[#204 decimal_float_literal]: #96
[#204 depth_texture_type]: #108
[#204 float16]: #75
[#204 float32]: #74
[#204 float_literal]: #70
[#204 hex_float_literal]: #97
[#204 ident]: #61
[#204 int32]: #76
[#204 int_literal]: #69
[#204 mat_prefix]: #68
[#204 minus]: #50
[#204 multiplicative_expression]: #246
[#204 multisampled_texture_type]: #110
[#204 paren_expression]: #64
[#204 paren_left]: #72
[#204 pointer]: #78
[#204 primary_expression]: #55
[#204 sampled_texture_type]: #109
[#204 sampler_type]: #107
[#204 singular_expression]: #49
[#204 star]: #53
[#204 storage_texture_type]: #111
[#204 texture_sampler_types]: #80
[#204 tilde]: #52
[#204 type_decl_without_ident]: #66
[#204 uint32]: #77
[#204 unary_expression]: #247
[#204 vec_prefix]: #67
[#206 and]: #54
[#206 array_type_decl]: #79
[#206 bang]: #51
[#206 bool_literal]: #71
[#206 callable]: #62
[#206 const_literal]: #63
[#206 decimal_float_literal]: #96
[#206 depth_texture_type]: #108
[#206 float16]: #75
[#206 float32]: #74
[#206 float_literal]: #70
[#206 hex_float_literal]: #97
[#206 ident]: #61
[#206 int32]: #76
[#206 int_literal]: #69
[#206 mat_prefix]: #68
[#206 minus]: #50
[#206 multisampled_texture_type]: #110
[#206 paren_expression]: #64
[#206 paren_left]: #72
[#206 pointer]: #78
[#206 primary_expression]: #55
[#206 sampled_texture_type]: #109
[#206 sampler_type]: #107
[#206 singular_expression]: #49
[#206 star]: #53
[#206 storage_texture_type]: #111
[#206 texture_sampler_types]: #80
[#206 tilde]: #52
[#206 type_decl_without_ident]: #66
[#206 uint32]: #77
[#206 unary_expression]: #245
[#206 vec_prefix]: #67
[#208 and]: #54
[#208 array_type_decl]: #79
[#208 bang]: #51
[#208 bool_literal]: #71
[#208 callable]: #62
[#208 const_literal]: #63
[#208 decimal_float_literal]: #96
[#208 depth_texture_type]: #108
[#208 float16]: #75
[#208 float32]: #74
[#208 float_literal]: #70
[#208 hex_float_literal]: #97
[#208 ident]: #61
[#208 int32]: #76
[#208 int_literal]: #69
[#208 mat_prefix]: #68
[#208 minus]: #50
[#208 multisampled_texture_type]: #110
[#208 paren_expression]: #64
[#208 paren_left]: #72
[#208 pointer]: #78
[#208 primary_expression]: #55
[#208 sampled_texture_type]: #109
[#208 sampler_type]: #107
[#208 singular_expression]: #49
[#208 star]: #53
[#208 storage_texture_type]: #111
[#208 texture_sampler_types]: #80
[#208 tilde]: #52
[#208 type_decl_without_ident]: #66
[#208 uint32]: #77
[#208 unary_expression]: #244
[#208 vec_prefix]: #67
[#210 and]: #54
[#210 array_type_decl]: #79
[#210 bang]: #51
[#210 bool_literal]: #71
[#210 callable]: #62
[#210 const_literal]: #63
[#210 decimal_float_literal]: #96
[#210 depth_texture_type]: #108
[#210 float16]: #75
[#210 float32]: #74
[#210 float_literal]: #70
[#210 hex_float_literal]: #97
[#210 ident]: #61
[#210 int32]: #76
[#210 int_literal]: #69
[#210 mat_prefix]: #68
[#210 minus]: #50
[#210 multisampled_texture_type]: #110
[#210 paren_expression]: #64
[#210 paren_left]: #72
[#210 pointer]: #78
[#210 primary_expression]: #55
[#210 sampled_texture_type]: #109
[#210 sampler_type]: #107
[#210 singular_expression]: #49
[#210 star]: #53
[#210 storage_texture_type]: #111
[#210 texture_sampler_types]: #80
[#210 tilde]: #52
[#210 type_decl_without_ident]: #66
[#210 uint32]: #77
[#210 unary_expression]: #243
[#210 vec_prefix]: #67
[#211 additive_expression]: #46
[#211 and]: #54
[#211 array_type_decl]: #79
[#211 bang]: #51
[#211 bool_literal]: #71
[#211 callable]: #62
[#211 const_literal]: #63
[#211 decimal_float_literal]: #96
[#211 depth_texture_type]: #108
[#211 float16]: #75
[#211 float32]: #74
[#211 float_literal]: #70
[#211 hex_float_literal]: #97
[#211 ident]: #61
[#211 int32]: #76
[#211 int_literal]: #69
[#211 mat_prefix]: #68
[#211 minus]: #50
[#211 multiplicative_expression]: #48
[#211 multisampled_texture_type]: #110
[#211 paren_expression]: #64
[#211 paren_left]: #72
[#211 pointer]: #78
[#211 primary_expression]: #55
[#211 sampled_texture_type]: #109
[#211 sampler_type]: #107
[#211 shift_expression]: #242
[#211 singular_expression]: #49
[#211 star]: #53
[#211 storage_texture_type]: #111
[#211 texture_sampler_types]: #80
[#211 tilde]: #52
[#211 type_decl_without_ident]: #66
[#211 uint32]: #77
[#211 unary_expression]: #235
[#211 vec_prefix]: #67
[#212 additive_expression]: #46
[#212 and]: #54
[#212 array_type_decl]: #79
[#212 bang]: #51
[#212 bool_literal]: #71
[#212 callable]: #62
[#212 const_literal]: #63
[#212 decimal_float_literal]: #96
[#212 depth_texture_type]: #108
[#212 float16]: #75
[#212 float32]: #74
[#212 float_literal]: #70
[#212 hex_float_literal]: #97
[#212 ident]: #61
[#212 int32]: #76
[#212 int_literal]: #69
[#212 mat_prefix]: #68
[#212 minus]: #50
[#212 multiplicative_expression]: #48
[#212 multisampled_texture_type]: #110
[#212 paren_expression]: #64
[#212 paren_left]: #72
[#212 pointer]: #78
[#212 primary_expression]: #55
[#212 sampled_texture_type]: #109
[#212 sampler_type]: #107
[#212 shift_expression]: #241
[#212 singular_expression]: #49
[#212 star]: #53
[#212 storage_texture_type]: #111
[#212 texture_sampler_types]: #80
[#212 tilde]: #52
[#212 type_decl_without_ident]: #66
[#212 uint32]: #77
[#212 unary_expression]: #235
[#212 vec_prefix]: #67
[#213 additive_expression]: #46
[#213 and]: #54
[#213 array_type_decl]: #79
[#213 bang]: #51
[#213 bool_literal]: #71
[#213 callable]: #62
[#213 const_literal]: #63
[#213 decimal_float_literal]: #96
[#213 depth_texture_type]: #108
[#213 float16]: #75
[#213 float32]: #74
[#213 float_literal]: #70
[#213 hex_float_literal]: #97
[#213 ident]: #61
[#213 int32]: #76
[#213 int_literal]: #69
[#213 mat_prefix]: #68
[#213 minus]: #50
[#213 multiplicative_expression]: #48
[#213 multisampled_texture_type]: #110
[#213 paren_expression]: #64
[#213 paren_left]: #72
[#213 pointer]: #78
[#213 primary_expression]: #55
[#213 sampled_texture_type]: #109
[#213 sampler_type]: #107
[#213 shift_expression]: #240
[#213 singular_expression]: #49
[#213 star]: #53
[#213 storage_texture_type]: #111
[#213 texture_sampler_types]: #80
[#213 tilde]: #52
[#213 type_decl_without_ident]: #66
[#213 uint32]: #77
[#213 unary_expression]: #235
[#213 vec_prefix]: #67
[#214 additive_expression]: #46
[#214 and]: #54
[#214 array_type_decl]: #79
[#214 bang]: #51
[#214 bool_literal]: #71
[#214 callable]: #62
[#214 const_literal]: #63
[#214 decimal_float_literal]: #96
[#214 depth_texture_type]: #108
[#214 float16]: #75
[#214 float32]: #74
[#214 float_literal]: #70
[#214 hex_float_literal]: #97
[#214 ident]: #61
[#214 int32]: #76
[#214 int_literal]: #69
[#214 mat_prefix]: #68
[#214 minus]: #50
[#214 multiplicative_expression]: #48
[#214 multisampled_texture_type]: #110
[#214 paren_expression]: #64
[#214 paren_left]: #72
[#214 pointer]: #78
[#214 primary_expression]: #55
[#214 sampled_texture_type]: #109
[#214 sampler_type]: #107
[#214 shift_expression]: #239
[#214 singular_expression]: #49
[#214 star]: #53
[#214 storage_texture_type]: #111
[#214 texture_sampler_types]: #80
[#214 tilde]: #52
[#214 type_decl_without_ident]: #66
[#214 uint32]: #77
[#214 unary_expression]: #235
[#214 vec_prefix]: #67
[#215 additive_expression]: #46
[#215 and]: #54
[#215 array_type_decl]: #79
[#215 bang]: #51
[#215 bool_literal]: #71
[#215 callable]: #62
[#215 const_literal]: #63
[#215 decimal_float_literal]: #96
[#215 depth_texture_type]: #108
[#215 float16]: #75
[#215 float32]: #74
[#215 float_literal]: #70
[#215 hex_float_literal]: #97
[#215 ident]: #61
[#215 int32]: #76
[#215 int_literal]: #69
[#215 mat_prefix]: #68
[#215 minus]: #50
[#215 multiplicative_expression]: #48
[#215 multisampled_texture_type]: #110
[#215 paren_expression]: #64
[#215 paren_left]: #72
[#215 pointer]: #78
[#215 primary_expression]: #55
[#215 sampled_texture_type]: #109
[#215 sampler_type]: #107
[#215 shift_expression]: #238
[#215 singular_expression]: #49
[#215 star]: #53
[#215 storage_texture_type]: #111
[#215 texture_sampler_types]: #80
[#215 tilde]: #52
[#215 type_decl_without_ident]: #66
[#215 uint32]: #77
[#215 unary_expression]: #235
[#215 vec_prefix]: #67
[#216 additive_expression]: #46
[#216 and]: #54
[#216 array_type_decl]: #79
[#216 bang]: #51
[#216 bool_literal]: #71
[#216 callable]: #62
[#216 const_literal]: #63
[#216 decimal_float_literal]: #96
[#216 depth_texture_type]: #108
[#216 float16]: #75
[#216 float32]: #74
[#216 float_literal]: #70
[#216 hex_float_literal]: #97
[#216 ident]: #61
[#216 int32]: #76
[#216 int_literal]: #69
[#216 mat_prefix]: #68
[#216 minus]: #50
[#216 multiplicative_expression]: #48
[#216 multisampled_texture_type]: #110
[#216 paren_expression]: #64
[#216 paren_left]: #72
[#216 pointer]: #78
[#216 primary_expression]: #55
[#216 sampled_texture_type]: #109
[#216 sampler_type]: #107
[#216 shift_expression]: #237
[#216 singular_expression]: #49
[#216 star]: #53
[#216 storage_texture_type]: #111
[#216 texture_sampler_types]: #80
[#216 tilde]: #52
[#216 type_decl_without_ident]: #66
[#216 uint32]: #77
[#216 unary_expression]: #235
[#216 vec_prefix]: #67
[#222 additive_expression]: #46
[#222 and]: #54
[#222 array_type_decl]: #79
[#222 bang]: #51
[#222 bool_literal]: #71
[#222 callable]: #62
[#222 const_literal]: #63
[#222 decimal_float_literal]: #96
[#222 depth_texture_type]: #108
[#222 float16]: #75
[#222 float32]: #74
[#222 float_literal]: #70
[#222 hex_float_literal]: #97
[#222 ident]: #61
[#222 int32]: #76
[#222 int_literal]: #69
[#222 mat_prefix]: #68
[#222 minus]: #50
[#222 multiplicative_expression]: #48
[#222 multisampled_texture_type]: #110
[#222 paren_expression]: #64
[#222 paren_left]: #72
[#222 pointer]: #78
[#222 primary_expression]: #55
[#222 relational_expression]: #236
[#222 sampled_texture_type]: #109
[#222 sampler_type]: #107
[#222 shift_expression]: #42
[#222 singular_expression]: #49
[#222 star]: #53
[#222 storage_texture_type]: #111
[#222 texture_sampler_types]: #80
[#222 tilde]: #52
[#222 type_decl_without_ident]: #66
[#222 uint32]: #77
[#222 unary_expression]: #235
[#222 vec_prefix]: #67
[#224 additive_expression]: #46
[#224 and]: #54
[#224 array_type_decl]: #79
[#224 bang]: #51
[#224 bool_literal]: #71
[#224 callable]: #62
[#224 const_literal]: #63
[#224 decimal_float_literal]: #96
[#224 depth_texture_type]: #108
[#224 float16]: #75
[#224 float32]: #74
[#224 float_literal]: #70
[#224 hex_float_literal]: #97
[#224 ident]: #61
[#224 int32]: #76
[#224 int_literal]: #69
[#224 mat_prefix]: #68
[#224 minus]: #50
[#224 multiplicative_expression]: #48
[#224 multisampled_texture_type]: #110
[#224 paren_expression]: #64
[#224 paren_left]: #72
[#224 pointer]: #78
[#224 primary_expression]: #55
[#224 relational_expression]: #234
[#224 sampled_texture_type]: #109
[#224 sampler_type]: #107
[#224 shift_expression]: #42
[#224 singular_expression]: #49
[#224 star]: #53
[#224 storage_texture_type]: #111
[#224 texture_sampler_types]: #80
[#224 tilde]: #52
[#224 type_decl_without_ident]: #66
[#224 uint32]: #77
[#224 unary_expression]: #235
[#224 vec_prefix]: #67
[#226 attribute/0.3]: #227
[#226 attribute/0.3/0]: #228
[#226 attribute/0.3/0/0.0]: #229
[#226 decimal_float_literal]: #96
[#226 float_literal]: #231
[#226 hex_float_literal]: #97
[#226 ident]: #233
[#226 int_literal]: #232
[#226 literal_or_ident]: #230
[#227 decimal_float_literal]: #96
[#227 float_literal]: #231
[#227 hex_float_literal]: #97
[#227 ident]: #233
[#227 int_literal]: #232
[#227 literal_or_ident]: #442
[#229 attribute/0.3/0]: #441
[#229 attribute/0.3/0/0.0]: #229
[#229 decimal_float_literal]: #96
[#229 float_literal]: #231
[#229 hex_float_literal]: #97
[#229 ident]: #233
[#229 int_literal]: #232
[#229 literal_or_ident]: #230
[#230 comma]: #440
[#235 shift_left]: #199
[#235 shift_right]: #200
[#246 forward_slash]: #195
[#246 modulo]: #196
[#246 star]: #194
[#248 forward_slash]: #195
[#248 modulo]: #196
[#248 star]: #194
[#254 bracket_left]: #185
[#254 period]: #186
[#254 postfix_expression]: #439
[#254 postfix_expression/1.2]: #438
[#255 bracket_right]: #436
[#256 paren_right]: #435
[#257 additive_expression]: #46
[#257 and]: #54
[#257 array_type_decl]: #79
[#257 bang]: #51
[#257 binary_and_expression]: #43
[#257 binary_or_expression]: #44
[#257 binary_xor_expression]: #45
[#257 bitwise_expression]: #41
[#257 bool_literal]: #71
[#257 callable]: #62
[#257 const_literal]: #63
[#257 decimal_float_literal]: #96
[#257 depth_texture_type]: #108
[#257 expression]: #434
[#257 float16]: #75
[#257 float32]: #74
[#257 float_literal]: #70
[#257 hex_float_literal]: #97
[#257 ident]: #61
[#257 int32]: #76
[#257 int_literal]: #69
[#257 mat_prefix]: #68
[#257 minus]: #50
[#257 multiplicative_expression]: #48
[#257 multisampled_texture_type]: #110
[#257 paren_expression]: #64
[#257 paren_left]: #72
[#257 pointer]: #78
[#257 primary_expression]: #55
[#257 relational_expression]: #38
[#257 sampled_texture_type]: #109
[#257 sampler_type]: #107
[#257 shift_expression]: #42
[#257 short_circuit_and_expression]: #40
[#257 short_circuit_or_expression]: #39
[#257 singular_expression]: #49
[#257 star]: #53
[#257 storage_texture_type]: #111
[#257 texture_sampler_types]: #80
[#257 tilde]: #52
[#257 type_decl_without_ident]: #66
[#257 uint32]: #77
[#257 unary_expression]: #47
[#257 vec_prefix]: #67
[#259 additive_expression]: #46
[#259 and]: #54
[#259 argument_expression_list/0.1/0.0/0]: #433
[#259 argument_expression_list/0.1/0.0/0/0.0]: #259
[#259 array_type_decl]: #79
[#259 bang]: #51
[#259 binary_and_expression]: #43
[#259 binary_or_expression]: #44
[#259 binary_xor_expression]: #45
[#259 bitwise_expression]: #41
[#259 bool_literal]: #71
[#259 callable]: #62
[#259 const_literal]: #63
[#259 decimal_float_literal]: #96
[#259 depth_texture_type]: #108
[#259 expression]: #260
[#259 float16]: #75
[#259 float32]: #74
[#259 float_literal]: #70
[#259 hex_float_literal]: #97
[#259 ident]: #61
[#259 int32]: #76
[#259 int_literal]: #69
[#259 mat_prefix]: #68
[#259 minus]: #50
[#259 multiplicative_expression]: #48
[#259 multisampled_texture_type]: #110
[#259 paren_expression]: #64
[#259 paren_left]: #72
[#259 pointer]: #78
[#259 primary_expression]: #55
[#259 relational_expression]: #38
[#259 sampled_texture_type]: #109
[#259 sampler_type]: #107
[#259 shift_expression]: #42
[#259 short_circuit_and_expression]: #40
[#259 short_circuit_or_expression]: #39
[#259 singular_expression]: #49
[#259 star]: #53
[#259 storage_texture_type]: #111
[#259 texture_sampler_types]: #80
[#259 tilde]: #52
[#259 type_decl_without_ident]: #66
[#259 uint32]: #77
[#259 unary_expression]: #47
[#259 vec_prefix]: #67
[#260 comma]: #432
[#261 greater_than]: #431
[#266 comma]: #430
[#272 array_type_decl/0.3]: #428
[#272 comma]: #429
[#273 greater_than]: #427
[#274 greater_than]: #426
[#275 comma]: #425
[#292 brace_right]: #423
[#294 and]: #329
[#294 assignment_statement]: #307
[#294 brace_left]: #173
[#294 break_statement]: #304
[#294 compound_statement]: #308
[#294 compound_statement/0.1/0]: #422
[#294 continue_statement]: #305
[#294 decrement_statement]: #310
[#294 for_statement]: #300
[#294 func_call_statement]: #302
[#294 ident]: #318
[#294 if_statement]: #297
[#294 increment_statement]: #309
[#294 lhs_expression]: #324
[#294 lhs_expression/0.0]: #325
[#294 lhs_expression/0.0/0]: #326
[#294 lhs_expression/0.0/0/0.0]: #327
[#294 loop_statement]: #299
[#294 return_statement]: #296
[#294 semicolon]: #295
[#294 star]: #328
[#294 statement]: #294
[#294 static_assert_statement]: #311
[#294 switch_statement]: #298
[#294 variable_decl]: #319
[#294 variable_statement]: #303
[#294 while_statement]: #301
[#296 semicolon]: #421
[#302 semicolon]: #420
[#303 semicolon]: #419
[#304 semicolon]: #418
[#305 semicolon]: #417
[#306 semicolon]: #416
[#307 semicolon]: #415
[#309 semicolon]: #414
[#310 semicolon]: #413
[#311 semicolon]: #412
[#312 additive_expression]: #46
[#312 and]: #54
[#312 array_type_decl]: #79
[#312 bang]: #51
[#312 binary_and_expression]: #43
[#312 binary_or_expression]: #44
[#312 binary_xor_expression]: #45
[#312 bitwise_expression]: #41
[#312 bool_literal]: #71
[#312 callable]: #62
[#312 const_literal]: #63
[#312 decimal_float_literal]: #96
[#312 depth_texture_type]: #108
[#312 expression]: #411
[#312 float16]: #75
[#312 float32]: #74
[#312 float_literal]: #70
[#312 hex_float_literal]: #97
[#312 ident]: #61
[#312 int32]: #76
[#312 int_literal]: #69
[#312 mat_prefix]: #68
[#312 minus]: #50
[#312 multiplicative_expression]: #48
[#312 multisampled_texture_type]: #110
[#312 paren_expression]: #64
[#312 paren_left]: #72
[#312 pointer]: #78
[#312 primary_expression]: #55
[#312 relational_expression]: #38
[#312 return_statement/0.1]: #410
[#312 sampled_texture_type]: #109
[#312 sampler_type]: #107
[#312 shift_expression]: #42
[#312 short_circuit_and_expression]: #40
[#312 short_circuit_or_expression]: #39
[#312 singular_expression]: #49
[#312 star]: #53
[#312 storage_texture_type]: #111
[#312 texture_sampler_types]: #80
[#312 tilde]: #52
[#312 type_decl_without_ident]: #66
[#312 uint32]: #77
[#312 unary_expression]: #47
[#312 vec_prefix]: #67
[#313 additive_expression]: #46
[#313 and]: #54
[#313 array_type_decl]: #79
[#313 bang]: #51
[#313 binary_and_expression]: #43
[#313 binary_or_expression]: #44
[#313 binary_xor_expression]: #45
[#313 bitwise_expression]: #41
[#313 bool_literal]: #71
[#313 callable]: #62
[#313 const_literal]: #63
[#313 decimal_float_literal]: #96
[#313 depth_texture_type]: #108
[#313 expression]: #409
[#313 float16]: #75
[#313 float32]: #74
[#313 float_literal]: #70
[#313 hex_float_literal]: #97
[#313 ident]: #61
[#313 int32]: #76
[#313 int_literal]: #69
[#313 mat_prefix]: #68
[#313 minus]: #50
[#313 multiplicative_expression]: #48
[#313 multisampled_texture_type]: #110
[#313 paren_expression]: #64
[#313 paren_left]: #72
[#313 pointer]: #78
[#313 primary_expression]: #55
[#313 relational_expression]: #38
[#313 sampled_texture_type]: #109
[#313 sampler_type]: #107
[#313 shift_expression]: #42
[#313 short_circuit_and_expression]: #40
[#313 short_circuit_or_expression]: #39
[#313 singular_expression]: #49
[#313 star]: #53
[#313 storage_texture_type]: #111
[#313 texture_sampler_types]: #80
[#313 tilde]: #52
[#313 type_decl_without_ident]: #66
[#313 uint32]: #77
[#313 unary_expression]: #47
[#313 vec_prefix]: #67
[#314 additive_expression]: #46
[#314 and]: #54
[#314 array_type_decl]: #79
[#314 bang]: #51
[#314 binary_and_expression]: #43
[#314 binary_or_expression]: #44
[#314 binary_xor_expression]: #45
[#314 bitwise_expression]: #41
[#314 bool_literal]: #71
[#314 callable]: #62
[#314 const_literal]: #63
[#314 decimal_float_literal]: #96
[#314 depth_texture_type]: #108
[#314 expression]: #408
[#314 float16]: #75
[#314 float32]: #74
[#314 float_literal]: #70
[#314 hex_float_literal]: #97
[#314 ident]: #61
[#314 int32]: #76
[#314 int_literal]: #69
[#314 mat_prefix]: #68
[#314 minus]: #50
[#314 multiplicative_expression]: #48
[#314 multisampled_texture_type]: #110
[#314 paren_expression]: #64
[#314 paren_left]: #72
[#314 pointer]: #78
[#314 primary_expression]: #55
[#314 relational_expression]: #38
[#314 sampled_texture_type]: #109
[#314 sampler_type]: #107
[#314 shift_expression]: #42
[#314 short_circuit_and_expression]: #40
[#314 short_circuit_or_expression]: #39
[#314 singular_expression]: #49
[#314 star]: #53
[#314 storage_texture_type]: #111
[#314 texture_sampler_types]: #80
[#314 tilde]: #52
[#314 type_decl_without_ident]: #66
[#314 uint32]: #77
[#314 unary_expression]: #47
[#314 vec_prefix]: #67
[#315 brace_left]: #407
[#316 paren_left]: #406
[#317 additive_expression]: #46
[#317 and]: #54
[#317 array_type_decl]: #79
[#317 bang]: #51
[#317 binary_and_expression]: #43
[#317 binary_or_expression]: #44
[#317 binary_xor_expression]: #45
[#317 bitwise_expression]: #41
[#317 bool_literal]: #71
[#317 callable]: #62
[#317 const_literal]: #63
[#317 decimal_float_literal]: #96
[#317 depth_texture_type]: #108
[#317 expression]: #405
[#317 float16]: #75
[#317 float32]: #74
[#317 float_literal]: #70
[#317 hex_float_literal]: #97
[#317 ident]: #61
[#317 int32]: #76
[#317 int_literal]: #69
[#317 mat_prefix]: #68
[#317 minus]: #50
[#317 multiplicative_expression]: #48
[#317 multisampled_texture_type]: #110
[#317 paren_expression]: #64
[#317 paren_left]: #72
[#317 pointer]: #78
[#317 primary_expression]: #55
[#317 relational_expression]: #38
[#317 sampled_texture_type]: #109
[#317 sampler_type]: #107
[#317 shift_expression]: #42
[#317 short_circuit_and_expression]: #40
[#317 short_circuit_or_expression]: #39
[#317 singular_expression]: #49
[#317 star]: #53
[#317 storage_texture_type]: #111
[#317 texture_sampler_types]: #80
[#317 tilde]: #52
[#317 type_decl_without_ident]: #66
[#317 uint32]: #77
[#317 unary_expression]: #47
[#317 vec_prefix]: #67
[#318 argument_expression_list]: #404
[#318 paren_left]: #182
[#320 ident]: #402
[#320 variable_ident_decl]: #403
[#320 variable_statement/2.1]: #401
[#321 ident]: #399
[#321 variable_ident_decl]: #400
[#321 variable_statement/3.1]: #398
[#324 and_equal]: #383
[#324 assignment_statement/0.1]: #371
[#324 compound_assignment_operator]: #375
[#324 division_equal]: #381
[#324 equal]: #374
[#324 minus_equal]: #379
[#324 minus_minus]: #373
[#324 modulo_equal]: #382
[#324 or_equal]: #384
[#324 plus_equal]: #378
[#324 plus_plus]: #372
[#324 shift_left_equal]: #387
[#324 shift_right_equal]: #386
[#324 times_equal]: #380
[#324 xor_equal]: #385
[#325 core_lhs_expression]: #368
[#325 ident]: #369
[#325 paren_left]: #370
[#327 and]: #329
[#327 lhs_expression/0.0/0]: #367
[#327 lhs_expression/0.0/0/0.0]: #327
[#327 star]: #328
[#330 attr]: #31
[#330 attribute]: #366
[#330 function_header/0.3]: #358
[#330 param]: #363
[#330 param/0.0]: #364
[#330 param/0.0/0]: #365
[#330 param_list]: #359
[#330 param_list/0.0]: #360
[#330 param_list/0.0/0]: #361
[#330 param_list/0.0/0/0.0]: #362
[#331 attr]: #31
[#331 attribute]: #337
[#331 struct_member]: #357
[#331 struct_member/0.0]: #335
[#331 struct_member/0.0/0]: #336
[#333 attr]: #31
[#333 attribute]: #337
[#333 struct_body_decl/0.1/0]: #356
[#333 struct_body_decl/0.1/0/0.0]: #333
[#333 struct_member]: #334
[#333 struct_member/0.0]: #335
[#333 struct_member/0.0/0]: #336
[#334 comma]: #355
[#335 ident]: #354
[#335 variable_ident_decl]: #353
[#337 attr]: #31
[#337 attribute]: #337
[#337 struct_member/0.0/0]: #352
[#340 additive_expression]: #46
[#340 and]: #54
[#340 array_type_decl]: #79
[#340 bang]: #51
[#340 binary_and_expression]: #43
[#340 binary_or_expression]: #44
[#340 binary_xor_expression]: #45
[#340 bitwise_expression]: #41
[#340 bool_literal]: #71
[#340 callable]: #62
[#340 const_literal]: #63
[#340 decimal_float_literal]: #96
[#340 depth_texture_type]: #108
[#340 expression]: #351
[#340 float16]: #75
[#340 float32]: #74
[#340 float_literal]: #70
[#340 hex_float_literal]: #97
[#340 ident]: #61
[#340 int32]: #76
[#340 int_literal]: #69
[#340 mat_prefix]: #68
[#340 minus]: #50
[#340 multiplicative_expression]: #48
[#340 multisampled_texture_type]: #110
[#340 paren_expression]: #64
[#340 paren_left]: #72
[#340 pointer]: #78
[#340 primary_expression]: #55
[#340 relational_expression]: #38
[#340 sampled_texture_type]: #109
[#340 sampler_type]: #107
[#340 shift_expression]: #42
[#340 short_circuit_and_expression]: #40
[#340 short_circuit_or_expression]: #39
[#340 singular_expression]: #49
[#340 star]: #53
[#340 storage_texture_type]: #111
[#340 texture_sampler_types]: #80
[#340 tilde]: #52
[#340 type_decl_without_ident]: #66
[#340 uint32]: #77
[#340 unary_expression]: #47
[#340 vec_prefix]: #67
[#344 comma]: #349
[#344 variable_qualifier/0.2]: #348
[#346 colon]: #161
[#348 greater_than]: #489
[#349 access_mode]: #488
[#354 colon]: #161
[#357 comma]: #487
[#357 struct_body_decl/0.3]: #486
[#358 paren_right]: #485
[#360 attr]: #31
[#360 attribute]: #366
[#360 param]: #484
[#360 param/0.0]: #364
[#360 param/0.0/0]: #365
[#362 attr]: #31
[#362 attribute]: #366
[#362 param]: #363
[#362 param/0.0]: #364
[#362 param/0.0/0]: #365
[#362 param_list/0.0/0]: #483
[#362 param_list/0.0/0/0.0]: #362
[#363 comma]: #482
[#364 ident]: #354
[#364 variable_ident_decl]: #481
[#366 attr]: #31
[#366 attribute]: #366
[#366 param/0.0/0]: #480
[#368 bracket_left]: #185
[#368 lhs_expression/0.2]: #478
[#368 period]: #186
[#368 postfix_expression]: #479
[#370 and]: #329
[#370 lhs_expression]: #477
[#370 lhs_expression/0.0]: #325
[#370 lhs_expression/0.0/0]: #326
[#370 lhs_expression/0.0/0/0.0]: #327
[#370 star]: #328
[#371 additive_expression]: #46
[#371 and]: #54
[#371 array_type_decl]: #79
[#371 bang]: #51
[#371 binary_and_expression]: #43
[#371 binary_or_expression]: #44
[#371 binary_xor_expression]: #45
[#371 bitwise_expression]: #41
[#371 bool_literal]: #71
[#371 callable]: #62
[#371 const_literal]: #63
[#371 decimal_float_literal]: #96
[#371 depth_texture_type]: #108
[#371 expression]: #476
[#371 float16]: #75
[#371 float32]: #74
[#371 float_literal]: #70
[#371 hex_float_literal]: #97
[#371 ident]: #61
[#371 int32]: #76
[#371 int_literal]: #69
[#371 mat_prefix]: #68
[#371 minus]: #50
[#371 multiplicative_expression]: #48
[#371 multisampled_texture_type]: #110
[#371 paren_expression]: #64
[#371 paren_left]: #72
[#371 pointer]: #78
[#371 primary_expression]: #55
[#371 relational_expression]: #38
[#371 sampled_texture_type]: #109
[#371 sampler_type]: #107
[#371 shift_expression]: #42
[#371 short_circuit_and_expression]: #40
[#371 short_circuit_or_expression]: #39
[#371 singular_expression]: #49
[#371 star]: #53
[#371 storage_texture_type]: #111
[#371 texture_sampler_types]: #80
[#371 tilde]: #52
[#371 type_decl_without_ident]: #66
[#371 uint32]: #77
[#371 unary_expression]: #47
[#371 vec_prefix]: #67
[#398 equal]: #475
[#399 colon]: #161
[#401 equal]: #474
[#402 colon]: #161
[#405 brace_left]: #173
[#405 compound_statement]: #473
[#406 and]: #329
[#406 assignment_statement]: #471
[#406 decrement_statement]: #470
[#406 for_header]: #465
[#406 for_header/0.0]: #466
[#406 for_init]: #467
[#406 func_call_statement]: #472
[#406 ident]: #318
[#406 increment_statement]: #469
[#406 lhs_expression]: #324
[#406 lhs_expression/0.0]: #325
[#406 lhs_expression/0.0/0]: #326
[#406 lhs_expression/0.0/0/0.0]: #327
[#406 star]: #328
[#406 variable_decl]: #319
[#406 variable_statement]: #468
[#407 and]: #329
[#407 assignment_statement]: #307
[#407 brace_left]: #173
[#407 break_statement]: #304
[#407 compound_statement]: #308
[#407 continue_statement]: #305
[#407 decrement_statement]: #310
[#407 for_statement]: #300
[#407 func_call_statement]: #302
[#407 ident]: #318
[#407 if_statement]: #297
[#407 increment_statement]: #309
[#407 lhs_expression]: #324
[#407 lhs_expression/0.0]: #325
[#407 lhs_expression/0.0/0]: #326
[#407 lhs_expression/0.0/0/0.0]: #327
[#407 loop_statement]: #299
[#407 loop_statement/0.2]: #462
[#407 loop_statement/0.2/0]: #463
[#407 return_statement]: #296
[#407 semicolon]: #295
[#407 star]: #328
[#407 statement]: #464
[#407 static_assert_statement]: #311
[#407 switch_statement]: #298
[#407 variable_decl]: #319
[#407 variable_statement]: #303
[#407 while_statement]: #301
[#408 brace_left]: #461
[#409 brace_left]: #173
[#409 compound_statement]: #460
[#425 access_mode]: #456
[#428 greater_than]: #455
[#429 additive_expression]: #452
[#429 and]: #54
[#429 array_type_decl]: #79
[#429 bang]: #51
[#429 binary_and_expression]: #43
[#429 binary_or_expression]: #44
[#429 binary_xor_expression]: #45
[#429 bitwise_expression]: #453
[#429 bool_literal]: #71
[#429 callable]: #62
[#429 const_literal]: #63
[#429 decimal_float_literal]: #96
[#429 depth_texture_type]: #108
[#429 element_count_expression]: #451
[#429 float16]: #75
[#429 float32]: #74
[#429 float_literal]: #70
[#429 hex_float_literal]: #97
[#429 ident]: #61
[#429 int32]: #76
[#429 int_literal]: #69
[#429 mat_prefix]: #68
[#429 minus]: #50
[#429 multiplicative_expression]: #48
[#429 multisampled_texture_type]: #110
[#429 paren_expression]: #64
[#429 paren_left]: #72
[#429 pointer]: #78
[#429 primary_expression]: #55
[#429 sampled_texture_type]: #109
[#429 sampler_type]: #107
[#429 singular_expression]: #49
[#429 star]: #53
[#429 storage_texture_type]: #111
[#429 texture_sampler_types]: #80
[#429 tilde]: #52
[#429 type_decl_without_ident]: #66
[#429 uint32]: #77
[#429 unary_expression]: #454
[#429 vec_prefix]: #67
[#430 array_type_decl]: #79
[#430 depth_texture_type]: #108
[#430 float16]: #75
[#430 float32]: #74
[#430 ident]: #262
[#430 int32]: #76
[#430 multisampled_texture_type]: #110
[#430 pointer]: #78
[#430 sampled_texture_type]: #109
[#430 sampler_type]: #107
[#430 storage_texture_type]: #111
[#430 texture_sampler_types]: #80
[#430 type_decl]: #450
[#430 type_decl_without_ident]: #263
[#430 uint32]: #77
[#431 paren_expression]: #449
[#431 paren_left]: #72
[#434 argument_expression_list/0.1/0.2]: #447
[#434 comma]: #448
[#436 bracket_left]: #185
[#436 period]: #186
[#436 postfix_expression]: #446
[#436 postfix_expression/0.3]: #445
[#442 attribute/0.5]: #443
[#442 comma]: #444
[#443 paren_right]: #515
[#450 comma]: #514
[#450 type_decl_without_ident/7.5]: #513
[#452 minus]: #204
[#452 plus]: #203
[#456 greater_than]: #512
[#460 if_statement/0.3]: #510
[#461 switch_body]: #507
[#461 switch_statement/0.3]: #505
[#461 switch_statement/0.3/0]: #506
[#462 continuing_statement]: #503
[#462 loop_statement/0.3]: #502
[#464 and]: #329
[#464 assignment_statement]: #307
[#464 brace_left]: #173
[#464 break_statement]: #304
[#464 compound_statement]: #308
[#464 continue_statement]: #305
[#464 decrement_statement]: #310
[#464 for_statement]: #300
[#464 func_call_statement]: #302
[#464 ident]: #318
[#464 if_statement]: #297
[#464 increment_statement]: #309
[#464 lhs_expression]: #324
[#464 lhs_expression/0.0]: #325
[#464 lhs_expression/0.0/0]: #326
[#464 lhs_expression/0.0/0/0.0]: #327
[#464 loop_statement]: #299
[#464 loop_statement/0.2/0]: #501
[#464 return_statement]: #296
[#464 semicolon]: #295
[#464 star]: #328
[#464 statement]: #464
[#464 static_assert_statement]: #311
[#464 switch_statement]: #298
[#464 variable_decl]: #319
[#464 variable_statement]: #303
[#464 while_statement]: #301
[#465 paren_right]: #500
[#466 semicolon]: #499
[#474 additive_expression]: #46
[#474 and]: #54
[#474 array_type_decl]: #79
[#474 bang]: #51
[#474 binary_and_expression]: #43
[#474 binary_or_expression]: #44
[#474 binary_xor_expression]: #45
[#474 bitwise_expression]: #41
[#474 bool_literal]: #71
[#474 callable]: #62
[#474 const_literal]: #63
[#474 decimal_float_literal]: #96
[#474 depth_texture_type]: #108
[#474 expression]: #498
[#474 float16]: #75
[#474 float32]: #74
[#474 float_literal]: #70
[#474 hex_float_literal]: #97
[#474 ident]: #61
[#474 int32]: #76
[#474 int_literal]: #69
[#474 mat_prefix]: #68
[#474 minus]: #50
[#474 multiplicative_expression]: #48
[#474 multisampled_texture_type]: #110
[#474 paren_expression]: #64
[#474 paren_left]: #72
[#474 pointer]: #78
[#474 primary_expression]: #55
[#474 relational_expression]: #38
[#474 sampled_texture_type]: #109
[#474 sampler_type]: #107
[#474 shift_expression]: #42
[#474 short_circuit_and_expression]: #40
[#474 short_circuit_or_expression]: #39
[#474 singular_expression]: #49
[#474 star]: #53
[#474 storage_texture_type]: #111
[#474 texture_sampler_types]: #80
[#474 tilde]: #52
[#474 type_decl_without_ident]: #66
[#474 uint32]: #77
[#474 unary_expression]: #47
[#474 vec_prefix]: #67
[#475 additive_expression]: #46
[#475 and]: #54
[#475 array_type_decl]: #79
[#475 bang]: #51
[#475 binary_and_expression]: #43
[#475 binary_or_expression]: #44
[#475 binary_xor_expression]: #45
[#475 bitwise_expression]: #41
[#475 bool_literal]: #71
[#475 callable]: #62
[#475 const_literal]: #63
[#475 decimal_float_literal]: #96
[#475 depth_texture_type]: #108
[#475 expression]: #497
[#475 float16]: #75
[#475 float32]: #74
[#475 float_literal]: #70
[#475 hex_float_literal]: #97
[#475 ident]: #61
[#475 int32]: #76
[#475 int_literal]: #69
[#475 mat_prefix]: #68
[#475 minus]: #50
[#475 multiplicative_expression]: #48
[#475 multisampled_texture_type]: #110
[#475 paren_expression]: #64
[#475 paren_left]: #72
[#475 pointer]: #78
[#475 primary_expression]: #55
[#475 relational_expression]: #38
[#475 sampled_texture_type]: #109
[#475 sampler_type]: #107
[#475 shift_expression]: #42
[#475 short_circuit_and_expression]: #40
[#475 short_circuit_or_expression]: #39
[#475 singular_expression]: #49
[#475 star]: #53
[#475 storage_texture_type]: #111
[#475 texture_sampler_types]: #80
[#475 tilde]: #52
[#475 type_decl_without_ident]: #66
[#475 uint32]: #77
[#475 unary_expression]: #47
[#475 vec_prefix]: #67
[#477 paren_right]: #496
[#484 comma]: #495
[#484 param_list/0.2]: #494
[#485 arrow]: #492
[#485 function_header/0.5]: #491
[#486 brace_right]: #490
[#492 attr]: #31
[#492 attribute]: #535
[#492 function_header/0.5/0.1]: #533
[#492 function_header/0.5/0.1/0]: #534
[#499 additive_expression]: #46
[#499 and]: #54
[#499 array_type_decl]: #79
[#499 bang]: #51
[#499 binary_and_expression]: #43
[#499 binary_or_expression]: #44
[#499 binary_xor_expression]: #45
[#499 bitwise_expression]: #41
[#499 bool_literal]: #71
[#499 callable]: #62
[#499 const_literal]: #63
[#499 decimal_float_literal]: #96
[#499 depth_texture_type]: #108
[#499 expression]: #532
[#499 float16]: #75
[#499 float32]: #74
[#499 float_literal]: #70
[#499 for_header/0.2]: #531
[#499 hex_float_literal]: #97
[#499 ident]: #61
[#499 int32]: #76
[#499 int_literal]: #69
[#499 mat_prefix]: #68
[#499 minus]: #50
[#499 multiplicative_expression]: #48
[#499 multisampled_texture_type]: #110
[#499 paren_expression]: #64
[#499 paren_left]: #72
[#499 pointer]: #78
[#499 primary_expression]: #55
[#499 relational_expression]: #38
[#499 sampled_texture_type]: #109
[#499 sampler_type]: #107
[#499 shift_expression]: #42
[#499 short_circuit_and_expression]: #40
[#499 short_circuit_or_expression]: #39
[#499 singular_expression]: #49
[#499 star]: #53
[#499 storage_texture_type]: #111
[#499 texture_sampler_types]: #80
[#499 tilde]: #52
[#499 type_decl_without_ident]: #66
[#499 uint32]: #77
[#499 unary_expression]: #47
[#499 vec_prefix]: #67
[#500 brace_left]: #173
[#500 compound_statement]: #530
[#502 brace_right]: #529
[#504 brace_left]: #528
[#504 continuing_compound_statement]: #527
[#505 brace_right]: #526
[#507 switch_body]: #507
[#507 switch_statement/0.3/0]: #525
[#508 additive_expression]: #46
[#508 and]: #54
[#508 array_type_decl]: #79
[#508 bang]: #51
[#508 binary_and_expression]: #43
[#508 binary_or_expression]: #44
[#508 binary_xor_expression]: #45
[#508 bitwise_expression]: #41
[#508 bool_literal]: #71
[#508 callable]: #62
[#508 case_selectors]: #523
[#508 const_literal]: #63
[#508 decimal_float_literal]: #96
[#508 depth_texture_type]: #108
[#508 expression]: #524
[#508 float16]: #75
[#508 float32]: #74
[#508 float_literal]: #70
[#508 hex_float_literal]: #97
[#508 ident]: #61
[#508 int32]: #76
[#508 int_literal]: #69
[#508 mat_prefix]: #68
[#508 minus]: #50
[#508 multiplicative_expression]: #48
[#508 multisampled_texture_type]: #110
[#508 paren_expression]: #64
[#508 paren_left]: #72
[#508 pointer]: #78
[#508 primary_expression]: #55
[#508 relational_expression]: #38
[#508 sampled_texture_type]: #109
[#508 sampler_type]: #107
[#508 shift_expression]: #42
[#508 short_circuit_and_expression]: #40
[#508 short_circuit_or_expression]: #39
[#508 singular_expression]: #49
[#508 star]: #53
[#508 storage_texture_type]: #111
[#508 texture_sampler_types]: #80
[#508 tilde]: #52
[#508 type_decl_without_ident]: #66
[#508 uint32]: #77
[#508 unary_expression]: #47
[#508 vec_prefix]: #67
[#509 colon]: #522
[#509 switch_body/1.1]: #521
[#511 brace_left]: #173
[#511 compound_statement]: #519
[#511 else_statement]: #518
[#511 if_statement]: #520
[#513 greater_than]: #517
[#514 access_mode]: #516
[#521 brace_left]: #549
[#521 case_compound_statement]: #548
[#523 colon]: #547
[#523 switch_body/0.2]: #546
[#524 case_selectors/0.1]: #542
[#524 case_selectors/0.1/0]: #543
[#524 case_selectors/0.1/0/0.0]: #544
[#524 comma]: #545
[#528 and]: #329
[#528 assignment_statement]: #307
[#528 brace_left]: #173
[#528 break_statement]: #304
[#528 compound_statement]: #308
[#528 continue_statement]: #305
[#528 continuing_compound_statement/0.1]: #539
[#528 continuing_compound_statement/0.1/0]: #540
[#528 decrement_statement]: #310
[#528 for_statement]: #300
[#528 func_call_statement]: #302
[#528 ident]: #318
[#528 if_statement]: #297
[#528 increment_statement]: #309
[#528 lhs_expression]: #324
[#528 lhs_expression/0.0]: #325
[#528 lhs_expression/0.0/0]: #326
[#528 lhs_expression/0.0/0/0.0]: #327
[#528 loop_statement]: #299
[#528 return_statement]: #296
[#528 semicolon]: #295
[#528 star]: #328
[#528 statement]: #541
[#528 static_assert_statement]: #311
[#528 switch_statement]: #298
[#528 variable_decl]: #319
[#528 variable_statement]: #303
[#528 while_statement]: #301
[#531 semicolon]: #538
[#533 array_type_decl]: #79
[#533 depth_texture_type]: #108
[#533 float16]: #75
[#533 float32]: #74
[#533 ident]: #262
[#533 int32]: #76
[#533 multisampled_texture_type]: #110
[#533 pointer]: #78
[#533 sampled_texture_type]: #109
[#533 sampler_type]: #107
[#533 storage_texture_type]: #111
[#533 texture_sampler_types]: #80
[#533 type_decl]: #537
[#533 type_decl_without_ident]: #263
[#533 uint32]: #77
[#535 attr]: #31
[#535 attribute]: #535
[#535 function_header/0.5/0.1/0]: #536
[#538 and]: #329
[#538 assignment_statement]: #566
[#538 decrement_statement]: #565
[#538 for_header/0.4]: #562
[#538 for_update]: #563
[#538 func_call_statement]: #567
[#538 ident]: #318
[#538 increment_statement]: #564
[#538 lhs_expression]: #324
[#538 lhs_expression/0.0]: #325
[#538 lhs_expression/0.0/0]: #326
[#538 lhs_expression/0.0/0/0.0]: #327
[#538 star]: #328
[#539 break_if_statement]: #560
[#539 continuing_compound_statement/0.2]: #559
[#541 and]: #329
[#541 assignment_statement]: #307
[#541 brace_left]: #173
[#541 break_statement]: #304
[#541 compound_statement]: #308
[#541 continue_statement]: #305
[#541 continuing_compound_statement/0.1/0]: #558
[#541 decrement_statement]: #310
[#541 for_statement]: #300
[#541 func_call_statement]: #302
[#541 ident]: #318
[#541 if_statement]: #297
[#541 increment_statement]: #309
[#541 lhs_expression]: #324
[#541 lhs_expression/0.0]: #325
[#541 lhs_expression/0.0/0]: #326
[#541 lhs_expression/0.0/0/0.0]: #327
[#541 loop_statement]: #299
[#541 return_statement]: #296
[#541 semicolon]: #295
[#541 star]: #328
[#541 statement]: #541
[#541 static_assert_statement]: #311
[#541 switch_statement]: #298
[#541 variable_decl]: #319
[#541 variable_statement]: #303
[#541 while_statement]: #301
[#542 case_selectors/0.2]: #556
[#542 comma]: #557
[#544 case_selectors/0.1/0]: #555
[#544 case_selectors/0.1/0/0.0]: #544
[#544 comma]: #545
[#545 additive_expression]: #46
[#545 and]: #54
[#545 array_type_decl]: #79
[#545 bang]: #51
[#545 binary_and_expression]: #43
[#545 binary_or_expression]: #44
[#545 binary_xor_expression]: #45
[#545 bitwise_expression]: #41
[#545 bool_literal]: #71
[#545 callable]: #62
[#545 const_literal]: #63
[#545 decimal_float_literal]: #96
[#545 depth_texture_type]: #108
[#545 expression]: #554
[#545 float16]: #75
[#545 float32]: #74
[#545 float_literal]: #70
[#545 hex_float_literal]: #97
[#545 ident]: #61
[#545 int32]: #76
[#545 int_literal]: #69
[#545 mat_prefix]: #68
[#545 minus]: #50
[#545 multiplicative_expression]: #48
[#545 multisampled_texture_type]: #110
[#545 paren_expression]: #64
[#545 paren_left]: #72
[#545 pointer]: #78
[#545 primary_expression]: #55
[#545 relational_expression]: #38
[#545 sampled_texture_type]: #109
[#545 sampler_type]: #107
[#545 shift_expression]: #42
[#545 short_circuit_and_expression]: #40
[#545 short_circuit_or_expression]: #39
[#545 singular_expression]: #49
[#545 star]: #53
[#545 storage_texture_type]: #111
[#545 texture_sampler_types]: #80
[#545 tilde]: #52
[#545 type_decl_without_ident]: #66
[#545 uint32]: #77
[#545 unary_expression]: #47
[#545 vec_prefix]: #67
[#546 brace_left]: #549
[#546 case_compound_statement]: #553
[#549 and]: #329
[#549 assignment_statement]: #307
[#549 brace_left]: #173
[#549 break_statement]: #304
[#549 case_compound_statement/0.1]: #550
[#549 case_compound_statement/0.1/0]: #551
[#549 compound_statement]: #308
[#549 continue_statement]: #305
[#549 decrement_statement]: #310
[#549 for_statement]: #300
[#549 func_call_statement]: #302
[#549 ident]: #318
[#549 if_statement]: #297
[#549 increment_statement]: #309
[#549 lhs_expression]: #324
[#549 lhs_expression/0.0]: #325
[#549 lhs_expression/0.0/0]: #326
[#549 lhs_expression/0.0/0/0.0]: #327
[#549 loop_statement]: #299
[#549 return_statement]: #296
[#549 semicolon]: #295
[#549 star]: #328
[#549 statement]: #552
[#549 static_assert_statement]: #311
[#549 switch_statement]: #298
[#549 variable_decl]: #319
[#549 variable_statement]: #303
[#549 while_statement]: #301
[#550 case_compound_statement/0.2]: #571
[#550 fallthrough_statement]: #572
[#552 and]: #329
[#552 assignment_statement]: #307
[#552 brace_left]: #173
[#552 break_statement]: #304
[#552 case_compound_statement/0.1/0]: #570
[#552 compound_statement]: #308
[#552 continue_statement]: #305
[#552 decrement_statement]: #310
[#552 for_statement]: #300
[#552 func_call_statement]: #302
[#552 ident]: #318
[#552 if_statement]: #297
[#552 increment_statement]: #309
[#552 lhs_expression]: #324
[#552 lhs_expression/0.0]: #325
[#552 lhs_expression/0.0/0]: #326
[#552 lhs_expression/0.0/0/0.0]: #327
[#552 loop_statement]: #299
[#552 return_statement]: #296
[#552 semicolon]: #295
[#552 star]: #328
[#552 statement]: #552
[#552 static_assert_statement]: #311
[#552 switch_statement]: #298
[#552 variable_decl]: #319
[#552 variable_statement]: #303
[#552 while_statement]: #301
[#559 brace_right]: #569
[#568 additive_expression]: #46
[#568 and]: #54
[#568 array_type_decl]: #79
[#568 bang]: #51
[#568 binary_and_expression]: #43
[#568 binary_or_expression]: #44
[#568 binary_xor_expression]: #45
[#568 bitwise_expression]: #41
[#568 bool_literal]: #71
[#568 callable]: #62
[#568 const_literal]: #63
[#568 decimal_float_literal]: #96
[#568 depth_texture_type]: #108
[#568 expression]: #576
[#568 float16]: #75
[#568 float32]: #74
[#568 float_literal]: #70
[#568 hex_float_literal]: #97
[#568 ident]: #61
[#568 int32]: #76
[#568 int_literal]: #69
[#568 mat_prefix]: #68
[#568 minus]: #50
[#568 multiplicative_expression]: #48
[#568 multisampled_texture_type]: #110
[#568 paren_expression]: #64
[#568 paren_left]: #72
[#568 pointer]: #78
[#568 primary_expression]: #55
[#568 relational_expression]: #38
[#568 sampled_texture_type]: #109
[#568 sampler_type]: #107
[#568 shift_expression]: #42
[#568 short_circuit_and_expression]: #40
[#568 short_circuit_or_expression]: #39
[#568 singular_expression]: #49
[#568 star]: #53
[#568 storage_texture_type]: #111
[#568 texture_sampler_types]: #80
[#568 tilde]: #52
[#568 type_decl_without_ident]: #66
[#568 uint32]: #77
[#568 unary_expression]: #47
[#568 vec_prefix]: #67
[#571 brace_right]: #575
[#573 semicolon]: #574
[#576 semicolon]: #577
